[
    {
        "gold_table_id_set": [
            "520ac40bd55a20de96dc31e86825163a087345904f0c6fc5133d887961d6fce8"
        ],
        "data_list": [
            {
                "nl_query": "How many singers do we have?",
                "sql_query": "SELECT count(*) FROM singer",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            6
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the total number of singers?",
                "sql_query": "SELECT count(*) FROM singer",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            6
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
                "sql_query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
                "sql_query_result": {
                    "header": [
                        "Name",
                        "Country",
                        "Age"
                    ],
                    "cell": [
                        [
                            "Joe Sharp",
                            "Netherlands",
                            52
                        ],
                        [
                            "John Nizinik",
                            "France",
                            43
                        ],
                        [
                            "Rose White",
                            "France",
                            41
                        ],
                        [
                            "Timbaland",
                            "United States",
                            32
                        ],
                        [
                            "Justin Brown",
                            "France",
                            29
                        ],
                        [
                            "Tribal King",
                            "France",
                            25
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names, countries, and ages for every singer in descending order of age?",
                "sql_query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC",
                "sql_query_result": {
                    "header": [
                        "Name",
                        "Country",
                        "Age"
                    ],
                    "cell": [
                        [
                            "Joe Sharp",
                            "Netherlands",
                            52
                        ],
                        [
                            "John Nizinik",
                            "France",
                            43
                        ],
                        [
                            "Rose White",
                            "France",
                            41
                        ],
                        [
                            "Timbaland",
                            "United States",
                            32
                        ],
                        [
                            "Justin Brown",
                            "France",
                            29
                        ],
                        [
                            "Tribal King",
                            "France",
                            25
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the average, minimum, and maximum age of all singers from France?",
                "sql_query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
                "sql_query_result": {
                    "header": [
                        "avg(age)",
                        "min(age)",
                        "max(age)"
                    ],
                    "cell": [
                        [
                            34.5,
                            25,
                            43
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the average, minimum, and maximum age for all French singers?",
                "sql_query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'",
                "sql_query_result": {
                    "header": [
                        "avg(age)",
                        "min(age)",
                        "max(age)"
                    ],
                    "cell": [
                        [
                            34.5,
                            25,
                            43
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show the name and the release year of the song by the youngest singer.",
                "sql_query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Song_Name",
                        "Song_release_year"
                    ],
                    "cell": [
                        [
                            "Love",
                            "2016"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names and release years for all the songs of the youngest singer?",
                "sql_query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Song_Name",
                        "Song_release_year"
                    ],
                    "cell": [
                        [
                            "Love",
                            "2016"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are all distinct countries where singers above age 20 are from?",
                "sql_query": "SELECT DISTINCT country FROM singer WHERE age  >  20",
                "sql_query_result": {
                    "header": [
                        "Country"
                    ],
                    "cell": [
                        [
                            "Netherlands"
                        ],
                        [
                            "United States"
                        ],
                        [
                            "France"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are  the different countries with singers above age 20?",
                "sql_query": "SELECT DISTINCT country FROM singer WHERE age  >  20",
                "sql_query_result": {
                    "header": [
                        "Country"
                    ],
                    "cell": [
                        [
                            "Netherlands"
                        ],
                        [
                            "United States"
                        ],
                        [
                            "France"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show all countries and the number of singers in each country.",
                "sql_query": "SELECT country ,  count(*) FROM singer GROUP BY country",
                "sql_query_result": {
                    "header": [
                        "Country",
                        "count(*)"
                    ],
                    "cell": [
                        [
                            "France",
                            4
                        ],
                        [
                            "Netherlands",
                            1
                        ],
                        [
                            "United States",
                            1
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many singers are from each country?",
                "sql_query": "SELECT country ,  count(*) FROM singer GROUP BY country",
                "sql_query_result": {
                    "header": [
                        "Country",
                        "count(*)"
                    ],
                    "cell": [
                        [
                            "France",
                            4
                        ],
                        [
                            "Netherlands",
                            1
                        ],
                        [
                            "United States",
                            1
                        ]
                    ]
                }
            },
            {
                "nl_query": "List all song names by singers above the average age.",
                "sql_query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
                "sql_query_result": {
                    "header": [
                        "Song_Name"
                    ],
                    "cell": [
                        [
                            "You"
                        ],
                        [
                            "Sun"
                        ],
                        [
                            "Gentleman"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are all the song names by singers who are older than average?",
                "sql_query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)",
                "sql_query_result": {
                    "header": [
                        "Song_Name"
                    ],
                    "cell": [
                        [
                            "You"
                        ],
                        [
                            "Sun"
                        ],
                        [
                            "Gentleman"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show countries where a singer above age 40 and a singer below 30 are from.",
                "sql_query": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30",
                "sql_query_result": {
                    "header": [
                        "Country"
                    ],
                    "cell": [
                        [
                            "France"
                        ]
                    ]
                }
            },
            {
                "nl_query": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
                "sql_query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
                "sql_query_result": {
                    "header": [
                        "Name",
                        "Country"
                    ],
                    "cell": [
                        [
                            "Justin Brown",
                            "France"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
                "sql_query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",
                "sql_query_result": {
                    "header": [
                        "Name",
                        "Country"
                    ],
                    "cell": [
                        [
                            "Justin Brown",
                            "France"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "55d8bd6011208089e55172af624756755886afbbfe0a74293ff296f9e4a74aa1"
        ],
        "data_list": [
            {
                "nl_query": "What is the name and capacity for the stadium with highest average attendance?",
                "sql_query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Name",
                        "Capacity"
                    ],
                    "cell": [
                        [
                            "Stark's Park",
                            10104
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the name and capacity for the stadium with the highest average attendance?",
                "sql_query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Name",
                        "Capacity"
                    ],
                    "cell": [
                        [
                            "Stark's Park",
                            10104
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "30b53cb8659881a5aea294c1aa05d1e495890d50269af66d4bfe6a824bbc16f8"
        ],
        "data_list": [
            {
                "nl_query": "How many concerts are there in year 2014 or 2015?",
                "sql_query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            6
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many concerts occurred in 2014 or 2015?",
                "sql_query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            6
                        ]
                    ]
                }
            },
            {
                "nl_query": "Which year has most number of concerts?",
                "sql_query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Year"
                    ],
                    "cell": [
                        [
                            "2014"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the year that had the most concerts?",
                "sql_query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Year"
                    ],
                    "cell": [
                        [
                            "2014"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "30b53cb8659881a5aea294c1aa05d1e495890d50269af66d4bfe6a824bbc16f8",
            "55d8bd6011208089e55172af624756755886afbbfe0a74293ff296f9e4a74aa1"
        ],
        "data_list": [
            {
                "nl_query": "Show the stadium name and the number of concerts in each stadium.",
                "sql_query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
                "sql_query_result": {
                    "header": [
                        "Name",
                        "count(*)"
                    ],
                    "cell": [
                        [
                            "Stark's Park",
                            1
                        ],
                        [
                            "Glebe Park",
                            1
                        ],
                        [
                            "Somerset Park",
                            2
                        ],
                        [
                            "Recreation Park",
                            1
                        ],
                        [
                            "Balmoor",
                            1
                        ]
                    ]
                }
            },
            {
                "nl_query": "For each stadium, how many concerts play there?",
                "sql_query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",
                "sql_query_result": {
                    "header": [
                        "Name",
                        "count(*)"
                    ],
                    "cell": [
                        [
                            "Stark's Park",
                            1
                        ],
                        [
                            "Glebe Park",
                            1
                        ],
                        [
                            "Somerset Park",
                            2
                        ],
                        [
                            "Recreation Park",
                            1
                        ],
                        [
                            "Balmoor",
                            1
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
                "sql_query": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Name",
                        "Capacity"
                    ],
                    "cell": [
                        [
                            "Somerset Park",
                            11998
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show the stadium names without any concert.",
                "sql_query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Bayview Stadium"
                        ],
                        [
                            "Hampden Park"
                        ],
                        [
                            "Forthbank Stadium"
                        ],
                        [
                            "Gayfield Park"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names of the stadiums without any concerts?",
                "sql_query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Bayview Stadium"
                        ],
                        [
                            "Hampden Park"
                        ],
                        [
                            "Forthbank Stadium"
                        ],
                        [
                            "Gayfield Park"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show names for all stadiums except for stadiums having a concert in year 2014.",
                "sql_query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Balmoor"
                        ],
                        [
                            "Bayview Stadium"
                        ],
                        [
                            "Forthbank Stadium"
                        ],
                        [
                            "Gayfield Park"
                        ],
                        [
                            "Hampden Park"
                        ],
                        [
                            "Recreation Park"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names of all stadiums that did not have a concert in 2014?",
                "sql_query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Balmoor"
                        ],
                        [
                            "Bayview Stadium"
                        ],
                        [
                            "Forthbank Stadium"
                        ],
                        [
                            "Gayfield Park"
                        ],
                        [
                            "Hampden Park"
                        ],
                        [
                            "Recreation Park"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
                "sql_query": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
                "sql_query_result": {
                    "header": [
                        "Name",
                        "Location"
                    ],
                    "cell": [
                        [
                            "Somerset Park",
                            "Ayr United"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
                "sql_query": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",
                "sql_query_result": {
                    "header": [
                        "Name",
                        "Location"
                    ],
                    "cell": [
                        [
                            "Somerset Park",
                            "Ayr United"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "1cb96c8e2ace6f0a7b7ecac1f480e9ed754e3cf15dd4e759a060b14f63d8b56f",
            "30b53cb8659881a5aea294c1aa05d1e495890d50269af66d4bfe6a824bbc16f8"
        ],
        "data_list": [
            {
                "nl_query": "Show the name and theme for all concerts and the number of singers in each concert.",
                "sql_query": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",
                "sql_query_result": {
                    "header": [
                        "concert_Name",
                        "Theme",
                        "count(*)"
                    ],
                    "cell": [
                        [
                            "Auditions",
                            "Free choice",
                            3
                        ],
                        [
                            "Super bootcamp",
                            "Free choice 2",
                            2
                        ],
                        [
                            "Home Visits",
                            "Bleeding Love",
                            1
                        ],
                        [
                            "Week 1",
                            "Wide Awake",
                            1
                        ],
                        [
                            "Week 1",
                            "Happy Tonight",
                            2
                        ],
                        [
                            "Week 2",
                            "Party All Night",
                            1
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "1cb96c8e2ace6f0a7b7ecac1f480e9ed754e3cf15dd4e759a060b14f63d8b56f",
            "520ac40bd55a20de96dc31e86825163a087345904f0c6fc5133d887961d6fce8"
        ],
        "data_list": [
            {
                "nl_query": "List singer names and number of concerts for each singer.",
                "sql_query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
                "sql_query_result": {
                    "header": [
                        "Name",
                        "count(*)"
                    ],
                    "cell": [
                        [
                            "Timbaland",
                            2
                        ],
                        [
                            "Justin Brown",
                            3
                        ],
                        [
                            "Rose White",
                            1
                        ],
                        [
                            "John Nizinik",
                            2
                        ],
                        [
                            "Tribal King",
                            2
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names of the singers and number of concerts for each person?",
                "sql_query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",
                "sql_query_result": {
                    "header": [
                        "Name",
                        "count(*)"
                    ],
                    "cell": [
                        [
                            "Timbaland",
                            2
                        ],
                        [
                            "Justin Brown",
                            3
                        ],
                        [
                            "Rose White",
                            1
                        ],
                        [
                            "John Nizinik",
                            2
                        ],
                        [
                            "Tribal King",
                            2
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "1cb96c8e2ace6f0a7b7ecac1f480e9ed754e3cf15dd4e759a060b14f63d8b56f",
            "30b53cb8659881a5aea294c1aa05d1e495890d50269af66d4bfe6a824bbc16f8",
            "520ac40bd55a20de96dc31e86825163a087345904f0c6fc5133d887961d6fce8"
        ],
        "data_list": [
            {
                "nl_query": "List all singer names in concerts in year 2014.",
                "sql_query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Timbaland"
                        ],
                        [
                            "Justin Brown"
                        ],
                        [
                            "John Nizinik"
                        ],
                        [
                            "Tribal King"
                        ],
                        [
                            "Rose White"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names of the singers who performed in a concert in 2014?",
                "sql_query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Timbaland"
                        ],
                        [
                            "Justin Brown"
                        ],
                        [
                            "John Nizinik"
                        ],
                        [
                            "Tribal King"
                        ],
                        [
                            "Rose White"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "1f553232d57eb0dd01c222c0482e565cd322eb0512b6ad3c2273f62021bd4f1c"
        ],
        "data_list": [
            {
                "nl_query": "Find the number of pets whose weight is heavier than 10.",
                "sql_query": "SELECT count(*) FROM pets WHERE weight  >  10",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            2
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many pets have a greater weight than 10?",
                "sql_query": "SELECT count(*) FROM pets WHERE weight  >  10",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            2
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the weight of the youngest dog.",
                "sql_query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "weight"
                    ],
                    "cell": [
                        [
                            9.3
                        ]
                    ]
                }
            },
            {
                "nl_query": "How much does the youngest dog weigh?",
                "sql_query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "weight"
                    ],
                    "cell": [
                        [
                            9.3
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
                "sql_query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
                "sql_query_result": {
                    "header": [
                        "max(weight)",
                        "PetType"
                    ],
                    "cell": [
                        [
                            12.0,
                            "cat"
                        ],
                        [
                            13.4,
                            "dog"
                        ]
                    ]
                }
            },
            {
                "nl_query": "List the maximum weight and type for each type of pet.",
                "sql_query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType",
                "sql_query_result": {
                    "header": [
                        "max(weight)",
                        "PetType"
                    ],
                    "cell": [
                        [
                            12.0,
                            "cat"
                        ],
                        [
                            13.4,
                            "dog"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the number of distinct type of pets.",
                "sql_query": "SELECT count(DISTINCT pettype) FROM pets",
                "sql_query_result": {
                    "header": [
                        "count(DISTINCT pettype)"
                    ],
                    "cell": [
                        [
                            2
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many different types of pet are there?",
                "sql_query": "SELECT count(DISTINCT pettype) FROM pets",
                "sql_query_result": {
                    "header": [
                        "count(DISTINCT pettype)"
                    ],
                    "cell": [
                        [
                            2
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the type and weight of the youngest pet.",
                "sql_query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "PetType",
                        "weight"
                    ],
                    "cell": [
                        [
                            "dog",
                            9.3
                        ]
                    ]
                }
            },
            {
                "nl_query": "What type of pet is the youngest animal, and how much does it weigh?",
                "sql_query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "PetType",
                        "weight"
                    ],
                    "cell": [
                        [
                            "dog",
                            9.3
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the id and weight of all pets whose age is older than 1.",
                "sql_query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
                "sql_query_result": {
                    "header": [
                        "PetID",
                        "weight"
                    ],
                    "cell": [
                        [
                            2001,
                            12.0
                        ],
                        [
                            2002,
                            13.4
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the id and weight of every pet who is older than 1?",
                "sql_query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1",
                "sql_query_result": {
                    "header": [
                        "PetID",
                        "weight"
                    ],
                    "cell": [
                        [
                            2001,
                            12.0
                        ],
                        [
                            2002,
                            13.4
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the average and maximum age for each type of pet.",
                "sql_query": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
                "sql_query_result": {
                    "header": [
                        "avg(pet_age)",
                        "max(pet_age)",
                        "PetType"
                    ],
                    "cell": [
                        [
                            3.0,
                            3,
                            "cat"
                        ],
                        [
                            1.5,
                            2,
                            "dog"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the average and maximum age for each pet type?",
                "sql_query": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",
                "sql_query_result": {
                    "header": [
                        "avg(pet_age)",
                        "max(pet_age)",
                        "PetType"
                    ],
                    "cell": [
                        [
                            3.0,
                            3,
                            "cat"
                        ],
                        [
                            1.5,
                            2,
                            "dog"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the average weight for each pet type.",
                "sql_query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
                "sql_query_result": {
                    "header": [
                        "avg(weight)",
                        "PetType"
                    ],
                    "cell": [
                        [
                            12.0,
                            "cat"
                        ],
                        [
                            11.35,
                            "dog"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the average weight for each type of pet?",
                "sql_query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",
                "sql_query_result": {
                    "header": [
                        "avg(weight)",
                        "PetType"
                    ],
                    "cell": [
                        [
                            12.0,
                            "cat"
                        ],
                        [
                            11.35,
                            "dog"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "0feacad84685892e036bc7d0f357ebc432b964b3e103b4b8974685dcfe442663",
            "342e0b8c0b619405d63fb871dce7610ea9b8b9d21f8171902b94e80bff9a3bb0"
        ],
        "data_list": [
            {
                "nl_query": "Find number of pets owned by students who are older than 20.",
                "sql_query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            0
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many pets are owned by students that have an age greater than 20?",
                "sql_query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            0
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the first name and age of students who have a pet.",
                "sql_query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
                "sql_query_result": {
                    "header": [
                        "Fname",
                        "Age"
                    ],
                    "cell": [
                        [
                            "Linda",
                            18
                        ],
                        [
                            "Tracy",
                            19
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the different first names and ages of the students who do have pets?",
                "sql_query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",
                "sql_query_result": {
                    "header": [
                        "Fname",
                        "Age"
                    ],
                    "cell": [
                        [
                            "Linda",
                            18
                        ],
                        [
                            "Tracy",
                            19
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
                "sql_query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
                "sql_query_result": {
                    "header": [
                        "PetID"
                    ],
                    "cell": [
                        [
                            2001
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the id of the pet owned by the student whose last name is 'Smith'?",
                "sql_query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'",
                "sql_query_result": {
                    "header": [
                        "PetID"
                    ],
                    "cell": [
                        [
                            2001
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the number of pets for each student who has any pet and student id.",
                "sql_query": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",
                "sql_query_result": {
                    "header": [
                        "count(*)",
                        "StuID"
                    ],
                    "cell": [
                        [
                            1,
                            1001
                        ],
                        [
                            2,
                            1002
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the first name and gender of student who have more than one pet.",
                "sql_query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
                "sql_query_result": {
                    "header": [
                        "Fname",
                        "Sex"
                    ],
                    "cell": [
                        [
                            "Tracy",
                            "F"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the first name and gender of the all the students who have more than one pet?",
                "sql_query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",
                "sql_query_result": {
                    "header": [
                        "Fname",
                        "Sex"
                    ],
                    "cell": [
                        [
                            "Tracy",
                            "F"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "0feacad84685892e036bc7d0f357ebc432b964b3e103b4b8974685dcfe442663",
            "1f553232d57eb0dd01c222c0482e565cd322eb0512b6ad3c2273f62021bd4f1c",
            "342e0b8c0b619405d63fb871dce7610ea9b8b9d21f8171902b94e80bff9a3bb0"
        ],
        "data_list": [
            {
                "nl_query": "Find the number of dog pets that are raised by female students (with sex F).",
                "sql_query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            2
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many dog pets are raised by female students?",
                "sql_query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            2
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the first name of students who have cat or dog pet.",
                "sql_query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
                "sql_query_result": {
                    "header": [
                        "Fname"
                    ],
                    "cell": [
                        [
                            "Linda"
                        ],
                        [
                            "Tracy"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the first names of every student who has a cat or dog as a pet?",
                "sql_query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'",
                "sql_query_result": {
                    "header": [
                        "Fname"
                    ],
                    "cell": [
                        [
                            "Linda"
                        ],
                        [
                            "Tracy"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the major and age of students who do not have a cat pet.",
                "sql_query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
                "sql_query_result": {
                    "header": [
                        "Major",
                        "Age"
                    ],
                    "cell": [
                        [
                            600,
                            19
                        ],
                        [
                            600,
                            21
                        ],
                        [
                            600,
                            20
                        ],
                        [
                            600,
                            26
                        ],
                        [
                            600,
                            18
                        ],
                        [
                            600,
                            17
                        ],
                        [
                            600,
                            22
                        ],
                        [
                            600,
                            16
                        ],
                        [
                            600,
                            27
                        ],
                        [
                            520,
                            22
                        ],
                        [
                            520,
                            19
                        ],
                        [
                            540,
                            17
                        ],
                        [
                            520,
                            20
                        ],
                        [
                            540,
                            18
                        ],
                        [
                            520,
                            18
                        ],
                        [
                            550,
                            20
                        ],
                        [
                            100,
                            17
                        ],
                        [
                            550,
                            21
                        ],
                        [
                            550,
                            18
                        ],
                        [
                            50,
                            18
                        ],
                        [
                            50,
                            26
                        ]
                    ]
                }
            },
            {
                "nl_query": "What major is every student who does not own a cat as a pet, and also how old are they?",
                "sql_query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
                "sql_query_result": {
                    "header": [
                        "Major",
                        "Age"
                    ],
                    "cell": [
                        [
                            600,
                            19
                        ],
                        [
                            600,
                            21
                        ],
                        [
                            600,
                            20
                        ],
                        [
                            600,
                            26
                        ],
                        [
                            600,
                            18
                        ],
                        [
                            600,
                            17
                        ],
                        [
                            600,
                            22
                        ],
                        [
                            600,
                            16
                        ],
                        [
                            600,
                            27
                        ],
                        [
                            520,
                            22
                        ],
                        [
                            520,
                            19
                        ],
                        [
                            540,
                            17
                        ],
                        [
                            520,
                            20
                        ],
                        [
                            540,
                            18
                        ],
                        [
                            520,
                            18
                        ],
                        [
                            550,
                            20
                        ],
                        [
                            100,
                            17
                        ],
                        [
                            550,
                            21
                        ],
                        [
                            550,
                            18
                        ],
                        [
                            50,
                            18
                        ],
                        [
                            50,
                            26
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the id of students who do not have a cat pet.",
                "sql_query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
                "sql_query_result": {
                    "header": [
                        "StuID"
                    ],
                    "cell": [
                        [
                            1002
                        ],
                        [
                            1003
                        ],
                        [
                            1004
                        ],
                        [
                            1005
                        ],
                        [
                            1006
                        ],
                        [
                            1007
                        ],
                        [
                            1008
                        ],
                        [
                            1009
                        ],
                        [
                            1010
                        ],
                        [
                            1011
                        ],
                        [
                            1012
                        ],
                        [
                            1014
                        ],
                        [
                            1015
                        ],
                        [
                            1016
                        ],
                        [
                            1017
                        ],
                        [
                            1018
                        ],
                        [
                            1019
                        ],
                        [
                            1020
                        ],
                        [
                            1021
                        ],
                        [
                            1022
                        ],
                        [
                            1023
                        ],
                        [
                            1024
                        ],
                        [
                            1025
                        ],
                        [
                            1026
                        ],
                        [
                            1027
                        ],
                        [
                            1028
                        ],
                        [
                            1029
                        ],
                        [
                            1030
                        ],
                        [
                            1031
                        ],
                        [
                            1032
                        ],
                        [
                            1033
                        ],
                        [
                            1034
                        ],
                        [
                            1035
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the ids of the students who do not own cats as pets?",
                "sql_query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'",
                "sql_query_result": {
                    "header": [
                        "StuID"
                    ],
                    "cell": [
                        [
                            1002
                        ],
                        [
                            1003
                        ],
                        [
                            1004
                        ],
                        [
                            1005
                        ],
                        [
                            1006
                        ],
                        [
                            1007
                        ],
                        [
                            1008
                        ],
                        [
                            1009
                        ],
                        [
                            1010
                        ],
                        [
                            1011
                        ],
                        [
                            1012
                        ],
                        [
                            1014
                        ],
                        [
                            1015
                        ],
                        [
                            1016
                        ],
                        [
                            1017
                        ],
                        [
                            1018
                        ],
                        [
                            1019
                        ],
                        [
                            1020
                        ],
                        [
                            1021
                        ],
                        [
                            1022
                        ],
                        [
                            1023
                        ],
                        [
                            1024
                        ],
                        [
                            1025
                        ],
                        [
                            1026
                        ],
                        [
                            1027
                        ],
                        [
                            1028
                        ],
                        [
                            1029
                        ],
                        [
                            1030
                        ],
                        [
                            1031
                        ],
                        [
                            1032
                        ],
                        [
                            1033
                        ],
                        [
                            1034
                        ],
                        [
                            1035
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
                "sql_query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
                "sql_query_result": {
                    "header": [
                        "Fname",
                        "Age"
                    ],
                    "cell": [
                        [
                            "Tracy",
                            19
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the first name of every student who has a dog but does not have a cat?",
                "sql_query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",
                "sql_query_result": {
                    "header": [
                        "Fname",
                        "Age"
                    ],
                    "cell": [
                        [
                            "Tracy",
                            19
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the last name of the student who has a cat that is age 3.",
                "sql_query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
                "sql_query_result": {
                    "header": [
                        "LName"
                    ],
                    "cell": [
                        [
                            "Smith"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the last name of the student who has a cat that is 3 years old?",
                "sql_query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'",
                "sql_query_result": {
                    "header": [
                        "LName"
                    ],
                    "cell": [
                        [
                            "Smith"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "223e5610d88cb38b31322d9860fa91b9a5da81362db140078ba926075db3cc02"
        ],
        "data_list": [
            {
                "nl_query": "How many continents are there?",
                "sql_query": "SELECT count(*) FROM CONTINENTS;",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            5
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the number of continents?",
                "sql_query": "SELECT count(*) FROM CONTINENTS;",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            5
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "223e5610d88cb38b31322d9860fa91b9a5da81362db140078ba926075db3cc02",
            "c2f4969f3d1908f56eafaa2c941e8dc26518b5ea4dec38071557a46e59e1a5e2"
        ],
        "data_list": [
            {
                "nl_query": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
                "sql_query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
                "sql_query_result": {
                    "header": [
                        "ContId",
                        "Continent",
                        "count(*)"
                    ],
                    "cell": [
                        [
                            1,
                            "america",
                            3
                        ],
                        [
                            2,
                            "europe",
                            6
                        ],
                        [
                            3,
                            "asia",
                            2
                        ],
                        [
                            4,
                            "africa",
                            2
                        ],
                        [
                            5,
                            "australia",
                            2
                        ]
                    ]
                }
            },
            {
                "nl_query": "For each continent, list its id, name, and how many countries it has?",
                "sql_query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;",
                "sql_query_result": {
                    "header": [
                        "ContId",
                        "Continent",
                        "count(*)"
                    ],
                    "cell": [
                        [
                            1,
                            "america",
                            3
                        ],
                        [
                            2,
                            "europe",
                            6
                        ],
                        [
                            3,
                            "asia",
                            2
                        ],
                        [
                            4,
                            "africa",
                            2
                        ],
                        [
                            5,
                            "australia",
                            2
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "c2f4969f3d1908f56eafaa2c941e8dc26518b5ea4dec38071557a46e59e1a5e2"
        ],
        "data_list": [
            {
                "nl_query": "How many countries are listed?",
                "sql_query": "SELECT count(*) FROM COUNTRIES;",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            15
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many countries exist?",
                "sql_query": "SELECT count(*) FROM COUNTRIES;",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            15
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "2dcb5ead6c2f6a37b472409cd0d4ba02ff1ae6c7f74ac7acf0761bdd80920b98",
            "5081f9a68d47805bdabcf122fb6dd2554d40bc20f19a44ede6f0281a5dc5259b"
        ],
        "data_list": [
            {
                "nl_query": "How many models does each car maker produce? List maker full name, id and the number.",
                "sql_query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
                "sql_query_result": {
                    "header": [
                        "FullName",
                        "Id",
                        "count(*)"
                    ],
                    "cell": [
                        [
                            "American Motor Company",
                            1,
                            1
                        ],
                        [
                            "Volkswagen",
                            2,
                            2
                        ],
                        [
                            "BMW",
                            3,
                            1
                        ],
                        [
                            "General Motors",
                            4,
                            5
                        ],
                        [
                            "Ford Motor Company",
                            5,
                            3
                        ],
                        [
                            "Chrysler",
                            6,
                            4
                        ],
                        [
                            "Citroen",
                            7,
                            1
                        ],
                        [
                            "Nissan Motors",
                            8,
                            2
                        ],
                        [
                            "Fiat",
                            9,
                            1
                        ],
                        [
                            "Honda",
                            11,
                            1
                        ],
                        [
                            "Mazda",
                            12,
                            1
                        ],
                        [
                            "Daimler Benz",
                            13,
                            2
                        ],
                        [
                            "Opel",
                            14,
                            1
                        ],
                        [
                            "Peugeaut",
                            15,
                            1
                        ],
                        [
                            "Renault",
                            16,
                            1
                        ],
                        [
                            "Saab",
                            17,
                            1
                        ],
                        [
                            "Subaru",
                            18,
                            1
                        ],
                        [
                            "Toyota",
                            19,
                            2
                        ],
                        [
                            "Triumph",
                            20,
                            1
                        ],
                        [
                            "Volvo",
                            21,
                            1
                        ],
                        [
                            "Kia Motors",
                            22,
                            1
                        ],
                        [
                            "Hyundai",
                            23,
                            1
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the full name of each car maker, along with its id and how many models it produces?",
                "sql_query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;",
                "sql_query_result": {
                    "header": [
                        "FullName",
                        "Id",
                        "count(*)"
                    ],
                    "cell": [
                        [
                            "American Motor Company",
                            1,
                            1
                        ],
                        [
                            "Volkswagen",
                            2,
                            2
                        ],
                        [
                            "BMW",
                            3,
                            1
                        ],
                        [
                            "General Motors",
                            4,
                            5
                        ],
                        [
                            "Ford Motor Company",
                            5,
                            3
                        ],
                        [
                            "Chrysler",
                            6,
                            4
                        ],
                        [
                            "Citroen",
                            7,
                            1
                        ],
                        [
                            "Nissan Motors",
                            8,
                            2
                        ],
                        [
                            "Fiat",
                            9,
                            1
                        ],
                        [
                            "Honda",
                            11,
                            1
                        ],
                        [
                            "Mazda",
                            12,
                            1
                        ],
                        [
                            "Daimler Benz",
                            13,
                            2
                        ],
                        [
                            "Opel",
                            14,
                            1
                        ],
                        [
                            "Peugeaut",
                            15,
                            1
                        ],
                        [
                            "Renault",
                            16,
                            1
                        ],
                        [
                            "Saab",
                            17,
                            1
                        ],
                        [
                            "Subaru",
                            18,
                            1
                        ],
                        [
                            "Toyota",
                            19,
                            2
                        ],
                        [
                            "Triumph",
                            20,
                            1
                        ],
                        [
                            "Volvo",
                            21,
                            1
                        ],
                        [
                            "Kia Motors",
                            22,
                            1
                        ],
                        [
                            "Hyundai",
                            23,
                            1
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
                "sql_query": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;",
                "sql_query_result": {
                    "header": [
                        "Count(*)",
                        "FullName",
                        "Id"
                    ],
                    "cell": [
                        [
                            1,
                            "American Motor Company",
                            1
                        ],
                        [
                            2,
                            "Volkswagen",
                            2
                        ],
                        [
                            1,
                            "BMW",
                            3
                        ],
                        [
                            5,
                            "General Motors",
                            4
                        ],
                        [
                            3,
                            "Ford Motor Company",
                            5
                        ],
                        [
                            4,
                            "Chrysler",
                            6
                        ],
                        [
                            1,
                            "Citroen",
                            7
                        ],
                        [
                            2,
                            "Nissan Motors",
                            8
                        ],
                        [
                            1,
                            "Fiat",
                            9
                        ],
                        [
                            1,
                            "Honda",
                            11
                        ],
                        [
                            1,
                            "Mazda",
                            12
                        ],
                        [
                            2,
                            "Daimler Benz",
                            13
                        ],
                        [
                            1,
                            "Opel",
                            14
                        ],
                        [
                            1,
                            "Peugeaut",
                            15
                        ],
                        [
                            1,
                            "Renault",
                            16
                        ],
                        [
                            1,
                            "Saab",
                            17
                        ],
                        [
                            1,
                            "Subaru",
                            18
                        ],
                        [
                            2,
                            "Toyota",
                            19
                        ],
                        [
                            1,
                            "Triumph",
                            20
                        ],
                        [
                            1,
                            "Volvo",
                            21
                        ],
                        [
                            1,
                            "Kia Motors",
                            22
                        ],
                        [
                            1,
                            "Hyundai",
                            23
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many car models were produced by the maker with full name American Motor Company?",
                "sql_query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            1
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the number of car models created by the car maker American Motor Company?",
                "sql_query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            1
                        ]
                    ]
                }
            },
            {
                "nl_query": "Which makers designed more than 3 car models? List full name and the id.",
                "sql_query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
                "sql_query_result": {
                    "header": [
                        "FullName",
                        "Id"
                    ],
                    "cell": [
                        [
                            "General Motors",
                            4
                        ],
                        [
                            "Chrysler",
                            6
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names and ids of all makers with more than 3 models?",
                "sql_query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",
                "sql_query_result": {
                    "header": [
                        "FullName",
                        "Id"
                    ],
                    "cell": [
                        [
                            "General Motors",
                            4
                        ],
                        [
                            "Chrysler",
                            6
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "223e5610d88cb38b31322d9860fa91b9a5da81362db140078ba926075db3cc02",
            "2dcb5ead6c2f6a37b472409cd0d4ba02ff1ae6c7f74ac7acf0761bdd80920b98",
            "c2f4969f3d1908f56eafaa2c941e8dc26518b5ea4dec38071557a46e59e1a5e2"
        ],
        "data_list": [
            {
                "nl_query": "How many car makers are there in each continents? List the continent name and the count.",
                "sql_query": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
                "sql_query_result": {
                    "header": [
                        "Continent",
                        "count(*)"
                    ],
                    "cell": [
                        [
                            "america",
                            4
                        ],
                        [
                            "asia",
                            7
                        ],
                        [
                            "europe",
                            11
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the name of each continent and how many car makers are there in each one?",
                "sql_query": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",
                "sql_query_result": {
                    "header": [
                        "Continent",
                        "count(*)"
                    ],
                    "cell": [
                        [
                            "america",
                            4
                        ],
                        [
                            "asia",
                            7
                        ],
                        [
                            "europe",
                            11
                        ]
                    ]
                }
            },
            {
                "nl_query": "Which countries in europe have at least 3 car manufacturers?",
                "sql_query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
                "sql_query_result": {
                    "header": [
                        "CountryName"
                    ],
                    "cell": [
                        [
                            "france"
                        ],
                        [
                            "germany"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names of all European countries with at least 3 manufacturers?",
                "sql_query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;",
                "sql_query_result": {
                    "header": [
                        "CountryName"
                    ],
                    "cell": [
                        [
                            "france"
                        ],
                        [
                            "germany"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "2dcb5ead6c2f6a37b472409cd0d4ba02ff1ae6c7f74ac7acf0761bdd80920b98",
            "c2f4969f3d1908f56eafaa2c941e8dc26518b5ea4dec38071557a46e59e1a5e2"
        ],
        "data_list": [
            {
                "nl_query": "Which of the countries has the most car makers? List the country name.",
                "sql_query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
                "sql_query_result": {
                    "header": [
                        "CountryName"
                    ],
                    "cell": [
                        [
                            "japan"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the name of the country with the most car makers?",
                "sql_query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;",
                "sql_query_result": {
                    "header": [
                        "CountryName"
                    ],
                    "cell": [
                        [
                            "japan"
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many car makers are there in france?",
                "sql_query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            3
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the number of makers of care in France?",
                "sql_query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            3
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the countries having at least one car maker? List name and id.",
                "sql_query": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
                "sql_query_result": {
                    "header": [
                        "CountryName",
                        "CountryId"
                    ],
                    "cell": [
                        [
                            "usa",
                            1
                        ],
                        [
                            "germany",
                            2
                        ],
                        [
                            "france",
                            3
                        ],
                        [
                            "japan",
                            4
                        ],
                        [
                            "italy",
                            5
                        ],
                        [
                            "sweden",
                            6
                        ],
                        [
                            "uk",
                            7
                        ],
                        [
                            "korea",
                            8
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names and ids of all countries with at least one car maker?",
                "sql_query": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",
                "sql_query_result": {
                    "header": [
                        "CountryName",
                        "CountryId"
                    ],
                    "cell": [
                        [
                            "usa",
                            1
                        ],
                        [
                            "germany",
                            2
                        ],
                        [
                            "france",
                            3
                        ],
                        [
                            "japan",
                            4
                        ],
                        [
                            "italy",
                            5
                        ],
                        [
                            "sweden",
                            6
                        ],
                        [
                            "uk",
                            7
                        ],
                        [
                            "korea",
                            8
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the name of the countries where there is not a single car maker?",
                "sql_query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
                "sql_query_result": {
                    "header": [
                        "CountryName"
                    ],
                    "cell": [
                        [
                            "australia"
                        ],
                        [
                            "brazil"
                        ],
                        [
                            "egypt"
                        ],
                        [
                            "mexico"
                        ],
                        [
                            "new zealand"
                        ],
                        [
                            "nigeria"
                        ],
                        [
                            "russia"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names of the countries with no car makers?",
                "sql_query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;",
                "sql_query_result": {
                    "header": [
                        "CountryName"
                    ],
                    "cell": [
                        [
                            "australia"
                        ],
                        [
                            "brazil"
                        ],
                        [
                            "egypt"
                        ],
                        [
                            "mexico"
                        ],
                        [
                            "new zealand"
                        ],
                        [
                            "nigeria"
                        ],
                        [
                            "russia"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "2dcb5ead6c2f6a37b472409cd0d4ba02ff1ae6c7f74ac7acf0761bdd80920b98",
            "5081f9a68d47805bdabcf122fb6dd2554d40bc20f19a44ede6f0281a5dc5259b",
            "c2f4969f3d1908f56eafaa2c941e8dc26518b5ea4dec38071557a46e59e1a5e2"
        ],
        "data_list": [
            {
                "nl_query": "How many car models are produced in the usa?",
                "sql_query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            13
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the count of the car models produced in the United States?",
                "sql_query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            13
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
                "sql_query": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';",
                "sql_query_result": {
                    "header": [
                        "CountryId",
                        "CountryName"
                    ],
                    "cell": [
                        [
                            1,
                            "usa"
                        ],
                        [
                            2,
                            "germany"
                        ],
                        [
                            4,
                            "japan"
                        ],
                        [
                            5,
                            "italy"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "5081f9a68d47805bdabcf122fb6dd2554d40bc20f19a44ede6f0281a5dc5259b"
        ],
        "data_list": [
            {
                "nl_query": "What are all the makers and models?",
                "sql_query": "SELECT Maker ,  Model FROM MODEL_LIST;",
                "sql_query_result": {
                    "header": [
                        "Maker",
                        "Model"
                    ],
                    "cell": [
                        [
                            1,
                            "amc"
                        ],
                        [
                            2,
                            "audi"
                        ],
                        [
                            3,
                            "bmw"
                        ],
                        [
                            4,
                            "buick"
                        ],
                        [
                            4,
                            "cadillac"
                        ],
                        [
                            5,
                            "capri"
                        ],
                        [
                            4,
                            "chevrolet"
                        ],
                        [
                            6,
                            "chrysler"
                        ],
                        [
                            7,
                            "citroen"
                        ],
                        [
                            8,
                            "datsun"
                        ],
                        [
                            6,
                            "dodge"
                        ],
                        [
                            9,
                            "fiat"
                        ],
                        [
                            5,
                            "ford"
                        ],
                        [
                            10,
                            "hi"
                        ],
                        [
                            11,
                            "honda"
                        ],
                        [
                            12,
                            "mazda"
                        ],
                        [
                            13,
                            "mercedes"
                        ],
                        [
                            13,
                            "mercedes-benz"
                        ],
                        [
                            5,
                            "mercury"
                        ],
                        [
                            8,
                            "nissan"
                        ],
                        [
                            4,
                            "oldsmobile"
                        ],
                        [
                            14,
                            "opel"
                        ],
                        [
                            15,
                            "peugeot"
                        ],
                        [
                            6,
                            "plymouth"
                        ],
                        [
                            4,
                            "pontiac"
                        ],
                        [
                            16,
                            "renault"
                        ],
                        [
                            17,
                            "saab"
                        ],
                        [
                            18,
                            "subaru"
                        ],
                        [
                            19,
                            "toyota"
                        ],
                        [
                            20,
                            "triumph"
                        ],
                        [
                            2,
                            "volkswagen"
                        ],
                        [
                            21,
                            "volvo"
                        ],
                        [
                            22,
                            "kia"
                        ],
                        [
                            23,
                            "hyundai"
                        ],
                        [
                            6,
                            "jeep"
                        ],
                        [
                            19,
                            "scion"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the makers and models?",
                "sql_query": "SELECT Maker ,  Model FROM MODEL_LIST;",
                "sql_query_result": {
                    "header": [
                        "Maker",
                        "Model"
                    ],
                    "cell": [
                        [
                            1,
                            "amc"
                        ],
                        [
                            2,
                            "audi"
                        ],
                        [
                            3,
                            "bmw"
                        ],
                        [
                            4,
                            "buick"
                        ],
                        [
                            4,
                            "cadillac"
                        ],
                        [
                            5,
                            "capri"
                        ],
                        [
                            4,
                            "chevrolet"
                        ],
                        [
                            6,
                            "chrysler"
                        ],
                        [
                            7,
                            "citroen"
                        ],
                        [
                            8,
                            "datsun"
                        ],
                        [
                            6,
                            "dodge"
                        ],
                        [
                            9,
                            "fiat"
                        ],
                        [
                            5,
                            "ford"
                        ],
                        [
                            10,
                            "hi"
                        ],
                        [
                            11,
                            "honda"
                        ],
                        [
                            12,
                            "mazda"
                        ],
                        [
                            13,
                            "mercedes"
                        ],
                        [
                            13,
                            "mercedes-benz"
                        ],
                        [
                            5,
                            "mercury"
                        ],
                        [
                            8,
                            "nissan"
                        ],
                        [
                            4,
                            "oldsmobile"
                        ],
                        [
                            14,
                            "opel"
                        ],
                        [
                            15,
                            "peugeot"
                        ],
                        [
                            6,
                            "plymouth"
                        ],
                        [
                            4,
                            "pontiac"
                        ],
                        [
                            16,
                            "renault"
                        ],
                        [
                            17,
                            "saab"
                        ],
                        [
                            18,
                            "subaru"
                        ],
                        [
                            19,
                            "toyota"
                        ],
                        [
                            20,
                            "triumph"
                        ],
                        [
                            2,
                            "volkswagen"
                        ],
                        [
                            21,
                            "volvo"
                        ],
                        [
                            22,
                            "kia"
                        ],
                        [
                            23,
                            "hyundai"
                        ],
                        [
                            6,
                            "jeep"
                        ],
                        [
                            19,
                            "scion"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "9e5b9f3e5fce7dda0c49fd6d48cd0b778d56f4b6150afe5c673119273672bec3"
        ],
        "data_list": [
            {
                "nl_query": "Which country does Airline \"JetBlue Airways\" belong to?",
                "sql_query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
                "sql_query_result": {
                    "header": [
                        "Country"
                    ],
                    "cell": [
                        [
                            "USA"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What country is Jetblue Airways affiliated with?",
                "sql_query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
                "sql_query_result": {
                    "header": [
                        "Country"
                    ],
                    "cell": [
                        [
                            "USA"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the abbreviation of Airline \"JetBlue Airways\"?",
                "sql_query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
                "sql_query_result": {
                    "header": [
                        "Abbreviation"
                    ],
                    "cell": [
                        [
                            "JetBlue"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Which abbreviation corresponds to Jetblue Airways?",
                "sql_query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"",
                "sql_query_result": {
                    "header": [
                        "Abbreviation"
                    ],
                    "cell": [
                        [
                            "JetBlue"
                        ]
                    ]
                }
            },
            {
                "nl_query": "List all airline names and their abbreviations in \"USA\".",
                "sql_query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
                "sql_query_result": {
                    "header": [
                        "Airline",
                        "Abbreviation"
                    ],
                    "cell": [
                        [
                            "United Airlines",
                            "UAL"
                        ],
                        [
                            "US Airways",
                            "USAir"
                        ],
                        [
                            "Delta Airlines",
                            "Delta"
                        ],
                        [
                            "Southwest Airlines",
                            "Southwest"
                        ],
                        [
                            "American Airlines",
                            "American"
                        ],
                        [
                            "Northwest Airlines",
                            "Northwest"
                        ],
                        [
                            "Continental Airlines",
                            "Continental"
                        ],
                        [
                            "JetBlue Airways",
                            "JetBlue"
                        ],
                        [
                            "Frontier Airlines",
                            "Frontier"
                        ],
                        [
                            "AirTran Airways",
                            "AirTran"
                        ],
                        [
                            "Allegiant Air",
                            "Allegiant"
                        ],
                        [
                            "Virgin America",
                            "Virgin"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the airline names and abbreviations for airlines in the USA?",
                "sql_query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"",
                "sql_query_result": {
                    "header": [
                        "Airline",
                        "Abbreviation"
                    ],
                    "cell": [
                        [
                            "United Airlines",
                            "UAL"
                        ],
                        [
                            "US Airways",
                            "USAir"
                        ],
                        [
                            "Delta Airlines",
                            "Delta"
                        ],
                        [
                            "Southwest Airlines",
                            "Southwest"
                        ],
                        [
                            "American Airlines",
                            "American"
                        ],
                        [
                            "Northwest Airlines",
                            "Northwest"
                        ],
                        [
                            "Continental Airlines",
                            "Continental"
                        ],
                        [
                            "JetBlue Airways",
                            "JetBlue"
                        ],
                        [
                            "Frontier Airlines",
                            "Frontier"
                        ],
                        [
                            "AirTran Airways",
                            "AirTran"
                        ],
                        [
                            "Allegiant Air",
                            "Allegiant"
                        ],
                        [
                            "Virgin America",
                            "Virgin"
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many airlines do we have?",
                "sql_query": "SELECT count(*) FROM AIRLINES",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            12
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the total number of airlines?",
                "sql_query": "SELECT count(*) FROM AIRLINES",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            12
                        ]
                    ]
                }
            },
            {
                "nl_query": "Which airline has abbreviation 'UAL'?",
                "sql_query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
                "sql_query_result": {
                    "header": [
                        "Airline"
                    ],
                    "cell": [
                        [
                            "United Airlines"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Give the airline with abbreviation 'UAL'.",
                "sql_query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"",
                "sql_query_result": {
                    "header": [
                        "Airline"
                    ],
                    "cell": [
                        [
                            "United Airlines"
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many airlines are from USA?",
                "sql_query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            12
                        ]
                    ]
                }
            },
            {
                "nl_query": "Return the number of airlines in the USA.",
                "sql_query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            12
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "62d5d15136b3ff4385f02dadbb261f548d37cec13f9fde0d5d1fd814027704a9"
        ],
        "data_list": [
            {
                "nl_query": "How many airports do we have?",
                "sql_query": "SELECT count(*) FROM AIRPORTS",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            100
                        ]
                    ]
                }
            },
            {
                "nl_query": "Return the number of  airports.",
                "sql_query": "SELECT count(*) FROM AIRPORTS",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            100
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the airport name for airport 'AKO'?",
                "sql_query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
                "sql_query_result": {
                    "header": [
                        "AirportName"
                    ],
                    "cell": [
                        [
                            "Colorado Plains Regional Airport "
                        ]
                    ]
                }
            },
            {
                "nl_query": "Return the name of the airport with code 'AKO'.",
                "sql_query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"",
                "sql_query_result": {
                    "header": [
                        "AirportName"
                    ],
                    "cell": [
                        [
                            "Colorado Plains Regional Airport "
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "55483863075fcf285afe4148ebf3f9f97f510c5c0e7a95dc9ddf5f54cfeaedbc"
        ],
        "data_list": [
            {
                "nl_query": "How many employees are there?",
                "sql_query": "SELECT count(*) FROM employee",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            10
                        ]
                    ]
                }
            },
            {
                "nl_query": "Count the number of employees",
                "sql_query": "SELECT count(*) FROM employee",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            10
                        ]
                    ]
                }
            },
            {
                "nl_query": "Sort employee names by their age in ascending order.",
                "sql_query": "SELECT name FROM employee ORDER BY age",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "George Chuter"
                        ],
                        [
                            "Andrew Sheridan"
                        ],
                        [
                            "Lee Mears"
                        ],
                        [
                            "Tim Payne"
                        ],
                        [
                            "Matt Stevens"
                        ],
                        [
                            "Jason Hobson"
                        ],
                        [
                            "Steve Borthwick"
                        ],
                        [
                            "Louis Deacon"
                        ],
                        [
                            "Phil Vickery"
                        ],
                        [
                            "Mark Regan"
                        ]
                    ]
                }
            },
            {
                "nl_query": "List the names of employees and sort in ascending order of age.",
                "sql_query": "SELECT name FROM employee ORDER BY age",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "George Chuter"
                        ],
                        [
                            "Andrew Sheridan"
                        ],
                        [
                            "Lee Mears"
                        ],
                        [
                            "Tim Payne"
                        ],
                        [
                            "Matt Stevens"
                        ],
                        [
                            "Jason Hobson"
                        ],
                        [
                            "Steve Borthwick"
                        ],
                        [
                            "Louis Deacon"
                        ],
                        [
                            "Phil Vickery"
                        ],
                        [
                            "Mark Regan"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the number of employees from each city?",
                "sql_query": "SELECT count(*) ,  city FROM employee GROUP BY city",
                "sql_query_result": {
                    "header": [
                        "count(*)",
                        "City"
                    ],
                    "cell": [
                        [
                            3,
                            "Bath"
                        ],
                        [
                            3,
                            "Bristol"
                        ],
                        [
                            1,
                            "Leicester"
                        ],
                        [
                            1,
                            "Sale"
                        ],
                        [
                            2,
                            "Wasps"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Count the number of employees for each city.",
                "sql_query": "SELECT count(*) ,  city FROM employee GROUP BY city",
                "sql_query_result": {
                    "header": [
                        "count(*)",
                        "City"
                    ],
                    "cell": [
                        [
                            3,
                            "Bath"
                        ],
                        [
                            3,
                            "Bristol"
                        ],
                        [
                            1,
                            "Leicester"
                        ],
                        [
                            1,
                            "Sale"
                        ],
                        [
                            2,
                            "Wasps"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Which cities do more than one employee under age 30 come from?",
                "sql_query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
                "sql_query_result": {
                    "header": [
                        "City"
                    ],
                    "cell": [
                        [
                            "Bath"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the cities that have more than one employee under age 30.",
                "sql_query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1",
                "sql_query_result": {
                    "header": [
                        "City"
                    ],
                    "cell": [
                        [
                            "Bath"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "6c4c37e2315ed2ff52385df57731c5ab1a9fe9d895e241ab1cf37fd0640084b2"
        ],
        "data_list": [
            {
                "nl_query": "Find the number of shops in each location.",
                "sql_query": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
                "sql_query_result": {
                    "header": [
                        "count(*)",
                        "Location"
                    ],
                    "cell": [
                        [
                            1,
                            "Espoo"
                        ],
                        [
                            1,
                            "Helsinki"
                        ],
                        [
                            1,
                            "Jakobstad"
                        ],
                        [
                            1,
                            "Kotka"
                        ],
                        [
                            1,
                            "Kuopio"
                        ],
                        [
                            1,
                            "Lahti"
                        ],
                        [
                            1,
                            "Mariehamn"
                        ],
                        [
                            1,
                            "Turku"
                        ],
                        [
                            1,
                            "Valkeakoski"
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many shops are there in each location?",
                "sql_query": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",
                "sql_query_result": {
                    "header": [
                        "count(*)",
                        "Location"
                    ],
                    "cell": [
                        [
                            1,
                            "Espoo"
                        ],
                        [
                            1,
                            "Helsinki"
                        ],
                        [
                            1,
                            "Jakobstad"
                        ],
                        [
                            1,
                            "Kotka"
                        ],
                        [
                            1,
                            "Kuopio"
                        ],
                        [
                            1,
                            "Lahti"
                        ],
                        [
                            1,
                            "Mariehamn"
                        ],
                        [
                            1,
                            "Turku"
                        ],
                        [
                            1,
                            "Valkeakoski"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the manager name and district of the shop whose number of products is the largest.",
                "sql_query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Manager_name",
                        "District"
                    ],
                    "cell": [
                        [
                            "Ilkka M\u00c3\u00a4kel\u00c3\u00a4",
                            "Lahden Stadion"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the manager name and district of the shop that sells the largest number of products?",
                "sql_query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Manager_name",
                        "District"
                    ],
                    "cell": [
                        [
                            "Ilkka M\u00c3\u00a4kel\u00c3\u00a4",
                            "Lahden Stadion"
                        ]
                    ]
                }
            },
            {
                "nl_query": "find the minimum and maximum number of products of all stores.",
                "sql_query": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
                "sql_query_result": {
                    "header": [
                        "min(Number_products)",
                        "max(Number_products)"
                    ],
                    "cell": [
                        [
                            1600,
                            15000
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the minimum and maximum number of products across all the shops?",
                "sql_query": "SELECT min(Number_products) ,  max(Number_products) FROM shop",
                "sql_query_result": {
                    "header": [
                        "min(Number_products)",
                        "max(Number_products)"
                    ],
                    "cell": [
                        [
                            1600,
                            15000
                        ]
                    ]
                }
            },
            {
                "nl_query": "Return the name, location and district of all shops in descending order of number of products.",
                "sql_query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
                "sql_query_result": {
                    "header": [
                        "Name",
                        "Location",
                        "District"
                    ],
                    "cell": [
                        [
                            "FC Lahti",
                            "Lahti",
                            "Lahden Stadion"
                        ],
                        [
                            "HJK",
                            "Helsinki",
                            "Finnair Stadium"
                        ],
                        [
                            "FC Inter",
                            "Turku",
                            "Veritas Stadion"
                        ],
                        [
                            "FC Honka",
                            "Espoo",
                            "Tapiolan Urheilupuisto"
                        ],
                        [
                            "FF Jaro",
                            "Jakobstad",
                            "Jakobstads Centralplan"
                        ],
                        [
                            "FC KooTeePee",
                            "Kotka",
                            "Arto Tolsa Areena"
                        ],
                        [
                            "FC Haka",
                            "Valkeakoski",
                            "Tehtaan kentt\u00c3\u00a4"
                        ],
                        [
                            "KuPS",
                            "Kuopio",
                            "Magnum Areena"
                        ],
                        [
                            "IFK Mariehamn",
                            "Mariehamn",
                            "Wikl\u00c3\u00b6f Holding Arena"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
                "sql_query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC",
                "sql_query_result": {
                    "header": [
                        "Name",
                        "Location",
                        "District"
                    ],
                    "cell": [
                        [
                            "FC Lahti",
                            "Lahti",
                            "Lahden Stadion"
                        ],
                        [
                            "HJK",
                            "Helsinki",
                            "Finnair Stadium"
                        ],
                        [
                            "FC Inter",
                            "Turku",
                            "Veritas Stadion"
                        ],
                        [
                            "FC Honka",
                            "Espoo",
                            "Tapiolan Urheilupuisto"
                        ],
                        [
                            "FF Jaro",
                            "Jakobstad",
                            "Jakobstads Centralplan"
                        ],
                        [
                            "FC KooTeePee",
                            "Kotka",
                            "Arto Tolsa Areena"
                        ],
                        [
                            "FC Haka",
                            "Valkeakoski",
                            "Tehtaan kentt\u00c3\u00a4"
                        ],
                        [
                            "KuPS",
                            "Kuopio",
                            "Magnum Areena"
                        ],
                        [
                            "IFK Mariehamn",
                            "Mariehamn",
                            "Wikl\u00c3\u00b6f Holding Arena"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the names of stores whose number products is more than the average number of products.",
                "sql_query": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "HJK"
                        ],
                        [
                            "FC Inter"
                        ],
                        [
                            "FC Lahti"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Which shops' number products is above the average? Give me the shop names.",
                "sql_query": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "HJK"
                        ],
                        [
                            "FC Inter"
                        ],
                        [
                            "FC Lahti"
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many different store locations are there?",
                "sql_query": "SELECT count(DISTINCT LOCATION) FROM shop",
                "sql_query_result": {
                    "header": [
                        "count(DISTINCT LOCATION)"
                    ],
                    "cell": [
                        [
                            9
                        ]
                    ]
                }
            },
            {
                "nl_query": "Count the number of distinct store locations.",
                "sql_query": "SELECT count(DISTINCT LOCATION) FROM shop",
                "sql_query_result": {
                    "header": [
                        "count(DISTINCT LOCATION)"
                    ],
                    "cell": [
                        [
                            9
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "55483863075fcf285afe4148ebf3f9f97f510c5c0e7a95dc9ddf5f54cfeaedbc",
            "c470a09bb3bc9ebbc3882beac7d77caa0eda124e3dfd4fb9ff75c683d4e2d9f0"
        ],
        "data_list": [
            {
                "nl_query": "find the name of employee who was awarded the most times in the evaluation.",
                "sql_query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "George Chuter"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Which employee received the most awards in evaluations? Give me the employee name.",
                "sql_query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "George Chuter"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the name of the employee who got the highest one time bonus.",
                "sql_query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Louis Deacon"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Which employee received the biggest bonus? Give me the employee name.",
                "sql_query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Louis Deacon"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the names of employees who never won any award in the evaluation.",
                "sql_query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Mark Regan"
                        ],
                        [
                            "Tim Payne"
                        ],
                        [
                            "Andrew Sheridan"
                        ],
                        [
                            "Phil Vickery"
                        ],
                        [
                            "Steve Borthwick"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names of the employees who never received any evaluation?",
                "sql_query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Mark Regan"
                        ],
                        [
                            "Tim Payne"
                        ],
                        [
                            "Andrew Sheridan"
                        ],
                        [
                            "Phil Vickery"
                        ],
                        [
                            "Steve Borthwick"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "6c4c37e2315ed2ff52385df57731c5ab1a9fe9d895e241ab1cf37fd0640084b2",
            "99785885b5183b22cf0e11743f6b18a8637a587e7bf515b53f28d42ab6edf77e"
        ],
        "data_list": [
            {
                "nl_query": "What is the name of the shop that is hiring the largest number of employees?",
                "sql_query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "FC Haka"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Which shop has the most employees? Give me the shop name.",
                "sql_query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "FC Haka"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the name of the shops that do not hire any employee.",
                "sql_query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "FC Honka"
                        ],
                        [
                            "KuPS"
                        ],
                        [
                            "IFK Mariehamn"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Which shops run with no employees? Find the shop names",
                "sql_query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "FC Honka"
                        ],
                        [
                            "KuPS"
                        ],
                        [
                            "IFK Mariehamn"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the number of employees hired in each shop; show the shop name as well.",
                "sql_query": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
                "sql_query_result": {
                    "header": [
                        "count(*)",
                        "Name"
                    ],
                    "cell": [
                        [
                            2,
                            "FC Haka"
                        ],
                        [
                            1,
                            "FC Inter"
                        ],
                        [
                            1,
                            "FC KooTeePee"
                        ],
                        [
                            1,
                            "FC Lahti"
                        ],
                        [
                            1,
                            "FF Jaro"
                        ],
                        [
                            1,
                            "HJK"
                        ]
                    ]
                }
            },
            {
                "nl_query": "For each shop, return the number of employees working there and the name of the shop.",
                "sql_query": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",
                "sql_query_result": {
                    "header": [
                        "count(*)",
                        "Name"
                    ],
                    "cell": [
                        [
                            2,
                            "FC Haka"
                        ],
                        [
                            1,
                            "FC Inter"
                        ],
                        [
                            1,
                            "FC KooTeePee"
                        ],
                        [
                            1,
                            "FC Lahti"
                        ],
                        [
                            1,
                            "FF Jaro"
                        ],
                        [
                            1,
                            "HJK"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "c470a09bb3bc9ebbc3882beac7d77caa0eda124e3dfd4fb9ff75c683d4e2d9f0"
        ],
        "data_list": [
            {
                "nl_query": "What is total bonus given in all evaluations?",
                "sql_query": "SELECT sum(bonus) FROM evaluation",
                "sql_query_result": {
                    "header": [
                        "sum(bonus)"
                    ],
                    "cell": [
                        [
                            19500.0
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the total amount of bonus given in all the evaluations.",
                "sql_query": "SELECT sum(bonus) FROM evaluation",
                "sql_query_result": {
                    "header": [
                        "sum(bonus)"
                    ],
                    "cell": [
                        [
                            19500.0
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "99785885b5183b22cf0e11743f6b18a8637a587e7bf515b53f28d42ab6edf77e"
        ],
        "data_list": [
            {
                "nl_query": "Give me all the information about hiring.",
                "sql_query": "SELECT * FROM hiring",
                "sql_query_result": {
                    "header": [
                        "Shop_ID",
                        "Employee_ID",
                        "Start_from",
                        "Is_full_time"
                    ],
                    "cell": [
                        [
                            1,
                            1,
                            "2009",
                            "T"
                        ],
                        [
                            1,
                            2,
                            "2003",
                            "T"
                        ],
                        [
                            8,
                            3,
                            "2011",
                            "F"
                        ],
                        [
                            4,
                            4,
                            "2012",
                            "T"
                        ],
                        [
                            5,
                            5,
                            "2013",
                            "T"
                        ],
                        [
                            2,
                            6,
                            "2010",
                            "F"
                        ],
                        [
                            6,
                            7,
                            "2008",
                            "T"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is all the information about hiring?",
                "sql_query": "SELECT * FROM hiring",
                "sql_query_result": {
                    "header": [
                        "Shop_ID",
                        "Employee_ID",
                        "Start_from",
                        "Is_full_time"
                    ],
                    "cell": [
                        [
                            1,
                            1,
                            "2009",
                            "T"
                        ],
                        [
                            1,
                            2,
                            "2003",
                            "T"
                        ],
                        [
                            8,
                            3,
                            "2011",
                            "F"
                        ],
                        [
                            4,
                            4,
                            "2012",
                            "T"
                        ],
                        [
                            5,
                            5,
                            "2013",
                            "T"
                        ],
                        [
                            2,
                            6,
                            "2010",
                            "F"
                        ],
                        [
                            6,
                            7,
                            "2008",
                            "T"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "16f00c8e68fcedabe526823121d82e2073d833a6f45a7ac1c6eac390aef579bb"
        ],
        "data_list": [
            {
                "nl_query": "How many documents do we have?",
                "sql_query": "SELECT count(*) FROM Documents",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            15
                        ]
                    ]
                }
            },
            {
                "nl_query": "Count the number of documents.",
                "sql_query": "SELECT count(*) FROM Documents",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            15
                        ]
                    ]
                }
            },
            {
                "nl_query": "List document IDs, document names, and document descriptions for all documents.",
                "sql_query": "SELECT document_id ,  document_name ,  document_description FROM Documents",
                "sql_query_result": {
                    "header": [
                        "Document_ID",
                        "Document_Name",
                        "Document_Description"
                    ],
                    "cell": [
                        [
                            0,
                            "Introduction of OS",
                            "n"
                        ],
                        [
                            1,
                            "Understanding DB",
                            "y"
                        ],
                        [
                            3,
                            "Summer Show",
                            "u"
                        ],
                        [
                            76,
                            "Robbin CV",
                            "y"
                        ],
                        [
                            80,
                            "Welcome to NY",
                            "h"
                        ],
                        [
                            82,
                            "Data base",
                            "w"
                        ],
                        [
                            2394,
                            "Customer reviews",
                            "y"
                        ],
                        [
                            3830,
                            "Do not panic",
                            "k"
                        ],
                        [
                            33930,
                            "How Google people work",
                            "z"
                        ],
                        [
                            50123,
                            "Learning French",
                            "r"
                        ],
                        [
                            651512,
                            "How to write a CV",
                            "f"
                        ],
                        [
                            801801,
                            "How to read a book",
                            "w"
                        ],
                        [
                            3540024,
                            "Palm reading",
                            "y"
                        ],
                        [
                            16514113,
                            "A history of Arts",
                            "h"
                        ],
                        [
                            385906526,
                            "About Korea",
                            "b"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the ids, names, and descriptions for all documents?",
                "sql_query": "SELECT document_id ,  document_name ,  document_description FROM Documents",
                "sql_query_result": {
                    "header": [
                        "Document_ID",
                        "Document_Name",
                        "Document_Description"
                    ],
                    "cell": [
                        [
                            0,
                            "Introduction of OS",
                            "n"
                        ],
                        [
                            1,
                            "Understanding DB",
                            "y"
                        ],
                        [
                            3,
                            "Summer Show",
                            "u"
                        ],
                        [
                            76,
                            "Robbin CV",
                            "y"
                        ],
                        [
                            80,
                            "Welcome to NY",
                            "h"
                        ],
                        [
                            82,
                            "Data base",
                            "w"
                        ],
                        [
                            2394,
                            "Customer reviews",
                            "y"
                        ],
                        [
                            3830,
                            "Do not panic",
                            "k"
                        ],
                        [
                            33930,
                            "How Google people work",
                            "z"
                        ],
                        [
                            50123,
                            "Learning French",
                            "r"
                        ],
                        [
                            651512,
                            "How to write a CV",
                            "f"
                        ],
                        [
                            801801,
                            "How to read a book",
                            "w"
                        ],
                        [
                            3540024,
                            "Palm reading",
                            "y"
                        ],
                        [
                            16514113,
                            "A history of Arts",
                            "h"
                        ],
                        [
                            385906526,
                            "About Korea",
                            "b"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the document name and template id for document with description with the letter 'w' in it?",
                "sql_query": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
                "sql_query_result": {
                    "header": [
                        "Document_Name",
                        "Template_ID"
                    ],
                    "cell": [
                        [
                            "Data base",
                            11
                        ],
                        [
                            "How to read a book",
                            4
                        ]
                    ]
                }
            },
            {
                "nl_query": "Return the names and template ids for documents that contain the letter w in their description.",
                "sql_query": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"",
                "sql_query_result": {
                    "header": [
                        "Document_Name",
                        "Template_ID"
                    ],
                    "cell": [
                        [
                            "Data base",
                            11
                        ],
                        [
                            "How to read a book",
                            4
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the document id, template id and description for document named \"Robbin CV\"?",
                "sql_query": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
                "sql_query_result": {
                    "header": [
                        "Document_ID",
                        "Template_ID",
                        "Document_Description"
                    ],
                    "cell": [
                        [
                            76,
                            20,
                            "y"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Return the document id, template id, and description for the document with the name Robbin CV.",
                "sql_query": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"",
                "sql_query_result": {
                    "header": [
                        "Document_ID",
                        "Template_ID",
                        "Document_Description"
                    ],
                    "cell": [
                        [
                            76,
                            20,
                            "y"
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many different templates do all document use?",
                "sql_query": "SELECT count(DISTINCT template_id) FROM Documents",
                "sql_query_result": {
                    "header": [
                        "count(DISTINCT template_id)"
                    ],
                    "cell": [
                        [
                            12
                        ]
                    ]
                }
            },
            {
                "nl_query": "Count the number of different templates used for documents.",
                "sql_query": "SELECT count(DISTINCT template_id) FROM Documents",
                "sql_query_result": {
                    "header": [
                        "count(DISTINCT template_id)"
                    ],
                    "cell": [
                        [
                            12
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show all template ids and number of documents using each template.",
                "sql_query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
                "sql_query_result": {
                    "header": [
                        "Template_ID",
                        "count(*)"
                    ],
                    "cell": [
                        [
                            1,
                            1
                        ],
                        [
                            4,
                            1
                        ],
                        [
                            6,
                            1
                        ],
                        [
                            7,
                            1
                        ],
                        [
                            8,
                            1
                        ],
                        [
                            10,
                            1
                        ],
                        [
                            11,
                            2
                        ],
                        [
                            14,
                            2
                        ],
                        [
                            20,
                            1
                        ],
                        [
                            21,
                            1
                        ],
                        [
                            22,
                            1
                        ],
                        [
                            25,
                            2
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are all different template ids used for documents, and how many times were each of them used?",
                "sql_query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
                "sql_query_result": {
                    "header": [
                        "Template_ID",
                        "count(*)"
                    ],
                    "cell": [
                        [
                            1,
                            1
                        ],
                        [
                            4,
                            1
                        ],
                        [
                            6,
                            1
                        ],
                        [
                            7,
                            1
                        ],
                        [
                            8,
                            1
                        ],
                        [
                            10,
                            1
                        ],
                        [
                            11,
                            2
                        ],
                        [
                            14,
                            2
                        ],
                        [
                            20,
                            1
                        ],
                        [
                            21,
                            1
                        ],
                        [
                            22,
                            1
                        ],
                        [
                            25,
                            2
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show ids for all templates that are used by more than one document.",
                "sql_query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
                "sql_query_result": {
                    "header": [
                        "Template_ID"
                    ],
                    "cell": [
                        [
                            11
                        ],
                        [
                            14
                        ],
                        [
                            25
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the template ids of any templates used in more than a single document?",
                "sql_query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1",
                "sql_query_result": {
                    "header": [
                        "Template_ID"
                    ],
                    "cell": [
                        [
                            11
                        ],
                        [
                            14
                        ],
                        [
                            25
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "13c20bc1872151ef8f877c2a21fce6a08bbc8448334ce63cf2b3555840dccd6f",
            "16f00c8e68fcedabe526823121d82e2073d833a6f45a7ac1c6eac390aef579bb"
        ],
        "data_list": [
            {
                "nl_query": "How many documents are using the template with type code 'PPT'?",
                "sql_query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            3
                        ]
                    ]
                }
            },
            {
                "nl_query": "Count the number of documents that use the PPT template type.",
                "sql_query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            3
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the id and type code for the template used by the most documents?",
                "sql_query": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Template_ID",
                        "Template_Type_Code"
                    ],
                    "cell": [
                        [
                            11,
                            "BK"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Return the id and type code of the template that is used for the greatest number of documents.",
                "sql_query": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Template_ID",
                        "Template_Type_Code"
                    ],
                    "cell": [
                        [
                            11,
                            "BK"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show ids for all templates not used by any document.",
                "sql_query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
                "sql_query_result": {
                    "header": [
                        "Template_ID"
                    ],
                    "cell": [
                        [
                            0
                        ],
                        [
                            9
                        ],
                        [
                            15
                        ],
                        [
                            16
                        ],
                        [
                            18
                        ],
                        [
                            19
                        ],
                        [
                            23
                        ],
                        [
                            24
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the ids for templates that are not used in any documents?",
                "sql_query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents",
                "sql_query_result": {
                    "header": [
                        "Template_ID"
                    ],
                    "cell": [
                        [
                            0
                        ],
                        [
                            9
                        ],
                        [
                            15
                        ],
                        [
                            16
                        ],
                        [
                            18
                        ],
                        [
                            19
                        ],
                        [
                            23
                        ],
                        [
                            24
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the template type code of the template used by document with the name \"Data base\"?",
                "sql_query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
                "sql_query_result": {
                    "header": [
                        "Template_Type_Code"
                    ],
                    "cell": [
                        [
                            "BK"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Return the template type code of the template that is used by a document named Data base.",
                "sql_query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"",
                "sql_query_result": {
                    "header": [
                        "Template_Type_Code"
                    ],
                    "cell": [
                        [
                            "BK"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show all document names using templates with template type code BK.",
                "sql_query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
                "sql_query_result": {
                    "header": [
                        "Document_Name"
                    ],
                    "cell": [
                        [
                            "Robbin CV"
                        ],
                        [
                            "Data base"
                        ],
                        [
                            "How to read a book"
                        ],
                        [
                            "Palm reading"
                        ],
                        [
                            "About Korea"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names of documents that use templates with the code BK?",
                "sql_query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"",
                "sql_query_result": {
                    "header": [
                        "Document_Name"
                    ],
                    "cell": [
                        [
                            "Robbin CV"
                        ],
                        [
                            "Data base"
                        ],
                        [
                            "How to read a book"
                        ],
                        [
                            "Palm reading"
                        ],
                        [
                            "About Korea"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show all template type codes and the number of documents using each type.",
                "sql_query": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
                "sql_query_result": {
                    "header": [
                        "Template_Type_Code",
                        "count(*)"
                    ],
                    "cell": [
                        [
                            "AD",
                            3
                        ],
                        [
                            "BK",
                            5
                        ],
                        [
                            "PP",
                            4
                        ],
                        [
                            "PPT",
                            3
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the different template type codes, and how many documents use each type?",
                "sql_query": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",
                "sql_query_result": {
                    "header": [
                        "Template_Type_Code",
                        "count(*)"
                    ],
                    "cell": [
                        [
                            "AD",
                            3
                        ],
                        [
                            "BK",
                            5
                        ],
                        [
                            "PP",
                            4
                        ],
                        [
                            "PPT",
                            3
                        ]
                    ]
                }
            },
            {
                "nl_query": "Which template type code is used by most number of documents?",
                "sql_query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Template_Type_Code"
                    ],
                    "cell": [
                        [
                            "BK"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Return the code of the template type that is most commonly used in documents.",
                "sql_query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Template_Type_Code"
                    ],
                    "cell": [
                        [
                            "BK"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show all template type codes that are not used by any document.",
                "sql_query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
                "sql_query_result": {
                    "header": [
                        "Template_Type_Code"
                    ],
                    "cell": [
                        [
                            "CV"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the codes of template types that are not used for any document?",
                "sql_query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id",
                "sql_query_result": {
                    "header": [
                        "Template_Type_Code"
                    ],
                    "cell": [
                        [
                            "CV"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "13c20bc1872151ef8f877c2a21fce6a08bbc8448334ce63cf2b3555840dccd6f"
        ],
        "data_list": [
            {
                "nl_query": "How many templates do we have?",
                "sql_query": "SELECT count(*) FROM Templates",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            20
                        ]
                    ]
                }
            },
            {
                "nl_query": "Count the number of templates.",
                "sql_query": "SELECT count(*) FROM Templates",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            20
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show template ids, version numbers, and template type codes for all templates.",
                "sql_query": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
                "sql_query_result": {
                    "header": [
                        "Template_ID",
                        "Version_Number",
                        "Template_Type_Code"
                    ],
                    "cell": [
                        [
                            0,
                            5,
                            "PP"
                        ],
                        [
                            1,
                            9,
                            "PP"
                        ],
                        [
                            4,
                            4,
                            "BK"
                        ],
                        [
                            6,
                            2,
                            "PPT"
                        ],
                        [
                            7,
                            8,
                            "PPT"
                        ],
                        [
                            8,
                            3,
                            "BK"
                        ],
                        [
                            9,
                            2,
                            "BK"
                        ],
                        [
                            10,
                            1,
                            "PPT"
                        ],
                        [
                            11,
                            6,
                            "BK"
                        ],
                        [
                            14,
                            7,
                            "AD"
                        ],
                        [
                            15,
                            9,
                            "CV"
                        ],
                        [
                            16,
                            5,
                            "CV"
                        ],
                        [
                            18,
                            5,
                            "PP"
                        ],
                        [
                            19,
                            7,
                            "AD"
                        ],
                        [
                            20,
                            6,
                            "BK"
                        ],
                        [
                            21,
                            9,
                            "AD"
                        ],
                        [
                            22,
                            0,
                            "PP"
                        ],
                        [
                            23,
                            2,
                            "BK"
                        ],
                        [
                            24,
                            8,
                            "PP"
                        ],
                        [
                            25,
                            5,
                            "PP"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the ids, version numbers, and type codes for each template?",
                "sql_query": "SELECT template_id ,  version_number ,  template_type_code FROM Templates",
                "sql_query_result": {
                    "header": [
                        "Template_ID",
                        "Version_Number",
                        "Template_Type_Code"
                    ],
                    "cell": [
                        [
                            0,
                            5,
                            "PP"
                        ],
                        [
                            1,
                            9,
                            "PP"
                        ],
                        [
                            4,
                            4,
                            "BK"
                        ],
                        [
                            6,
                            2,
                            "PPT"
                        ],
                        [
                            7,
                            8,
                            "PPT"
                        ],
                        [
                            8,
                            3,
                            "BK"
                        ],
                        [
                            9,
                            2,
                            "BK"
                        ],
                        [
                            10,
                            1,
                            "PPT"
                        ],
                        [
                            11,
                            6,
                            "BK"
                        ],
                        [
                            14,
                            7,
                            "AD"
                        ],
                        [
                            15,
                            9,
                            "CV"
                        ],
                        [
                            16,
                            5,
                            "CV"
                        ],
                        [
                            18,
                            5,
                            "PP"
                        ],
                        [
                            19,
                            7,
                            "AD"
                        ],
                        [
                            20,
                            6,
                            "BK"
                        ],
                        [
                            21,
                            9,
                            "AD"
                        ],
                        [
                            22,
                            0,
                            "PP"
                        ],
                        [
                            23,
                            2,
                            "BK"
                        ],
                        [
                            24,
                            8,
                            "PP"
                        ],
                        [
                            25,
                            5,
                            "PP"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show all distinct template type codes for all templates.",
                "sql_query": "SELECT DISTINCT template_type_code FROM Templates",
                "sql_query_result": {
                    "header": [
                        "Template_Type_Code"
                    ],
                    "cell": [
                        [
                            "PP"
                        ],
                        [
                            "BK"
                        ],
                        [
                            "PPT"
                        ],
                        [
                            "AD"
                        ],
                        [
                            "CV"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the different template type codes?",
                "sql_query": "SELECT DISTINCT template_type_code FROM Templates",
                "sql_query_result": {
                    "header": [
                        "Template_Type_Code"
                    ],
                    "cell": [
                        [
                            "PP"
                        ],
                        [
                            "BK"
                        ],
                        [
                            "PPT"
                        ],
                        [
                            "AD"
                        ],
                        [
                            "CV"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the ids of templates with template type code PP or PPT?",
                "sql_query": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
                "sql_query_result": {
                    "header": [
                        "Template_ID"
                    ],
                    "cell": [
                        [
                            0
                        ],
                        [
                            1
                        ],
                        [
                            6
                        ],
                        [
                            7
                        ],
                        [
                            10
                        ],
                        [
                            18
                        ],
                        [
                            22
                        ],
                        [
                            24
                        ],
                        [
                            25
                        ]
                    ]
                }
            },
            {
                "nl_query": "Return the ids of templates that have the code PP or PPT.",
                "sql_query": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"",
                "sql_query_result": {
                    "header": [
                        "Template_ID"
                    ],
                    "cell": [
                        [
                            0
                        ],
                        [
                            1
                        ],
                        [
                            6
                        ],
                        [
                            7
                        ],
                        [
                            10
                        ],
                        [
                            18
                        ],
                        [
                            22
                        ],
                        [
                            24
                        ],
                        [
                            25
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many templates have template type code CV?",
                "sql_query": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            2
                        ]
                    ]
                }
            },
            {
                "nl_query": "Count the number of templates of the type CV.",
                "sql_query": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            2
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the version number and template type code for the template with version number later than 5?",
                "sql_query": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
                "sql_query_result": {
                    "header": [
                        "Version_Number",
                        "Template_Type_Code"
                    ],
                    "cell": [
                        [
                            9,
                            "PP"
                        ],
                        [
                            8,
                            "PPT"
                        ],
                        [
                            6,
                            "BK"
                        ],
                        [
                            7,
                            "AD"
                        ],
                        [
                            9,
                            "CV"
                        ],
                        [
                            9,
                            "AD"
                        ],
                        [
                            8,
                            "PP"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Return the version numbers and template type codes of templates with a version number greater than 5.",
                "sql_query": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",
                "sql_query_result": {
                    "header": [
                        "Version_Number",
                        "Template_Type_Code"
                    ],
                    "cell": [
                        [
                            9,
                            "PP"
                        ],
                        [
                            8,
                            "PPT"
                        ],
                        [
                            6,
                            "BK"
                        ],
                        [
                            7,
                            "AD"
                        ],
                        [
                            9,
                            "CV"
                        ],
                        [
                            9,
                            "AD"
                        ],
                        [
                            8,
                            "PP"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show all template type codes and number of templates for each.",
                "sql_query": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
                "sql_query_result": {
                    "header": [
                        "Template_Type_Code",
                        "count(*)"
                    ],
                    "cell": [
                        [
                            "AD",
                            3
                        ],
                        [
                            "BK",
                            6
                        ],
                        [
                            "CV",
                            2
                        ],
                        [
                            "PP",
                            6
                        ],
                        [
                            "PPT",
                            3
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the different template type codes, and how many templates correspond to each?",
                "sql_query": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",
                "sql_query_result": {
                    "header": [
                        "Template_Type_Code",
                        "count(*)"
                    ],
                    "cell": [
                        [
                            "AD",
                            3
                        ],
                        [
                            "BK",
                            6
                        ],
                        [
                            "CV",
                            2
                        ],
                        [
                            "PP",
                            6
                        ],
                        [
                            "PPT",
                            3
                        ]
                    ]
                }
            },
            {
                "nl_query": "Which template type code has most number of templates?",
                "sql_query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Template_Type_Code"
                    ],
                    "cell": [
                        [
                            "BK"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Return the type code of the template type that the most templates belong to.",
                "sql_query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Template_Type_Code"
                    ],
                    "cell": [
                        [
                            "BK"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show all template type codes with less than three templates.",
                "sql_query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
                "sql_query_result": {
                    "header": [
                        "Template_Type_Code"
                    ],
                    "cell": [
                        [
                            "CV"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the codes of template types that have fewer than 3 templates?",
                "sql_query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3",
                "sql_query_result": {
                    "header": [
                        "Template_Type_Code"
                    ],
                    "cell": [
                        [
                            "CV"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What the smallest version number and its template type code?",
                "sql_query": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
                "sql_query_result": {
                    "header": [
                        "min(Version_Number)",
                        "Template_Type_Code"
                    ],
                    "cell": [
                        [
                            0,
                            "PP"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Return the lowest version number, along with its corresponding template type code.",
                "sql_query": "SELECT min(Version_Number) ,  template_type_code FROM Templates",
                "sql_query_result": {
                    "header": [
                        "min(Version_Number)",
                        "Template_Type_Code"
                    ],
                    "cell": [
                        [
                            0,
                            "PP"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "239a9a04db7a7eee9a20fee0323ceebc3cd25f04e610950ec86129368bbfc6ec"
        ],
        "data_list": [
            {
                "nl_query": "Show all template type codes and descriptions.",
                "sql_query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
                "sql_query_result": {
                    "header": [
                        "Template_Type_Code",
                        "Template_Type_Description"
                    ],
                    "cell": [
                        [
                            "PPT",
                            "Presentation"
                        ],
                        [
                            "CV",
                            "CV"
                        ],
                        [
                            "AD",
                            "Advertisement"
                        ],
                        [
                            "PP",
                            "Paper"
                        ],
                        [
                            "BK",
                            "Book"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the type codes and descriptions for all template types?",
                "sql_query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types",
                "sql_query_result": {
                    "header": [
                        "Template_Type_Code",
                        "Template_Type_Description"
                    ],
                    "cell": [
                        [
                            "PPT",
                            "Presentation"
                        ],
                        [
                            "CV",
                            "CV"
                        ],
                        [
                            "AD",
                            "Advertisement"
                        ],
                        [
                            "PP",
                            "Paper"
                        ],
                        [
                            "BK",
                            "Book"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the template type descriptions for template type code \"AD\".",
                "sql_query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
                "sql_query_result": {
                    "header": [
                        "Template_Type_Description"
                    ],
                    "cell": [
                        [
                            "Advertisement"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Return the template type description of the template type with the code AD.",
                "sql_query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"",
                "sql_query_result": {
                    "header": [
                        "Template_Type_Description"
                    ],
                    "cell": [
                        [
                            "Advertisement"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the template type code for template type description \"Book\".",
                "sql_query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
                "sql_query_result": {
                    "header": [
                        "Template_Type_Code"
                    ],
                    "cell": [
                        [
                            "BK"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Return the type code of the template type with the description \"Book\".",
                "sql_query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"",
                "sql_query_result": {
                    "header": [
                        "Template_Type_Code"
                    ],
                    "cell": [
                        [
                            "BK"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "13c20bc1872151ef8f877c2a21fce6a08bbc8448334ce63cf2b3555840dccd6f",
            "16f00c8e68fcedabe526823121d82e2073d833a6f45a7ac1c6eac390aef579bb",
            "239a9a04db7a7eee9a20fee0323ceebc3cd25f04e610950ec86129368bbfc6ec"
        ],
        "data_list": [
            {
                "nl_query": "What are the distinct template type descriptions for the templates ever used by any document?",
                "sql_query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
                "sql_query_result": {
                    "header": [
                        "Template_Type_Description"
                    ],
                    "cell": [
                        [
                            "Presentation"
                        ],
                        [
                            "Paper"
                        ],
                        [
                            "Book"
                        ],
                        [
                            "Advertisement"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Return the different descriptions for templates that have been used in a document.",
                "sql_query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID",
                "sql_query_result": {
                    "header": [
                        "Template_Type_Description"
                    ],
                    "cell": [
                        [
                            "Presentation"
                        ],
                        [
                            "Paper"
                        ],
                        [
                            "Book"
                        ],
                        [
                            "Advertisement"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "13c20bc1872151ef8f877c2a21fce6a08bbc8448334ce63cf2b3555840dccd6f",
            "239a9a04db7a7eee9a20fee0323ceebc3cd25f04e610950ec86129368bbfc6ec"
        ],
        "data_list": [
            {
                "nl_query": "What are the template ids with template type description \"Presentation\".",
                "sql_query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
                "sql_query_result": {
                    "header": [
                        "Template_ID"
                    ],
                    "cell": [
                        [
                            6
                        ],
                        [
                            7
                        ],
                        [
                            10
                        ]
                    ]
                }
            },
            {
                "nl_query": "Return the ids corresponding to templates with the description 'Presentation'.",
                "sql_query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"",
                "sql_query_result": {
                    "header": [
                        "Template_ID"
                    ],
                    "cell": [
                        [
                            6
                        ],
                        [
                            7
                        ],
                        [
                            10
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "e4df661464619a63aef1cec2e86fdc8d83a5271abc7e999dfaa4c2b71053288b"
        ],
        "data_list": [
            {
                "nl_query": "How many paragraphs in total?",
                "sql_query": "SELECT count(*) FROM Paragraphs",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            15
                        ]
                    ]
                }
            },
            {
                "nl_query": "Count the number of paragraphs.",
                "sql_query": "SELECT count(*) FROM Paragraphs",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            15
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show all document ids and the number of paragraphs in each document. Order by document id.",
                "sql_query": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
                "sql_query_result": {
                    "header": [
                        "Document_ID",
                        "count(*)"
                    ],
                    "cell": [
                        [
                            3,
                            1
                        ],
                        [
                            80,
                            2
                        ],
                        [
                            2394,
                            3
                        ],
                        [
                            3830,
                            1
                        ],
                        [
                            33930,
                            1
                        ],
                        [
                            50123,
                            1
                        ],
                        [
                            651512,
                            2
                        ],
                        [
                            3540024,
                            1
                        ],
                        [
                            16514113,
                            2
                        ],
                        [
                            385906526,
                            1
                        ]
                    ]
                }
            },
            {
                "nl_query": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
                "sql_query": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",
                "sql_query_result": {
                    "header": [
                        "Document_ID",
                        "count(*)"
                    ],
                    "cell": [
                        [
                            3,
                            1
                        ],
                        [
                            80,
                            2
                        ],
                        [
                            2394,
                            3
                        ],
                        [
                            3830,
                            1
                        ],
                        [
                            33930,
                            1
                        ],
                        [
                            50123,
                            1
                        ],
                        [
                            651512,
                            2
                        ],
                        [
                            3540024,
                            1
                        ],
                        [
                            16514113,
                            2
                        ],
                        [
                            385906526,
                            1
                        ]
                    ]
                }
            },
            {
                "nl_query": "List all document ids with at least two paragraphs.",
                "sql_query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
                "sql_query_result": {
                    "header": [
                        "Document_ID"
                    ],
                    "cell": [
                        [
                            80
                        ],
                        [
                            2394
                        ],
                        [
                            651512
                        ],
                        [
                            16514113
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the ids of documents that have 2 or more paragraphs?",
                "sql_query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2",
                "sql_query_result": {
                    "header": [
                        "Document_ID"
                    ],
                    "cell": [
                        [
                            80
                        ],
                        [
                            2394
                        ],
                        [
                            651512
                        ],
                        [
                            16514113
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the document id with least number of paragraphs?",
                "sql_query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Document_ID"
                    ],
                    "cell": [
                        [
                            3
                        ]
                    ]
                }
            },
            {
                "nl_query": "Return the id of the document with the fewest paragraphs.",
                "sql_query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Document_ID"
                    ],
                    "cell": [
                        [
                            3
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the document id with 1 to 2 paragraphs?",
                "sql_query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
                "sql_query_result": {
                    "header": [
                        "Document_ID"
                    ],
                    "cell": [
                        [
                            3
                        ],
                        [
                            80
                        ],
                        [
                            3830
                        ],
                        [
                            33930
                        ],
                        [
                            50123
                        ],
                        [
                            651512
                        ],
                        [
                            3540024
                        ],
                        [
                            16514113
                        ],
                        [
                            385906526
                        ]
                    ]
                }
            },
            {
                "nl_query": "Give the ids of documents that have between one and two paragraphs.",
                "sql_query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2",
                "sql_query_result": {
                    "header": [
                        "Document_ID"
                    ],
                    "cell": [
                        [
                            3
                        ],
                        [
                            80
                        ],
                        [
                            3830
                        ],
                        [
                            33930
                        ],
                        [
                            50123
                        ],
                        [
                            651512
                        ],
                        [
                            3540024
                        ],
                        [
                            16514113
                        ],
                        [
                            385906526
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
                "sql_query": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
                "sql_query_result": {
                    "header": [
                        "Document_ID"
                    ],
                    "cell": [
                        [
                            16514113
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
                "sql_query": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'",
                "sql_query_result": {
                    "header": [
                        "Document_ID"
                    ],
                    "cell": [
                        [
                            16514113
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "16f00c8e68fcedabe526823121d82e2073d833a6f45a7ac1c6eac390aef579bb",
            "e4df661464619a63aef1cec2e86fdc8d83a5271abc7e999dfaa4c2b71053288b"
        ],
        "data_list": [
            {
                "nl_query": "How many paragraphs for the document with name 'Summer Show'?",
                "sql_query": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            1
                        ]
                    ]
                }
            },
            {
                "nl_query": "Count the number of paragraphs in the document named 'Summer Show'.",
                "sql_query": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            1
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
                "sql_query": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
                "sql_query_result": {
                    "header": [
                        "Paragraph_ID",
                        "Paragraph_Text"
                    ],
                    "cell": [
                        [
                            16615,
                            "Japan"
                        ],
                        [
                            608931827,
                            "Micronesia"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
                "sql_query": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",
                "sql_query_result": {
                    "header": [
                        "Paragraph_ID",
                        "Paragraph_Text"
                    ],
                    "cell": [
                        [
                            16615,
                            "Japan"
                        ],
                        [
                            608931827,
                            "Micronesia"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show all paragraph texts for the document \"Customer reviews\".",
                "sql_query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
                "sql_query_result": {
                    "header": [
                        "Paragraph_Text"
                    ],
                    "cell": [
                        [
                            "Korea"
                        ],
                        [
                            "Ukraine"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the paragraph texts for the document with the name 'Customer reviews'?",
                "sql_query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"",
                "sql_query_result": {
                    "header": [
                        "Paragraph_Text"
                    ],
                    "cell": [
                        [
                            "Korea"
                        ],
                        [
                            "Ukraine"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show all document ids, names and the number of paragraphs in each document.",
                "sql_query": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
                "sql_query_result": {
                    "header": [
                        "Document_ID",
                        "Document_Name",
                        "count(*)"
                    ],
                    "cell": [
                        [
                            3,
                            "Summer Show",
                            1
                        ],
                        [
                            80,
                            "Welcome to NY",
                            2
                        ],
                        [
                            2394,
                            "Customer reviews",
                            3
                        ],
                        [
                            3830,
                            "Do not panic",
                            1
                        ],
                        [
                            33930,
                            "How Google people work",
                            1
                        ],
                        [
                            50123,
                            "Learning French",
                            1
                        ],
                        [
                            651512,
                            "How to write a CV",
                            2
                        ],
                        [
                            3540024,
                            "Palm reading",
                            1
                        ],
                        [
                            16514113,
                            "A history of Arts",
                            2
                        ],
                        [
                            385906526,
                            "About Korea",
                            1
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the ids and names of each document, as well as the number of paragraphs in each?",
                "sql_query": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id",
                "sql_query_result": {
                    "header": [
                        "Document_ID",
                        "Document_Name",
                        "count(*)"
                    ],
                    "cell": [
                        [
                            3,
                            "Summer Show",
                            1
                        ],
                        [
                            80,
                            "Welcome to NY",
                            2
                        ],
                        [
                            2394,
                            "Customer reviews",
                            3
                        ],
                        [
                            3830,
                            "Do not panic",
                            1
                        ],
                        [
                            33930,
                            "How Google people work",
                            1
                        ],
                        [
                            50123,
                            "Learning French",
                            1
                        ],
                        [
                            651512,
                            "How to write a CV",
                            2
                        ],
                        [
                            3540024,
                            "Palm reading",
                            1
                        ],
                        [
                            16514113,
                            "A history of Arts",
                            2
                        ],
                        [
                            385906526,
                            "About Korea",
                            1
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the document id and name with greatest number of paragraphs?",
                "sql_query": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Document_ID",
                        "Document_Name"
                    ],
                    "cell": [
                        [
                            2394,
                            "Customer reviews"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Return the id and name of the document with the most paragraphs.",
                "sql_query": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Document_ID",
                        "Document_Name"
                    ],
                    "cell": [
                        [
                            2394,
                            "Customer reviews"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "98ed3de74afcfb612ac43a5de08942d36a2e7fcbb8488544b685e75a55ea3f23"
        ],
        "data_list": [
            {
                "nl_query": "How many teachers are there?",
                "sql_query": "SELECT count(*) FROM teacher",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            7
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the total count of teachers?",
                "sql_query": "SELECT count(*) FROM teacher",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            7
                        ]
                    ]
                }
            },
            {
                "nl_query": "List the names of teachers in ascending order of age.",
                "sql_query": "SELECT Name FROM teacher ORDER BY Age ASC",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Vicente Carretero"
                        ],
                        [
                            "Gustaaf Deloor"
                        ],
                        [
                            "Joseph Huts"
                        ],
                        [
                            "John Deloor"
                        ],
                        [
                            "Lucy Wong"
                        ],
                        [
                            "Anne Walker"
                        ],
                        [
                            "Kearsley Brown"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names of the teachers ordered by ascending age?",
                "sql_query": "SELECT Name FROM teacher ORDER BY Age ASC",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Vicente Carretero"
                        ],
                        [
                            "Gustaaf Deloor"
                        ],
                        [
                            "Joseph Huts"
                        ],
                        [
                            "John Deloor"
                        ],
                        [
                            "Lucy Wong"
                        ],
                        [
                            "Anne Walker"
                        ],
                        [
                            "Kearsley Brown"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the age and hometown of teachers?",
                "sql_query": "SELECT Age ,  Hometown FROM teacher",
                "sql_query_result": {
                    "header": [
                        "Age",
                        "Hometown"
                    ],
                    "cell": [
                        [
                            "32",
                            "Blackrod Urban District"
                        ],
                        [
                            "29",
                            "Bolton County Borough"
                        ],
                        [
                            "26",
                            "Farnworth Municipal Borough"
                        ],
                        [
                            "33",
                            "Horwich Urban District"
                        ],
                        [
                            "45",
                            "Kearsley Urban District"
                        ],
                        [
                            "41",
                            "Little Lever Urban District"
                        ],
                        [
                            "39",
                            "Turton Urban District"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the age and hometown of every teacher?",
                "sql_query": "SELECT Age ,  Hometown FROM teacher",
                "sql_query_result": {
                    "header": [
                        "Age",
                        "Hometown"
                    ],
                    "cell": [
                        [
                            "32",
                            "Blackrod Urban District"
                        ],
                        [
                            "29",
                            "Bolton County Borough"
                        ],
                        [
                            "26",
                            "Farnworth Municipal Borough"
                        ],
                        [
                            "33",
                            "Horwich Urban District"
                        ],
                        [
                            "45",
                            "Kearsley Urban District"
                        ],
                        [
                            "41",
                            "Little Lever Urban District"
                        ],
                        [
                            "39",
                            "Turton Urban District"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show the name of teachers aged either 32 or 33?",
                "sql_query": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Joseph Huts"
                        ],
                        [
                            "John Deloor"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names of the teachers who are aged either 32 or 33?",
                "sql_query": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Joseph Huts"
                        ],
                        [
                            "John Deloor"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the hometown of the youngest teacher?",
                "sql_query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Hometown"
                    ],
                    "cell": [
                        [
                            "Farnworth Municipal Borough"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Where is the youngest teacher from?",
                "sql_query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Hometown"
                    ],
                    "cell": [
                        [
                            "Farnworth Municipal Borough"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show different hometown of teachers and the number of teachers from each hometown.",
                "sql_query": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
                "sql_query_result": {
                    "header": [
                        "Hometown",
                        "COUNT(*)"
                    ],
                    "cell": [
                        [
                            "Blackrod Urban District",
                            1
                        ],
                        [
                            "Bolton County Borough",
                            1
                        ],
                        [
                            "Farnworth Municipal Borough",
                            1
                        ],
                        [
                            "Horwich Urban District",
                            1
                        ],
                        [
                            "Kearsley Urban District",
                            1
                        ],
                        [
                            "Little Lever Urban District",
                            1
                        ],
                        [
                            "Turton Urban District",
                            1
                        ]
                    ]
                }
            },
            {
                "nl_query": "For each hometown, how many teachers are there?",
                "sql_query": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",
                "sql_query_result": {
                    "header": [
                        "Hometown",
                        "COUNT(*)"
                    ],
                    "cell": [
                        [
                            "Blackrod Urban District",
                            1
                        ],
                        [
                            "Bolton County Borough",
                            1
                        ],
                        [
                            "Farnworth Municipal Borough",
                            1
                        ],
                        [
                            "Horwich Urban District",
                            1
                        ],
                        [
                            "Kearsley Urban District",
                            1
                        ],
                        [
                            "Little Lever Urban District",
                            1
                        ],
                        [
                            "Turton Urban District",
                            1
                        ]
                    ]
                }
            },
            {
                "nl_query": "List the most common hometown of teachers.",
                "sql_query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Hometown"
                    ],
                    "cell": [
                        [
                            "Blackrod Urban District"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the most commmon hometowns for teachers?",
                "sql_query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Hometown"
                    ],
                    "cell": [
                        [
                            "Blackrod Urban District"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "98ed3de74afcfb612ac43a5de08942d36a2e7fcbb8488544b685e75a55ea3f23",
            "b308ea1b675b83436de69c00ee5ae272601492b5cd470eeb753fc3dc77bdc4cb",
            "f4643f1197803356c5cb24a91f296d75b27c86623ace8d67dcff110039d850fd"
        ],
        "data_list": [
            {
                "nl_query": "Show names of teachers and the courses they are arranged to teach.",
                "sql_query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
                "sql_query_result": {
                    "header": [
                        "Name",
                        "Course"
                    ],
                    "cell": [
                        [
                            "Kearsley Brown",
                            "Math"
                        ],
                        [
                            "Vicente Carretero",
                            "Math"
                        ],
                        [
                            "Gustaaf Deloor",
                            "Science"
                        ],
                        [
                            "Anne Walker",
                            "History"
                        ],
                        [
                            "Anne Walker",
                            "Bible"
                        ],
                        [
                            "Lucy Wong",
                            "Music"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the name of each teacher and what course they teach?",
                "sql_query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",
                "sql_query_result": {
                    "header": [
                        "Name",
                        "Course"
                    ],
                    "cell": [
                        [
                            "Kearsley Brown",
                            "Math"
                        ],
                        [
                            "Vicente Carretero",
                            "Math"
                        ],
                        [
                            "Gustaaf Deloor",
                            "Science"
                        ],
                        [
                            "Anne Walker",
                            "History"
                        ],
                        [
                            "Anne Walker",
                            "Bible"
                        ],
                        [
                            "Lucy Wong",
                            "Music"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
                "sql_query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
                "sql_query_result": {
                    "header": [
                        "Name",
                        "Course"
                    ],
                    "cell": [
                        [
                            "Anne Walker",
                            "History"
                        ],
                        [
                            "Anne Walker",
                            "Bible"
                        ],
                        [
                            "Gustaaf Deloor",
                            "Science"
                        ],
                        [
                            "Kearsley Brown",
                            "Math"
                        ],
                        [
                            "Lucy Wong",
                            "Music"
                        ],
                        [
                            "Vicente Carretero",
                            "Math"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
                "sql_query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",
                "sql_query_result": {
                    "header": [
                        "Name",
                        "Course"
                    ],
                    "cell": [
                        [
                            "Anne Walker",
                            "History"
                        ],
                        [
                            "Anne Walker",
                            "Bible"
                        ],
                        [
                            "Gustaaf Deloor",
                            "Science"
                        ],
                        [
                            "Kearsley Brown",
                            "Math"
                        ],
                        [
                            "Lucy Wong",
                            "Music"
                        ],
                        [
                            "Vicente Carretero",
                            "Math"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show the name of the teacher for the math course.",
                "sql_query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Kearsley Brown"
                        ],
                        [
                            "Vicente Carretero"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names of the people who teach math courses?",
                "sql_query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Kearsley Brown"
                        ],
                        [
                            "Vicente Carretero"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "98ed3de74afcfb612ac43a5de08942d36a2e7fcbb8488544b685e75a55ea3f23",
            "b308ea1b675b83436de69c00ee5ae272601492b5cd470eeb753fc3dc77bdc4cb"
        ],
        "data_list": [
            {
                "nl_query": "Show names of teachers and the number of courses they teach.",
                "sql_query": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
                "sql_query_result": {
                    "header": [
                        "Name",
                        "COUNT(*)"
                    ],
                    "cell": [
                        [
                            "Anne Walker",
                            2
                        ],
                        [
                            "Gustaaf Deloor",
                            1
                        ],
                        [
                            "Kearsley Brown",
                            1
                        ],
                        [
                            "Lucy Wong",
                            1
                        ],
                        [
                            "Vicente Carretero",
                            1
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names of the teachers and how many courses do they teach?",
                "sql_query": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",
                "sql_query_result": {
                    "header": [
                        "Name",
                        "COUNT(*)"
                    ],
                    "cell": [
                        [
                            "Anne Walker",
                            2
                        ],
                        [
                            "Gustaaf Deloor",
                            1
                        ],
                        [
                            "Kearsley Brown",
                            1
                        ],
                        [
                            "Lucy Wong",
                            1
                        ],
                        [
                            "Vicente Carretero",
                            1
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show names of teachers that teach at least two courses.",
                "sql_query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Anne Walker"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names of the teachers who teach at least two courses?",
                "sql_query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Anne Walker"
                        ]
                    ]
                }
            },
            {
                "nl_query": "List the names of teachers who have not been arranged to teach courses.",
                "sql_query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Joseph Huts"
                        ],
                        [
                            "John Deloor"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names of the teachers whose courses have not been arranged?",
                "sql_query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Joseph Huts"
                        ],
                        [
                            "John Deloor"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "4de91f8a1955354e80bf967dcfd1ac3d8e1a5232e1a527c4325e837451cf5682"
        ],
        "data_list": [
            {
                "nl_query": "How many visitors below age 30 are there?",
                "sql_query": "SELECT count(*) FROM visitor WHERE age  <  30",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            3
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
                "sql_query": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Gonzalo Higua\u00c3\u00adn "
                        ],
                        [
                            "Fernando Gago"
                        ],
                        [
                            "Guti Midfielder"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the average age of the visitors whose membership level is not higher than 4?",
                "sql_query": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4",
                "sql_query_result": {
                    "header": [
                        "avg(age)"
                    ],
                    "cell": [
                        [
                            36.0
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
                "sql_query": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC",
                "sql_query_result": {
                    "header": [
                        "Name",
                        "Level_of_membership"
                    ],
                    "cell": [
                        [
                            "Fernando Gago",
                            6
                        ],
                        [
                            "Gonzalo Higua\u00c3\u00adn ",
                            8
                        ],
                        [
                            "Guti Midfielder",
                            5
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "0c0b6da701b919cdad6a2a32a22544eedac30aed5cd4bbb4812386acefee2094"
        ],
        "data_list": [
            {
                "nl_query": "Find the id and name of the museum that has the most staff members?",
                "sql_query": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Museum_ID",
                        "Name"
                    ],
                    "cell": [
                        [
                            1,
                            "Plaza Museum"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the average number of staff working for the museums that were open before 2009.",
                "sql_query": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009",
                "sql_query_result": {
                    "header": [
                        "avg(num_of_staff)"
                    ],
                    "cell": [
                        [
                            31.3333333333
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the opening year and staff number of the museum named Plaza Museum?",
                "sql_query": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",
                "sql_query_result": {
                    "header": [
                        "Num_of_Staff",
                        "Open_Year"
                    ],
                    "cell": [
                        [
                            62,
                            "2000"
                        ]
                    ]
                }
            },
            {
                "nl_query": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
                "sql_query": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Plaza Museum"
                        ],
                        [
                            "Capital Plaza Museum"
                        ],
                        [
                            "Jefferson Development Museum"
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many museums were opened after 2013 or before 2008?",
                "sql_query": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            1
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "4de91f8a1955354e80bf967dcfd1ac3d8e1a5232e1a527c4325e837451cf5682",
            "9897dfa465bb4ecaa9bc9bca41a69d6fedd094dd7a758484c1d2e8a4028a10fe"
        ],
        "data_list": [
            {
                "nl_query": "find the id, name and age for visitors who visited some museums more than once.",
                "sql_query": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1",
                "sql_query_result": {
                    "header": [
                        "ID",
                        "Name",
                        "Age"
                    ],
                    "cell": [
                        [
                            3,
                            "Arjen Robben",
                            27
                        ],
                        [
                            5,
                            "Fernando Gago",
                            36
                        ],
                        [
                            6,
                            "Rafael van der Vaart",
                            25
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
                "sql_query": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "visitor_ID",
                        "Name",
                        "Level_of_membership"
                    ],
                    "cell": [
                        [
                            "3",
                            "Arjen Robben",
                            1
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the name and age of the visitor who bought the most tickets at once.",
                "sql_query": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Name",
                        "Age"
                    ],
                    "cell": [
                        [
                            "Arjen Robben",
                            27
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the total ticket expense of the visitors whose membership level is 1?",
                "sql_query": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1",
                "sql_query_result": {
                    "header": [
                        "sum(t2.Total_spent)"
                    ],
                    "cell": [
                        [
                            570.84
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "0c0b6da701b919cdad6a2a32a22544eedac30aed5cd4bbb4812386acefee2094",
            "9897dfa465bb4ecaa9bc9bca41a69d6fedd094dd7a758484c1d2e8a4028a10fe"
        ],
        "data_list": [
            {
                "nl_query": "What are the id and name of the museum visited most times?",
                "sql_query": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Museum_ID",
                        "Name"
                    ],
                    "cell": [
                        [
                            2,
                            "Capital Plaza Museum"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the name of the museum that had no visitor yet?",
                "sql_query": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Jefferson Development Museum"
                        ],
                        [
                            "RiverPark Museum"
                        ],
                        [
                            "Place Tower Museum"
                        ],
                        [
                            "Central City District Residential Museum"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "9897dfa465bb4ecaa9bc9bca41a69d6fedd094dd7a758484c1d2e8a4028a10fe"
        ],
        "data_list": [
            {
                "nl_query": "What are the average and maximum number of tickets bought in all visits?",
                "sql_query": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit",
                "sql_query_result": {
                    "header": [
                        "avg(num_of_ticket)",
                        "max(num_of_ticket)"
                    ],
                    "cell": [
                        [
                            10.5,
                            24
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "0c0b6da701b919cdad6a2a32a22544eedac30aed5cd4bbb4812386acefee2094",
            "4de91f8a1955354e80bf967dcfd1ac3d8e1a5232e1a527c4325e837451cf5682",
            "9897dfa465bb4ecaa9bc9bca41a69d6fedd094dd7a758484c1d2e8a4028a10fe"
        ],
        "data_list": [
            {
                "nl_query": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
                "sql_query": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Fernando Gago"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the number of visitors who did not visit any museum opened after 2010.",
                "sql_query": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            3
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "b9cc1c8b7dfef23bc08fa855de911d66dae3a28b554077e47a688321852cbcab"
        ],
        "data_list": [
            {
                "nl_query": "How many ships ended up being 'Captured'?",
                "sql_query": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            4
                        ]
                    ]
                }
            },
            {
                "nl_query": "List the name and tonnage ordered by in descending alphaetical order for the names.",
                "sql_query": "SELECT name ,  tonnage FROM ship ORDER BY name DESC",
                "sql_query_result": {
                    "header": [
                        "name",
                        "tonnage"
                    ],
                    "cell": [
                        [
                            "Three Brothers",
                            "t"
                        ],
                        [
                            "Mary",
                            "t"
                        ],
                        [
                            "Lettice",
                            "t"
                        ],
                        [
                            "HMS Avon",
                            "391"
                        ],
                        [
                            "HMS Atalanta",
                            "225"
                        ],
                        [
                            "Bon Accord",
                            "t"
                        ],
                        [
                            "Bacchus",
                            "t"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "8f67388ad6aeca831b81d99d83087eb6048de4a3a72fcdd4ed2e6dc3fd6939b0"
        ],
        "data_list": [
            {
                "nl_query": "List the name, date and result of each battle.",
                "sql_query": "SELECT name ,  date FROM battle",
                "sql_query_result": {
                    "header": [
                        "name",
                        "date"
                    ],
                    "cell": [
                        [
                            "Battle of Adrianople",
                            "14 April 1205"
                        ],
                        [
                            "Battle of Serres",
                            "June 1205"
                        ],
                        [
                            "Battle of Rusion",
                            "31 January 1206"
                        ],
                        [
                            "Battle of Rodosto",
                            "February 1206"
                        ],
                        [
                            "Battle of Messinopolis",
                            "4 September 1207"
                        ],
                        [
                            "Battle of Boruy",
                            "June 1205"
                        ],
                        [
                            "Battle of Philippopolis",
                            "31 June 1208"
                        ],
                        [
                            "Siege of Constantinople",
                            "1235"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
                "sql_query": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'",
                "sql_query_result": {
                    "header": [
                        "name",
                        "result"
                    ],
                    "cell": [
                        [
                            "Battle of Adrianople",
                            "Bulgarian victory"
                        ],
                        [
                            "Battle of Serres",
                            "Bulgarian victory"
                        ],
                        [
                            "Battle of Rusion",
                            "Bulgarian victory"
                        ],
                        [
                            "Battle of Rodosto",
                            "Bulgarian victory"
                        ],
                        [
                            "Battle of Messinopolis",
                            "Bulgarian victory"
                        ],
                        [
                            "Siege of Constantinople",
                            "Two Year Truce"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
                "sql_query": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'",
                "sql_query_result": {
                    "header": [
                        "name"
                    ],
                    "cell": [
                        [
                            "Battle of Adrianople"
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many different results are there for the battles?",
                "sql_query": "SELECT count(DISTINCT RESULT) FROM battle",
                "sql_query_result": {
                    "header": [
                        "count(DISTINCT RESULT)"
                    ],
                    "cell": [
                        [
                            3
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "b90b3463e94c96c1ae7a73041f43bf5aacc4e75c90dd543e965bcb107efad334"
        ],
        "data_list": [
            {
                "nl_query": "What is maximum and minimum death toll caused each time?",
                "sql_query": "SELECT max(killed) ,  min(killed) FROM death",
                "sql_query_result": {
                    "header": [
                        "max(killed)",
                        "min(killed)"
                    ],
                    "cell": [
                        [
                            29,
                            0
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the average number of injuries caused each time?",
                "sql_query": "SELECT avg(injured) FROM death",
                "sql_query_result": {
                    "header": [
                        "avg(injured)"
                    ],
                    "cell": [
                        [
                            1.0769230769
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the notes of the death events which has substring 'East'?",
                "sql_query": "SELECT note FROM death WHERE note LIKE '%East%'",
                "sql_query_result": {
                    "header": [
                        "note"
                    ],
                    "cell": [
                        [
                            "East Champaran, Bihar"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "b90b3463e94c96c1ae7a73041f43bf5aacc4e75c90dd543e965bcb107efad334",
            "b9cc1c8b7dfef23bc08fa855de911d66dae3a28b554077e47a688321852cbcab"
        ],
        "data_list": [
            {
                "nl_query": "What are the death and injury situations caused by the ship with tonnage 't'?",
                "sql_query": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'",
                "sql_query_result": {
                    "header": [
                        "killed",
                        "injured"
                    ],
                    "cell": [
                        [
                            8,
                            0
                        ],
                        [
                            3,
                            0
                        ],
                        [
                            25,
                            0
                        ],
                        [
                            2,
                            0
                        ],
                        [
                            0,
                            0
                        ],
                        [
                            4,
                            5
                        ],
                        [
                            29,
                            0
                        ],
                        [
                            14,
                            0
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the ship id and name that caused most total injuries?",
                "sql_query": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "id",
                        "name"
                    ],
                    "cell": [
                        [
                            3,
                            "Mary"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "8f67388ad6aeca831b81d99d83087eb6048de4a3a72fcdd4ed2e6dc3fd6939b0",
            "b9cc1c8b7dfef23bc08fa855de911d66dae3a28b554077e47a688321852cbcab"
        ],
        "data_list": [
            {
                "nl_query": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
                "sql_query": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'",
                "sql_query_result": {
                    "header": [
                        "id",
                        "name"
                    ],
                    "cell": [
                        [
                            8,
                            "Siege of Constantinople"
                        ],
                        [
                            7,
                            "Battle of Philippopolis"
                        ],
                        [
                            6,
                            "Battle of Boruy"
                        ],
                        [
                            5,
                            "Battle of Messinopolis"
                        ],
                        [
                            4,
                            "Battle of Rodosto"
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many battles did not lose any ship with tonnage '225'?",
                "sql_query": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            7
                        ]
                    ]
                }
            },
            {
                "nl_query": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
                "sql_query": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'",
                "sql_query_result": {
                    "header": [
                        "name",
                        "date"
                    ],
                    "cell": [
                        [
                            "Siege of Constantinople",
                            "1235"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
                "sql_query": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'",
                "sql_query_result": {
                    "header": [
                        "name",
                        "result",
                        "bulgarian_commander"
                    ],
                    "cell": [
                        [
                            "Battle of Adrianople",
                            "Bulgarian victory",
                            "Kaloyan"
                        ],
                        [
                            "Battle of Rusion",
                            "Bulgarian victory",
                            "Kaloyan"
                        ],
                        [
                            "Battle of Serres",
                            "Bulgarian victory",
                            "Kaloyan"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "8f67388ad6aeca831b81d99d83087eb6048de4a3a72fcdd4ed2e6dc3fd6939b0",
            "b90b3463e94c96c1ae7a73041f43bf5aacc4e75c90dd543e965bcb107efad334",
            "b9cc1c8b7dfef23bc08fa855de911d66dae3a28b554077e47a688321852cbcab"
        ],
        "data_list": [
            {
                "nl_query": "What are the ids and names of the battles that led to more than 10 people killed in total.",
                "sql_query": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10",
                "sql_query_result": {
                    "header": [
                        "id",
                        "name"
                    ],
                    "cell": [
                        [
                            5,
                            "Battle of Messinopolis"
                        ],
                        [
                            6,
                            "Battle of Boruy"
                        ],
                        [
                            8,
                            "Siege of Constantinople"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "46d5d453a323a56c49e54cbfac91cf2e4944f62558c665ec5679aba28b99b75c"
        ],
        "data_list": [
            {
                "nl_query": "what are all the addresses including line 1 and line 2?",
                "sql_query": "SELECT line_1 ,  line_2 FROM addresses",
                "sql_query_result": {
                    "header": [
                        "line_1",
                        "line_2"
                    ],
                    "cell": [
                        [
                            "2294 Grant Square Apt. 235",
                            "Apt. 370"
                        ],
                        [
                            "3999 Aufderhar Ways Suite 593",
                            "Apt. 388"
                        ],
                        [
                            "67942 Carlotta Ferry Apt. 686",
                            "Apt. 583"
                        ],
                        [
                            "0144 Lamar Plaza Apt. 346",
                            "Suite 703"
                        ],
                        [
                            "858 Peggie Bypass Suite 212",
                            "Apt. 335"
                        ],
                        [
                            "16998 Mraz Lodge",
                            "Apt. 689"
                        ],
                        [
                            "193 Marlin Brook",
                            "Apt. 406"
                        ],
                        [
                            "202 Hessel Views Apt. 468",
                            "Apt. 305"
                        ],
                        [
                            "0643 Muller Vista",
                            "Suite 383"
                        ],
                        [
                            "7081 Eda Center",
                            "Suite 830"
                        ],
                        [
                            "9283 Schulist Falls Apt. 037",
                            "Suite 239"
                        ],
                        [
                            "979 Haag Shores Suite 656",
                            "Apt. 468"
                        ],
                        [
                            "492 Wilkinson Route",
                            "Suite 865"
                        ],
                        [
                            "186 Evan Motorway Apt. 409",
                            "Suite 079"
                        ],
                        [
                            "74046 Metz Walk Apt. 113",
                            "Suite 674"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the first and second line for all addresses?",
                "sql_query": "SELECT line_1 ,  line_2 FROM addresses",
                "sql_query_result": {
                    "header": [
                        "line_1",
                        "line_2"
                    ],
                    "cell": [
                        [
                            "2294 Grant Square Apt. 235",
                            "Apt. 370"
                        ],
                        [
                            "3999 Aufderhar Ways Suite 593",
                            "Apt. 388"
                        ],
                        [
                            "67942 Carlotta Ferry Apt. 686",
                            "Apt. 583"
                        ],
                        [
                            "0144 Lamar Plaza Apt. 346",
                            "Suite 703"
                        ],
                        [
                            "858 Peggie Bypass Suite 212",
                            "Apt. 335"
                        ],
                        [
                            "16998 Mraz Lodge",
                            "Apt. 689"
                        ],
                        [
                            "193 Marlin Brook",
                            "Apt. 406"
                        ],
                        [
                            "202 Hessel Views Apt. 468",
                            "Apt. 305"
                        ],
                        [
                            "0643 Muller Vista",
                            "Suite 383"
                        ],
                        [
                            "7081 Eda Center",
                            "Suite 830"
                        ],
                        [
                            "9283 Schulist Falls Apt. 037",
                            "Suite 239"
                        ],
                        [
                            "979 Haag Shores Suite 656",
                            "Apt. 468"
                        ],
                        [
                            "492 Wilkinson Route",
                            "Suite 865"
                        ],
                        [
                            "186 Evan Motorway Apt. 409",
                            "Suite 079"
                        ],
                        [
                            "74046 Metz Walk Apt. 113",
                            "Suite 674"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the zip code of the address in the city Port Chelsea?",
                "sql_query": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
                "sql_query_result": {
                    "header": [
                        "zip_postcode"
                    ],
                    "cell": [
                        [
                            "148"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the zip code for Port Chelsea?",
                "sql_query": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'",
                "sql_query_result": {
                    "header": [
                        "zip_postcode"
                    ],
                    "cell": [
                        [
                            "148"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "9fe526482711f234dbb0998d2573bdae71f0e1e5291ff7762e2af3260699745b"
        ],
        "data_list": [
            {
                "nl_query": "How many courses in total are listed?",
                "sql_query": "SELECT count(*) FROM Courses",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            15
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many courses are there?",
                "sql_query": "SELECT count(*) FROM Courses",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            15
                        ]
                    ]
                }
            },
            {
                "nl_query": "How is the math course described?",
                "sql_query": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
                "sql_query_result": {
                    "header": [
                        "course_description"
                    ],
                    "cell": [
                        [
                            "q"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the descriptions for all the math courses?",
                "sql_query": "SELECT course_description FROM Courses WHERE course_name  =  'math'",
                "sql_query_result": {
                    "header": [
                        "course_description"
                    ],
                    "cell": [
                        [
                            "q"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "32242ecaa729b09c13f27c5fcbab1f1f7843b4522a7f73b8f6f0965283e79097",
            "f7c6311219d0f0dd0d0ef8c0cb4b5c6b08f5c89056ddd28fa6f60bb73cacce80"
        ],
        "data_list": [
            {
                "nl_query": "Which department offers the most number of degrees? List department name and id.",
                "sql_query": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "department_name",
                        "department_id"
                    ],
                    "cell": [
                        [
                            "statistics",
                            8
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many degrees does the engineering department offer?",
                "sql_query": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            0
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many degrees does the engineering department have?",
                "sql_query": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            0
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "f7c6311219d0f0dd0d0ef8c0cb4b5c6b08f5c89056ddd28fa6f60bb73cacce80"
        ],
        "data_list": [
            {
                "nl_query": "How many departments offer any degree?",
                "sql_query": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
                "sql_query_result": {
                    "header": [
                        "count(DISTINCT department_id)"
                    ],
                    "cell": [
                        [
                            10
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many different departments offer degrees?",
                "sql_query": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
                "sql_query_result": {
                    "header": [
                        "count(DISTINCT department_id)"
                    ],
                    "cell": [
                        [
                            10
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many different degree names are offered?",
                "sql_query": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
                "sql_query_result": {
                    "header": [
                        "count(DISTINCT degree_summary_name)"
                    ],
                    "cell": [
                        [
                            3
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many different degrees are offered?",
                "sql_query": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs",
                "sql_query_result": {
                    "header": [
                        "count(DISTINCT degree_summary_name)"
                    ],
                    "cell": [
                        [
                            3
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "0855121962d1a16090b215c3a76a08219f1659c4839505ae4ecbb5d74bcb9fc0"
        ],
        "data_list": [
            {
                "nl_query": "What are the names and descriptions of all the sections?",
                "sql_query": "SELECT section_name ,  section_description FROM Sections",
                "sql_query_result": {
                    "header": [
                        "section_name",
                        "section_description"
                    ],
                    "cell": [
                        [
                            "a",
                            "non"
                        ],
                        [
                            "b",
                            "voluptatem"
                        ],
                        [
                            "c",
                            "qui"
                        ],
                        [
                            "d",
                            "voluptas"
                        ],
                        [
                            "e",
                            "ex"
                        ],
                        [
                            "f",
                            "doloremque"
                        ],
                        [
                            "g",
                            "provident"
                        ],
                        [
                            "h",
                            "et"
                        ],
                        [
                            "j",
                            "quis"
                        ],
                        [
                            "k",
                            "nesciunt"
                        ],
                        [
                            "l",
                            "ad"
                        ],
                        [
                            "o",
                            "et"
                        ],
                        [
                            "p",
                            "facilis"
                        ],
                        [
                            "u",
                            "reprehenderit"
                        ],
                        [
                            "y",
                            "qui"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names and descriptions for all the sections?",
                "sql_query": "SELECT section_name ,  section_description FROM Sections",
                "sql_query_result": {
                    "header": [
                        "section_name",
                        "section_description"
                    ],
                    "cell": [
                        [
                            "a",
                            "non"
                        ],
                        [
                            "b",
                            "voluptatem"
                        ],
                        [
                            "c",
                            "qui"
                        ],
                        [
                            "d",
                            "voluptas"
                        ],
                        [
                            "e",
                            "ex"
                        ],
                        [
                            "f",
                            "doloremque"
                        ],
                        [
                            "g",
                            "provident"
                        ],
                        [
                            "h",
                            "et"
                        ],
                        [
                            "j",
                            "quis"
                        ],
                        [
                            "k",
                            "nesciunt"
                        ],
                        [
                            "l",
                            "ad"
                        ],
                        [
                            "o",
                            "et"
                        ],
                        [
                            "p",
                            "facilis"
                        ],
                        [
                            "u",
                            "reprehenderit"
                        ],
                        [
                            "y",
                            "qui"
                        ]
                    ]
                }
            },
            {
                "nl_query": "List the section_name in reversed lexicographical order.",
                "sql_query": "SELECT section_name FROM Sections ORDER BY section_name DESC",
                "sql_query_result": {
                    "header": [
                        "section_name"
                    ],
                    "cell": [
                        [
                            "y"
                        ],
                        [
                            "u"
                        ],
                        [
                            "p"
                        ],
                        [
                            "o"
                        ],
                        [
                            "l"
                        ],
                        [
                            "k"
                        ],
                        [
                            "j"
                        ],
                        [
                            "h"
                        ],
                        [
                            "g"
                        ],
                        [
                            "f"
                        ],
                        [
                            "e"
                        ],
                        [
                            "d"
                        ],
                        [
                            "c"
                        ],
                        [
                            "b"
                        ],
                        [
                            "a"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names of the sections in reverse alphabetical order?",
                "sql_query": "SELECT section_name FROM Sections ORDER BY section_name DESC",
                "sql_query_result": {
                    "header": [
                        "section_name"
                    ],
                    "cell": [
                        [
                            "y"
                        ],
                        [
                            "u"
                        ],
                        [
                            "p"
                        ],
                        [
                            "o"
                        ],
                        [
                            "l"
                        ],
                        [
                            "k"
                        ],
                        [
                            "j"
                        ],
                        [
                            "h"
                        ],
                        [
                            "g"
                        ],
                        [
                            "f"
                        ],
                        [
                            "e"
                        ],
                        [
                            "d"
                        ],
                        [
                            "c"
                        ],
                        [
                            "b"
                        ],
                        [
                            "a"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Describe the section h.",
                "sql_query": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
                "sql_query_result": {
                    "header": [
                        "section_description"
                    ],
                    "cell": [
                        [
                            "et"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the description for the section named h?",
                "sql_query": "SELECT section_description FROM Sections WHERE section_name  =  'h'",
                "sql_query_result": {
                    "header": [
                        "section_description"
                    ],
                    "cell": [
                        [
                            "et"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "0855121962d1a16090b215c3a76a08219f1659c4839505ae4ecbb5d74bcb9fc0",
            "9fe526482711f234dbb0998d2573bdae71f0e1e5291ff7762e2af3260699745b"
        ],
        "data_list": [
            {
                "nl_query": "What are the names and id of courses having at most 2 sections?",
                "sql_query": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
                "sql_query_result": {
                    "header": [
                        "course_name",
                        "course_id"
                    ],
                    "cell": [
                        [
                            "ds",
                            1
                        ],
                        [
                            "math",
                            2
                        ],
                        [
                            "en",
                            4
                        ],
                        [
                            "fr",
                            5
                        ],
                        [
                            "la",
                            6
                        ],
                        [
                            "cal",
                            7
                        ],
                        [
                            "nlp",
                            8
                        ],
                        [
                            "dl",
                            9
                        ],
                        [
                            "ml",
                            10
                        ],
                        [
                            "db",
                            12
                        ],
                        [
                            "pl",
                            14
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names and ids of every course with less than 2 sections?",
                "sql_query": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",
                "sql_query_result": {
                    "header": [
                        "course_name",
                        "course_id"
                    ],
                    "cell": [
                        [
                            "ds",
                            1
                        ],
                        [
                            "math",
                            2
                        ],
                        [
                            "en",
                            4
                        ],
                        [
                            "fr",
                            5
                        ],
                        [
                            "la",
                            6
                        ],
                        [
                            "cal",
                            7
                        ],
                        [
                            "nlp",
                            8
                        ],
                        [
                            "dl",
                            9
                        ],
                        [
                            "ml",
                            10
                        ],
                        [
                            "db",
                            12
                        ],
                        [
                            "pl",
                            14
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "4179fcc7b7cea1c4a41464aec93561670da89768606b4f48d882da5d58152be8",
            "ef954c860bd13ed7aa8601996116e6f6edb2489ac84eb4c309270e0aa2e877c8"
        ],
        "data_list": [
            {
                "nl_query": "What is the semester which most student registered in? Show both the name and the id.",
                "sql_query": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "semester_name",
                        "semester_id"
                    ],
                    "cell": [
                        [
                            "summer 2010",
                            2
                        ]
                    ]
                }
            },
            {
                "nl_query": "For each semester, what is the name and id of the one with the most students registered?",
                "sql_query": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "semester_name",
                        "semester_id"
                    ],
                    "cell": [
                        [
                            "summer 2010",
                            2
                        ]
                    ]
                }
            },
            {
                "nl_query": "Which semesters do not have any student enrolled? List the semester name.",
                "sql_query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
                "sql_query_result": {
                    "header": [
                        "semester_name"
                    ],
                    "cell": [
                        [
                            "fall 2010"
                        ],
                        [
                            "spring 2013"
                        ],
                        [
                            "spring 2014"
                        ],
                        [
                            "spring 2016"
                        ],
                        [
                            "spring 2017"
                        ],
                        [
                            "winter 2018"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the name of the semester with no students enrolled?",
                "sql_query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )",
                "sql_query_result": {
                    "header": [
                        "semester_name"
                    ],
                    "cell": [
                        [
                            "fall 2010"
                        ],
                        [
                            "spring 2013"
                        ],
                        [
                            "spring 2014"
                        ],
                        [
                            "spring 2016"
                        ],
                        [
                            "spring 2017"
                        ],
                        [
                            "winter 2018"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "32242ecaa729b09c13f27c5fcbab1f1f7843b4522a7f73b8f6f0965283e79097"
        ],
        "data_list": [
            {
                "nl_query": "What is the description of the department whose name has the substring the computer?",
                "sql_query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
                "sql_query_result": {
                    "header": [
                        "department_description"
                    ],
                    "cell": [
                        [
                            "error"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the department description for the one whose name has the word computer?",
                "sql_query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
                "sql_query_result": {
                    "header": [
                        "department_description"
                    ],
                    "cell": [
                        [
                            "error"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "16e6c45f61cedef2bb9fd74256b34dc8baeeb799c817060a37c59b36640567bc",
            "4179fcc7b7cea1c4a41464aec93561670da89768606b4f48d882da5d58152be8"
        ],
        "data_list": [
            {
                "nl_query": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
                "sql_query": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
                "sql_query_result": {
                    "header": [
                        "first_name",
                        "middle_name",
                        "last_name",
                        "student_id"
                    ],
                    "cell": [
                        [
                            "Jarvis",
                            "Aaliyah",
                            "Carroll",
                            4
                        ],
                        [
                            "Reva",
                            "Golda",
                            "Osinski",
                            9
                        ],
                        [
                            "Jordy",
                            "Osborne",
                            "Rempel",
                            14
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
                "sql_query": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
                "sql_query_result": {
                    "header": [
                        "first_name",
                        "middle_name",
                        "last_name",
                        "student_id"
                    ],
                    "cell": [
                        [
                            "Jarvis",
                            "Aaliyah",
                            "Carroll",
                            4
                        ],
                        [
                            "Reva",
                            "Golda",
                            "Osinski",
                            9
                        ],
                        [
                            "Jordy",
                            "Osborne",
                            "Rempel",
                            14
                        ]
                    ]
                }
            },
            {
                "nl_query": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
                "sql_query": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "student_id",
                        "first_name",
                        "middle_name",
                        "last_name",
                        "count(*)",
                        "student_id"
                    ],
                    "cell": [
                        [
                            6,
                            "Stanford",
                            "Mona",
                            "Rogahn",
                            3,
                            6
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
                "sql_query": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "student_id",
                        "first_name",
                        "middle_name",
                        "last_name",
                        "count(*)",
                        "student_id"
                    ],
                    "cell": [
                        [
                            6,
                            "Stanford",
                            "Mona",
                            "Rogahn",
                            3,
                            6
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "16e6c45f61cedef2bb9fd74256b34dc8baeeb799c817060a37c59b36640567bc",
            "4179fcc7b7cea1c4a41464aec93561670da89768606b4f48d882da5d58152be8",
            "f7c6311219d0f0dd0d0ef8c0cb4b5c6b08f5c89056ddd28fa6f60bb73cacce80"
        ],
        "data_list": [
            {
                "nl_query": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
                "sql_query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
                "sql_query_result": {
                    "header": [
                        "first_name",
                        "middle_name",
                        "last_name"
                    ],
                    "cell": [
                        [
                            "Reva",
                            "Golda",
                            "Osinski"
                        ],
                        [
                            "Frida",
                            "Aisha",
                            "Huel"
                        ],
                        [
                            "Jarvis",
                            "Aaliyah",
                            "Carroll"
                        ],
                        [
                            "Milton",
                            "Vaughn",
                            "Christiansen"
                        ],
                        [
                            "Stanford",
                            "Mona",
                            "Rogahn"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
                "sql_query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'",
                "sql_query_result": {
                    "header": [
                        "first_name",
                        "middle_name",
                        "last_name"
                    ],
                    "cell": [
                        [
                            "Reva",
                            "Golda",
                            "Osinski"
                        ],
                        [
                            "Frida",
                            "Aisha",
                            "Huel"
                        ],
                        [
                            "Jarvis",
                            "Aaliyah",
                            "Carroll"
                        ],
                        [
                            "Milton",
                            "Vaughn",
                            "Christiansen"
                        ],
                        [
                            "Stanford",
                            "Mona",
                            "Rogahn"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "4179fcc7b7cea1c4a41464aec93561670da89768606b4f48d882da5d58152be8",
            "f7c6311219d0f0dd0d0ef8c0cb4b5c6b08f5c89056ddd28fa6f60bb73cacce80"
        ],
        "data_list": [
            {
                "nl_query": "Find the kind of program which most number of students are enrolled in?",
                "sql_query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "degree_summary_name"
                    ],
                    "cell": [
                        [
                            "Bachelor"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the degree summary name that has the most number of students enrolled?",
                "sql_query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "degree_summary_name"
                    ],
                    "cell": [
                        [
                            "Bachelor"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the program which most number of students are enrolled in. List both the id and the summary.",
                "sql_query": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "degree_program_id",
                        "degree_summary_name"
                    ],
                    "cell": [
                        [
                            9,
                            "Bachelor"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the program id and the summary of the degree that has the most students enrolled?",
                "sql_query": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "degree_program_id",
                        "degree_summary_name"
                    ],
                    "cell": [
                        [
                            9,
                            "Bachelor"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the semester when both Master students and Bachelor students got enrolled in.",
                "sql_query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
                "sql_query_result": {
                    "header": [
                        "semester_id"
                    ],
                    "cell": [
                        [
                            13
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
                "sql_query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'",
                "sql_query_result": {
                    "header": [
                        "semester_id"
                    ],
                    "cell": [
                        [
                            13
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "5dfcaa60dc2be6a6854b21c9d5b771d73d991b60347f7d7d110b81ca952552ff",
            "9fe526482711f234dbb0998d2573bdae71f0e1e5291ff7762e2af3260699745b"
        ],
        "data_list": [
            {
                "nl_query": "What are all the course names of the courses which ever have students enrolled in?",
                "sql_query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
                "sql_query_result": {
                    "header": [
                        "course_name"
                    ],
                    "cell": [
                        [
                            "la"
                        ],
                        [
                            "pl"
                        ],
                        [
                            "ai"
                        ],
                        [
                            "math"
                        ],
                        [
                            "ml"
                        ],
                        [
                            "os"
                        ],
                        [
                            "en"
                        ],
                        [
                            "nlp"
                        ],
                        [
                            "rs"
                        ],
                        [
                            "db"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names of all courses that have some students enrolled?",
                "sql_query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id",
                "sql_query_result": {
                    "header": [
                        "course_name"
                    ],
                    "cell": [
                        [
                            "la"
                        ],
                        [
                            "pl"
                        ],
                        [
                            "ai"
                        ],
                        [
                            "math"
                        ],
                        [
                            "ml"
                        ],
                        [
                            "os"
                        ],
                        [
                            "en"
                        ],
                        [
                            "nlp"
                        ],
                        [
                            "rs"
                        ],
                        [
                            "db"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What's the name of the course with most number of enrollments?",
                "sql_query": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "course_name"
                    ],
                    "cell": [
                        [
                            "la"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the name of the course with the most students enrolled?",
                "sql_query": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "course_name"
                    ],
                    "cell": [
                        [
                            "la"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "16e6c45f61cedef2bb9fd74256b34dc8baeeb799c817060a37c59b36640567bc",
            "4179fcc7b7cea1c4a41464aec93561670da89768606b4f48d882da5d58152be8",
            "46d5d453a323a56c49e54cbfac91cf2e4944f62558c665ec5679aba28b99b75c"
        ],
        "data_list": [
            {
                "nl_query": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
                "sql_query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
                "sql_query_result": {
                    "header": [
                        "last_name"
                    ],
                    "cell": [
                        [
                            "Gleichner"
                        ],
                        [
                            "Weimann"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
                "sql_query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id",
                "sql_query_result": {
                    "header": [
                        "last_name"
                    ],
                    "cell": [
                        [
                            "Gleichner"
                        ],
                        [
                            "Weimann"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "0252084f20659367e5715f6740313d2d48451281d6ec8b0341dc412bc617b892",
            "14d2f530555a778def255b4f5b85fdda13b76f1de58028568256577f365d6721"
        ],
        "data_list": [
            {
                "nl_query": "Show the date and id of the transcript with at least 2 course results.",
                "sql_query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
                "sql_query_result": {
                    "header": [
                        "transcript_date",
                        "transcript_id"
                    ],
                    "cell": [
                        [
                            "2013-06-30 13:01:40",
                            5
                        ],
                        [
                            "2010-12-13 10:55:15",
                            6
                        ],
                        [
                            "1975-05-06 12:04:47",
                            8
                        ],
                        [
                            "1998-11-22 12:18:29",
                            15
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the date and id of the transcript with at least 2 courses listed?",
                "sql_query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",
                "sql_query_result": {
                    "header": [
                        "transcript_date",
                        "transcript_id"
                    ],
                    "cell": [
                        [
                            "2013-06-30 13:01:40",
                            5
                        ],
                        [
                            "2010-12-13 10:55:15",
                            6
                        ],
                        [
                            "1975-05-06 12:04:47",
                            8
                        ],
                        [
                            "1998-11-22 12:18:29",
                            15
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show the date of the transcript which shows the least number of results, also list the id.",
                "sql_query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "transcript_date",
                        "transcript_id"
                    ],
                    "cell": [
                        [
                            "1975-10-28 15:16:51",
                            2
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the date and id of the transcript with the least number of results?",
                "sql_query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "transcript_date",
                        "transcript_id"
                    ],
                    "cell": [
                        [
                            "1975-10-28 15:16:51",
                            2
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "16e6c45f61cedef2bb9fd74256b34dc8baeeb799c817060a37c59b36640567bc"
        ],
        "data_list": [
            {
                "nl_query": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
                "sql_query": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'",
                "sql_query_result": {
                    "header": [
                        "cell_mobile_number"
                    ],
                    "cell": [
                        [
                            "(096)889-8954x524"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Who is the first student to register? List the first name, middle name and last name.",
                "sql_query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "first_name",
                        "middle_name",
                        "last_name"
                    ],
                    "cell": [
                        [
                            "Timmothy",
                            "Anna",
                            "Ward"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the first, middle, and last name of the first student to register?",
                "sql_query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "first_name",
                        "middle_name",
                        "last_name"
                    ],
                    "cell": [
                        [
                            "Timmothy",
                            "Anna",
                            "Ward"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
                "sql_query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "first_name",
                        "middle_name",
                        "last_name"
                    ],
                    "cell": [
                        [
                            "Timmothy",
                            "Anna",
                            "Ward"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the first, middle, and last name of the earliest school graduate?",
                "sql_query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "first_name",
                        "middle_name",
                        "last_name"
                    ],
                    "cell": [
                        [
                            "Timmothy",
                            "Anna",
                            "Ward"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Whose permanent address is different from his or her current address? List his or her first name.",
                "sql_query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
                "sql_query_result": {
                    "header": [
                        "first_name"
                    ],
                    "cell": [
                        [
                            "Timmothy"
                        ],
                        [
                            "Hobart"
                        ],
                        [
                            "Warren"
                        ],
                        [
                            "Jarvis"
                        ],
                        [
                            "Stanford"
                        ],
                        [
                            "Frida"
                        ],
                        [
                            "Delaney"
                        ],
                        [
                            "Reva"
                        ],
                        [
                            "Helga"
                        ],
                        [
                            "Gregg"
                        ],
                        [
                            "Orrin"
                        ],
                        [
                            "Deon"
                        ],
                        [
                            "Jordy"
                        ],
                        [
                            "Jett"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the first name of the student whose permanent address is different from his or her current one?",
                "sql_query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
                "sql_query_result": {
                    "header": [
                        "first_name"
                    ],
                    "cell": [
                        [
                            "Timmothy"
                        ],
                        [
                            "Hobart"
                        ],
                        [
                            "Warren"
                        ],
                        [
                            "Jarvis"
                        ],
                        [
                            "Stanford"
                        ],
                        [
                            "Frida"
                        ],
                        [
                            "Delaney"
                        ],
                        [
                            "Reva"
                        ],
                        [
                            "Helga"
                        ],
                        [
                            "Gregg"
                        ],
                        [
                            "Orrin"
                        ],
                        [
                            "Deon"
                        ],
                        [
                            "Jordy"
                        ],
                        [
                            "Jett"
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many different addresses do the students currently live?",
                "sql_query": "SELECT count(DISTINCT current_address_id) FROM Students",
                "sql_query_result": {
                    "header": [
                        "count(DISTINCT current_address_id)"
                    ],
                    "cell": [
                        [
                            9
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the different addresses that have students living there?",
                "sql_query": "SELECT count(DISTINCT current_address_id) FROM Students",
                "sql_query_result": {
                    "header": [
                        "count(DISTINCT current_address_id)"
                    ],
                    "cell": [
                        [
                            9
                        ]
                    ]
                }
            },
            {
                "nl_query": "List all the student details in reversed lexicographical order.",
                "sql_query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
                "sql_query_result": {
                    "header": [
                        "other_student_details"
                    ],
                    "cell": [
                        [
                            "voluptatem"
                        ],
                        [
                            "rerum"
                        ],
                        [
                            "quia"
                        ],
                        [
                            "qui"
                        ],
                        [
                            "omnis"
                        ],
                        [
                            "non"
                        ],
                        [
                            "nesciunt"
                        ],
                        [
                            "laborum"
                        ],
                        [
                            "facilis"
                        ],
                        [
                            "et"
                        ],
                        [
                            "dolorum"
                        ],
                        [
                            "autem"
                        ],
                        [
                            "atque"
                        ],
                        [
                            "assumenda"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What other details can you tell me about students in reverse alphabetical order?",
                "sql_query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC",
                "sql_query_result": {
                    "header": [
                        "other_student_details"
                    ],
                    "cell": [
                        [
                            "voluptatem"
                        ],
                        [
                            "rerum"
                        ],
                        [
                            "quia"
                        ],
                        [
                            "qui"
                        ],
                        [
                            "omnis"
                        ],
                        [
                            "non"
                        ],
                        [
                            "nesciunt"
                        ],
                        [
                            "laborum"
                        ],
                        [
                            "facilis"
                        ],
                        [
                            "et"
                        ],
                        [
                            "dolorum"
                        ],
                        [
                            "autem"
                        ],
                        [
                            "atque"
                        ],
                        [
                            "assumenda"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "16e6c45f61cedef2bb9fd74256b34dc8baeeb799c817060a37c59b36640567bc",
            "46d5d453a323a56c49e54cbfac91cf2e4944f62558c665ec5679aba28b99b75c"
        ],
        "data_list": [
            {
                "nl_query": "Which address holds the most number of students currently? List the address id and all lines.",
                "sql_query": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "address_id",
                        "line_1",
                        "line_2"
                    ],
                    "cell": [
                        [
                            9,
                            "0643 Muller Vista",
                            "Suite 383"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the id, line 1, and line 2 of the address with the most students?",
                "sql_query": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "address_id",
                        "line_1",
                        "line_2"
                    ],
                    "cell": [
                        [
                            9,
                            "0643 Muller Vista",
                            "Suite 383"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "14d2f530555a778def255b4f5b85fdda13b76f1de58028568256577f365d6721"
        ],
        "data_list": [
            {
                "nl_query": "On average, when were the transcripts printed?",
                "sql_query": "SELECT avg(transcript_date) FROM Transcripts",
                "sql_query_result": {
                    "header": [
                        "avg(transcript_date)"
                    ],
                    "cell": [
                        [
                            1989.9333333333
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the average transcript date?",
                "sql_query": "SELECT avg(transcript_date) FROM Transcripts",
                "sql_query_result": {
                    "header": [
                        "avg(transcript_date)"
                    ],
                    "cell": [
                        [
                            1989.9333333333
                        ]
                    ]
                }
            },
            {
                "nl_query": "When is the first transcript released? List the date and details.",
                "sql_query": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "transcript_date",
                        "other_details"
                    ],
                    "cell": [
                        [
                            "1975-05-06 12:04:47",
                            null
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the earliest date of a transcript release, and what details can you tell me?",
                "sql_query": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "transcript_date",
                        "other_details"
                    ],
                    "cell": [
                        [
                            "1975-05-06 12:04:47",
                            null
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many transcripts are released?",
                "sql_query": "SELECT count(*) FROM Transcripts",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            15
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many transcripts are listed?",
                "sql_query": "SELECT count(*) FROM Transcripts",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            15
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the last transcript release date?",
                "sql_query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "transcript_date"
                    ],
                    "cell": [
                        [
                            "2013-06-30 13:01:40"
                        ]
                    ]
                }
            },
            {
                "nl_query": "When was the last transcript released?",
                "sql_query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "transcript_date"
                    ],
                    "cell": [
                        [
                            "2013-06-30 13:01:40"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "0252084f20659367e5715f6740313d2d48451281d6ec8b0341dc412bc617b892"
        ],
        "data_list": [
            {
                "nl_query": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
                "sql_query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "count(*)",
                        "student_course_id"
                    ],
                    "cell": [
                        [
                            4,
                            0
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
                "sql_query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "count(*)",
                        "student_course_id"
                    ],
                    "cell": [
                        [
                            4,
                            0
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "bdf9382cd3b989bd9ae6de7dfbdfbfa417422e990d2f3f9ba8b12c325f5ef397"
        ],
        "data_list": [
            {
                "nl_query": "List the title of all cartoons in alphabetical order.",
                "sql_query": "SELECT Title FROM Cartoon ORDER BY title",
                "sql_query_result": {
                    "header": [
                        "Title"
                    ],
                    "cell": [
                        [
                            "Dawn of the Dead Man!"
                        ],
                        [
                            "Day of the Dark Knight!"
                        ],
                        [
                            "Deep Cover for Batman!"
                        ],
                        [
                            "Enter the Outsiders!"
                        ],
                        [
                            "Evil Under the Sea!"
                        ],
                        [
                            "Fall of the Blue Beetle!"
                        ],
                        [
                            "Invasion of the Secret Santas!"
                        ],
                        [
                            "Journey to the Center of the Bat!"
                        ],
                        [
                            "Return of the Fearsome Fangs!"
                        ],
                        [
                            "Terror on Dinosaur Island!"
                        ],
                        [
                            "The Eyes of Despero!"
                        ],
                        [
                            "The Rise of the Blue Beetle!"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the titles of the cartoons sorted alphabetically?",
                "sql_query": "SELECT Title FROM Cartoon ORDER BY title",
                "sql_query_result": {
                    "header": [
                        "Title"
                    ],
                    "cell": [
                        [
                            "Dawn of the Dead Man!"
                        ],
                        [
                            "Day of the Dark Knight!"
                        ],
                        [
                            "Deep Cover for Batman!"
                        ],
                        [
                            "Enter the Outsiders!"
                        ],
                        [
                            "Evil Under the Sea!"
                        ],
                        [
                            "Fall of the Blue Beetle!"
                        ],
                        [
                            "Invasion of the Secret Santas!"
                        ],
                        [
                            "Journey to the Center of the Bat!"
                        ],
                        [
                            "Return of the Fearsome Fangs!"
                        ],
                        [
                            "Terror on Dinosaur Island!"
                        ],
                        [
                            "The Eyes of Despero!"
                        ],
                        [
                            "The Rise of the Blue Beetle!"
                        ]
                    ]
                }
            },
            {
                "nl_query": "List all cartoon directed by \"Ben Jones\".",
                "sql_query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
                "sql_query_result": {
                    "header": [
                        "Title"
                    ],
                    "cell": [
                        [
                            "The Rise of the Blue Beetle!"
                        ],
                        [
                            "Day of the Dark Knight!"
                        ],
                        [
                            "Dawn of the Dead Man!"
                        ],
                        [
                            "The Eyes of Despero!"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names of all cartoons directed by Ben Jones?",
                "sql_query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
                "sql_query_result": {
                    "header": [
                        "Title"
                    ],
                    "cell": [
                        [
                            "The Rise of the Blue Beetle!"
                        ],
                        [
                            "Day of the Dark Knight!"
                        ],
                        [
                            "Dawn of the Dead Man!"
                        ],
                        [
                            "The Eyes of Despero!"
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many cartoons were written by \"Joseph Kuhr\"?",
                "sql_query": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            2
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the number of cartoones written by Joseph Kuhr?",
                "sql_query": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            2
                        ]
                    ]
                }
            },
            {
                "nl_query": "list all cartoon titles and their directors ordered by their air date",
                "sql_query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
                "sql_query_result": {
                    "header": [
                        "Title",
                        "Directed_by"
                    ],
                    "cell": [
                        [
                            "Invasion of the Secret Santas!",
                            "Brandon Vietti"
                        ],
                        [
                            "Evil Under the Sea!",
                            "Michael Chang"
                        ],
                        [
                            "Return of the Fearsome Fangs!",
                            "Brandon Vietti"
                        ],
                        [
                            "Deep Cover for Batman!",
                            "Michael Chang"
                        ],
                        [
                            "The Eyes of Despero!",
                            "Ben Jones"
                        ],
                        [
                            "Dawn of the Dead Man!",
                            "Ben Jones"
                        ],
                        [
                            "Day of the Dark Knight!",
                            "Ben Jones"
                        ],
                        [
                            "Fall of the Blue Beetle!",
                            "Brandon Vietti"
                        ],
                        [
                            "Journey to the Center of the Bat!",
                            "Michael Chang"
                        ],
                        [
                            "Enter the Outsiders!",
                            "Michael Chang"
                        ],
                        [
                            "The Rise of the Blue Beetle!",
                            "Ben Jones"
                        ],
                        [
                            "Terror on Dinosaur Island!",
                            "Brandon Vietti"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the name and directors of all the cartoons that are ordered by air date?",
                "sql_query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",
                "sql_query_result": {
                    "header": [
                        "Title",
                        "Directed_by"
                    ],
                    "cell": [
                        [
                            "Invasion of the Secret Santas!",
                            "Brandon Vietti"
                        ],
                        [
                            "Evil Under the Sea!",
                            "Michael Chang"
                        ],
                        [
                            "Return of the Fearsome Fangs!",
                            "Brandon Vietti"
                        ],
                        [
                            "Deep Cover for Batman!",
                            "Michael Chang"
                        ],
                        [
                            "The Eyes of Despero!",
                            "Ben Jones"
                        ],
                        [
                            "Dawn of the Dead Man!",
                            "Ben Jones"
                        ],
                        [
                            "Day of the Dark Knight!",
                            "Ben Jones"
                        ],
                        [
                            "Fall of the Blue Beetle!",
                            "Brandon Vietti"
                        ],
                        [
                            "Journey to the Center of the Bat!",
                            "Michael Chang"
                        ],
                        [
                            "Enter the Outsiders!",
                            "Michael Chang"
                        ],
                        [
                            "The Rise of the Blue Beetle!",
                            "Ben Jones"
                        ],
                        [
                            "Terror on Dinosaur Island!",
                            "Brandon Vietti"
                        ]
                    ]
                }
            },
            {
                "nl_query": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
                "sql_query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
                "sql_query_result": {
                    "header": [
                        "Title"
                    ],
                    "cell": [
                        [
                            "The Rise of the Blue Beetle!"
                        ],
                        [
                            "Terror on Dinosaur Island!"
                        ],
                        [
                            "Day of the Dark Knight!"
                        ],
                        [
                            "Invasion of the Secret Santas!"
                        ],
                        [
                            "Dawn of the Dead Man!"
                        ],
                        [
                            "Fall of the Blue Beetle!"
                        ],
                        [
                            "The Eyes of Despero!"
                        ],
                        [
                            "Return of the Fearsome Fangs!"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
                "sql_query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";",
                "sql_query_result": {
                    "header": [
                        "Title"
                    ],
                    "cell": [
                        [
                            "The Rise of the Blue Beetle!"
                        ],
                        [
                            "Terror on Dinosaur Island!"
                        ],
                        [
                            "Day of the Dark Knight!"
                        ],
                        [
                            "Invasion of the Secret Santas!"
                        ],
                        [
                            "Dawn of the Dead Man!"
                        ],
                        [
                            "Fall of the Blue Beetle!"
                        ],
                        [
                            "The Eyes of Despero!"
                        ],
                        [
                            "Return of the Fearsome Fangs!"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the number of cartoons directed by each of the listed directors.",
                "sql_query": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
                "sql_query_result": {
                    "header": [
                        "count(*)",
                        "Directed_by"
                    ],
                    "cell": [
                        [
                            4,
                            "Ben Jones"
                        ],
                        [
                            4,
                            "Brandon Vietti"
                        ],
                        [
                            4,
                            "Michael Chang"
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many cartoons did each director create?",
                "sql_query": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",
                "sql_query_result": {
                    "header": [
                        "count(*)",
                        "Directed_by"
                    ],
                    "cell": [
                        [
                            4,
                            "Ben Jones"
                        ],
                        [
                            4,
                            "Brandon Vietti"
                        ],
                        [
                            4,
                            "Michael Chang"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "578ada8a2be27f787dd61e404764154540105ff8cc538b8a655ba59e9e08dca7"
        ],
        "data_list": [
            {
                "nl_query": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
                "sql_query": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
                "sql_query_result": {
                    "header": [
                        "Country",
                        "count(*)"
                    ],
                    "cell": [
                        [
                            "Italy",
                            12
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the country with the most number of TV Channels and how many does it have?",
                "sql_query": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",
                "sql_query_result": {
                    "header": [
                        "Country",
                        "count(*)"
                    ],
                    "cell": [
                        [
                            "Italy",
                            12
                        ]
                    ]
                }
            },
            {
                "nl_query": "List the number of different series names and contents in the TV Channel table.",
                "sql_query": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
                "sql_query_result": {
                    "header": [
                        "count(DISTINCT series_name)",
                        "count(DISTINCT content)"
                    ],
                    "cell": [
                        [
                            15,
                            1
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many different series and contents are listed in the TV Channel table?",
                "sql_query": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",
                "sql_query_result": {
                    "header": [
                        "count(DISTINCT series_name)",
                        "count(DISTINCT content)"
                    ],
                    "cell": [
                        [
                            15,
                            1
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the content of TV Channel with serial name \"Sky Radio\"?",
                "sql_query": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
                "sql_query_result": {
                    "header": [
                        "Content"
                    ],
                    "cell": [
                        [
                            "music"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the content of the series Sky Radio?",
                "sql_query": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";",
                "sql_query_result": {
                    "header": [
                        "Content"
                    ],
                    "cell": [
                        [
                            "music"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
                "sql_query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
                "sql_query_result": {
                    "header": [
                        "Package_Option"
                    ],
                    "cell": [
                        [
                            "Sky Famiglia"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
                "sql_query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
                "sql_query_result": {
                    "header": [
                        "Package_Option"
                    ],
                    "cell": [
                        [
                            "Sky Famiglia"
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many TV Channel using language English?",
                "sql_query": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            3
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many TV Channels use the English language?",
                "sql_query": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            3
                        ]
                    ]
                }
            },
            {
                "nl_query": "List the language used least number of TV Channel. List language and number of TV Channel.",
                "sql_query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
                "sql_query_result": {
                    "header": [
                        "Language",
                        "count(*)"
                    ],
                    "cell": [
                        [
                            "English",
                            3
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the languages used by the least number of TV Channels and how many channels use it?",
                "sql_query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",
                "sql_query_result": {
                    "header": [
                        "Language",
                        "count(*)"
                    ],
                    "cell": [
                        [
                            "English",
                            3
                        ]
                    ]
                }
            },
            {
                "nl_query": "List each language and the number of TV Channels using it.",
                "sql_query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
                "sql_query_result": {
                    "header": [
                        "Language",
                        "count(*)"
                    ],
                    "cell": [
                        [
                            "English",
                            3
                        ],
                        [
                            "Italian",
                            12
                        ]
                    ]
                }
            },
            {
                "nl_query": "For each language, list the number of TV Channels that use it.",
                "sql_query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",
                "sql_query_result": {
                    "header": [
                        "Language",
                        "count(*)"
                    ],
                    "cell": [
                        [
                            "English",
                            3
                        ],
                        [
                            "Italian",
                            12
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the package choice and series name of the TV channel that has high definition TV.",
                "sql_query": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
                "sql_query_result": {
                    "header": [
                        "Package_Option",
                        "series_name"
                    ],
                    "cell": [
                        [
                            "Sky Famiglia + Sky HD",
                            "MTV Live HD"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
                "sql_query": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"",
                "sql_query_result": {
                    "header": [
                        "Package_Option",
                        "series_name"
                    ],
                    "cell": [
                        [
                            "Sky Famiglia + Sky HD",
                            "MTV Live HD"
                        ]
                    ]
                }
            },
            {
                "nl_query": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
                "sql_query": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
                "sql_query_result": {
                    "header": [
                        "Pixel_aspect_ratio_PAR",
                        "Country"
                    ],
                    "cell": [
                        [
                            "4:3",
                            "Italy"
                        ],
                        [
                            "4:3 / 16:9",
                            "Italy"
                        ],
                        [
                            "16:9",
                            "Italy"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
                "sql_query": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",
                "sql_query_result": {
                    "header": [
                        "Pixel_aspect_ratio_PAR",
                        "Country"
                    ],
                    "cell": [
                        [
                            "4:3",
                            "Italy"
                        ],
                        [
                            "4:3 / 16:9",
                            "Italy"
                        ],
                        [
                            "16:9",
                            "Italy"
                        ]
                    ]
                }
            },
            {
                "nl_query": "find id of the tv channels that from the countries where have more than two tv channels.",
                "sql_query": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
                "sql_query_result": {
                    "header": [
                        "id"
                    ],
                    "cell": [
                        [
                            "728"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the ids of all tv channels that have more than 2 TV channels?",
                "sql_query": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2",
                "sql_query_result": {
                    "header": [
                        "id"
                    ],
                    "cell": [
                        [
                            "728"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "578ada8a2be27f787dd61e404764154540105ff8cc538b8a655ba59e9e08dca7",
            "bdf9382cd3b989bd9ae6de7dfbdfbfa417422e990d2f3f9ba8b12c325f5ef397"
        ],
        "data_list": [
            {
                "nl_query": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
                "sql_query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
                "sql_query_result": {
                    "header": [
                        "series_name"
                    ],
                    "cell": [
                        [
                            "Sky Radio"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
                "sql_query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";",
                "sql_query_result": {
                    "header": [
                        "series_name"
                    ],
                    "cell": [
                        [
                            "Sky Radio"
                        ]
                    ]
                }
            },
            {
                "nl_query": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
                "sql_query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
                "sql_query_result": {
                    "header": [
                        "Title"
                    ],
                    "cell": [
                        [
                            "The Rise of the Blue Beetle!"
                        ],
                        [
                            "Return of the Fearsome Fangs!"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
                "sql_query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
                "sql_query_result": {
                    "header": [
                        "Title"
                    ],
                    "cell": [
                        [
                            "The Rise of the Blue Beetle!"
                        ],
                        [
                            "Return of the Fearsome Fangs!"
                        ]
                    ]
                }
            },
            {
                "nl_query": "which countries' tv channels are playing some cartoon written by Todd Casey?",
                "sql_query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
                "sql_query_result": {
                    "header": [
                        "Country"
                    ],
                    "cell": [
                        [
                            "United Kingdom"
                        ],
                        [
                            "Italy"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the countries that have cartoons on TV that were written by Todd Casey?",
                "sql_query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
                "sql_query_result": {
                    "header": [
                        "Country"
                    ],
                    "cell": [
                        [
                            "United Kingdom"
                        ],
                        [
                            "Italy"
                        ]
                    ]
                }
            },
            {
                "nl_query": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
                "sql_query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
                "sql_query_result": {
                    "header": [
                        "Country"
                    ],
                    "cell": [
                        [
                            "Poland"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the countries that are not playing cartoons written by Todd Casey?",
                "sql_query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'",
                "sql_query_result": {
                    "header": [
                        "Country"
                    ],
                    "cell": [
                        [
                            "Poland"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
                "sql_query": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
                "sql_query_result": {
                    "header": [
                        "series_name",
                        "Country"
                    ],
                    "cell": [
                        [
                            "MTV Dance",
                            "United Kingdom"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
                "sql_query": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",
                "sql_query_result": {
                    "header": [
                        "series_name",
                        "Country"
                    ],
                    "cell": [
                        [
                            "MTV Dance",
                            "United Kingdom"
                        ]
                    ]
                }
            },
            {
                "nl_query": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
                "sql_query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
                "sql_query_result": {
                    "header": [
                        "id"
                    ],
                    "cell": [
                        [
                            "701"
                        ],
                        [
                            "703"
                        ],
                        [
                            "705"
                        ],
                        [
                            "706"
                        ],
                        [
                            "708"
                        ],
                        [
                            "709"
                        ],
                        [
                            "713"
                        ],
                        [
                            "714"
                        ],
                        [
                            "715"
                        ],
                        [
                            "717"
                        ],
                        [
                            "719"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
                "sql_query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'",
                "sql_query_result": {
                    "header": [
                        "id"
                    ],
                    "cell": [
                        [
                            "701"
                        ],
                        [
                            "703"
                        ],
                        [
                            "705"
                        ],
                        [
                            "706"
                        ],
                        [
                            "708"
                        ],
                        [
                            "709"
                        ],
                        [
                            "713"
                        ],
                        [
                            "714"
                        ],
                        [
                            "715"
                        ],
                        [
                            "717"
                        ],
                        [
                            "719"
                        ]
                    ]
                }
            },
            {
                "nl_query": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
                "sql_query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
                "sql_query_result": {
                    "header": [
                        "Package_Option"
                    ],
                    "cell": [
                        [
                            "Sky Famiglia"
                        ],
                        [
                            "no ( FTV )"
                        ],
                        [
                            "Sky Famiglia + Sky HD"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
                "sql_query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')",
                "sql_query_result": {
                    "header": [
                        "Package_Option"
                    ],
                    "cell": [
                        [
                            "Sky Famiglia"
                        ],
                        [
                            "no ( FTV )"
                        ],
                        [
                            "Sky Famiglia + Sky HD"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "6bc4e83f039aa281e23d3cde4556cdd32d9166593dc382cdcf0d50898a5c5fa4"
        ],
        "data_list": [
            {
                "nl_query": "List the Episode of all TV series sorted by rating.",
                "sql_query": "SELECT Episode FROM TV_series ORDER BY rating",
                "sql_query_result": {
                    "header": [
                        "Episode"
                    ],
                    "cell": [
                        [
                            "The Hanged Man"
                        ],
                        [
                            "Double Down"
                        ],
                        [
                            "Home By Another Way"
                        ],
                        [
                            "Keepers"
                        ],
                        [
                            "Emily"
                        ],
                        [
                            "Blowback"
                        ],
                        [
                            "The Legend of Dylan McCleen"
                        ],
                        [
                            "Winterland"
                        ],
                        [
                            "The Year of the Rabbit"
                        ],
                        [
                            "Game Three"
                        ],
                        [
                            "Friendly Skies"
                        ],
                        [
                            "A Love of a Lifetime"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are all of the episodes ordered by ratings?",
                "sql_query": "SELECT Episode FROM TV_series ORDER BY rating",
                "sql_query_result": {
                    "header": [
                        "Episode"
                    ],
                    "cell": [
                        [
                            "The Hanged Man"
                        ],
                        [
                            "Double Down"
                        ],
                        [
                            "Home By Another Way"
                        ],
                        [
                            "Keepers"
                        ],
                        [
                            "Emily"
                        ],
                        [
                            "Blowback"
                        ],
                        [
                            "The Legend of Dylan McCleen"
                        ],
                        [
                            "Winterland"
                        ],
                        [
                            "The Year of the Rabbit"
                        ],
                        [
                            "Game Three"
                        ],
                        [
                            "Friendly Skies"
                        ],
                        [
                            "A Love of a Lifetime"
                        ]
                    ]
                }
            },
            {
                "nl_query": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
                "sql_query": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
                "sql_query_result": {
                    "header": [
                        "Episode",
                        "Rating"
                    ],
                    "cell": [
                        [
                            "A Love of a Lifetime",
                            "5.8"
                        ],
                        [
                            "Friendly Skies",
                            "5.3"
                        ],
                        [
                            "Game Three",
                            "4.4"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
                "sql_query": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
                "sql_query_result": {
                    "header": [
                        "Episode",
                        "Rating"
                    ],
                    "cell": [
                        [
                            "A Love of a Lifetime",
                            "5.8"
                        ],
                        [
                            "Friendly Skies",
                            "5.3"
                        ],
                        [
                            "Game Three",
                            "4.4"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is minimum and maximum share of TV series?",
                "sql_query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
                "sql_query_result": {
                    "header": [
                        "max(SHARE)",
                        "min(SHARE)"
                    ],
                    "cell": [
                        [
                            9.0,
                            5.0
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the maximum and minimum share for the TV series?",
                "sql_query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;",
                "sql_query_result": {
                    "header": [
                        "max(SHARE)",
                        "min(SHARE)"
                    ],
                    "cell": [
                        [
                            9.0,
                            5.0
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
                "sql_query": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
                "sql_query_result": {
                    "header": [
                        "Air_Date"
                    ],
                    "cell": [
                        [
                            "September 24, 2007"
                        ]
                    ]
                }
            },
            {
                "nl_query": "When did the episode \"A Love of a Lifetime\" air?",
                "sql_query": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
                "sql_query_result": {
                    "header": [
                        "Air_Date"
                    ],
                    "cell": [
                        [
                            "September 24, 2007"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
                "sql_query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
                "sql_query_result": {
                    "header": [
                        "Weekly_Rank"
                    ],
                    "cell": [
                        [
                            43.0
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
                "sql_query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
                "sql_query_result": {
                    "header": [
                        "Weekly_Rank"
                    ],
                    "cell": [
                        [
                            43.0
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "578ada8a2be27f787dd61e404764154540105ff8cc538b8a655ba59e9e08dca7",
            "6bc4e83f039aa281e23d3cde4556cdd32d9166593dc382cdcf0d50898a5c5fa4"
        ],
        "data_list": [
            {
                "nl_query": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
                "sql_query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
                "sql_query_result": {
                    "header": [
                        "series_name"
                    ],
                    "cell": [
                        [
                            "Sky Radio"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
                "sql_query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";",
                "sql_query_result": {
                    "header": [
                        "series_name"
                    ],
                    "cell": [
                        [
                            "Sky Radio"
                        ]
                    ]
                }
            },
            {
                "nl_query": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
                "sql_query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
                "sql_query_result": {
                    "header": [
                        "Episode"
                    ],
                    "cell": [
                        [
                            "A Love of a Lifetime"
                        ],
                        [
                            "Keepers"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the episode for the TV series named \"Sky Radio\"?",
                "sql_query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";",
                "sql_query_result": {
                    "header": [
                        "Episode"
                    ],
                    "cell": [
                        [
                            "A Love of a Lifetime"
                        ],
                        [
                            "Keepers"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "ce9210aa98a7ca69c62d78990e60a4b8ca20adfb09497256d8f5e1ca565ac1b6"
        ],
        "data_list": [
            {
                "nl_query": "How many poker players are there?",
                "sql_query": "SELECT count(*) FROM poker_player",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            5
                        ]
                    ]
                }
            },
            {
                "nl_query": "Count the number of poker players.",
                "sql_query": "SELECT count(*) FROM poker_player",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            5
                        ]
                    ]
                }
            },
            {
                "nl_query": "List the earnings of poker players in descending order.",
                "sql_query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
                "sql_query_result": {
                    "header": [
                        "Earnings"
                    ],
                    "cell": [
                        [
                            596462.0
                        ],
                        [
                            476090.0
                        ],
                        [
                            189233.0
                        ],
                        [
                            142800.0
                        ],
                        [
                            104871.0
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the earnings of poker players, ordered descending by value?",
                "sql_query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
                "sql_query_result": {
                    "header": [
                        "Earnings"
                    ],
                    "cell": [
                        [
                            596462.0
                        ],
                        [
                            476090.0
                        ],
                        [
                            189233.0
                        ],
                        [
                            142800.0
                        ],
                        [
                            104871.0
                        ]
                    ]
                }
            },
            {
                "nl_query": "List the final tables made and the best finishes of poker players.",
                "sql_query": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
                "sql_query_result": {
                    "header": [
                        "Final_Table_Made",
                        "Best_Finish"
                    ],
                    "cell": [
                        [
                            42.0,
                            1.0
                        ],
                        [
                            10.0,
                            2.0
                        ],
                        [
                            21.0,
                            1.0
                        ],
                        [
                            19.0,
                            2.0
                        ],
                        [
                            26.0,
                            3.0
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the final tables made and best finishes for all poker players?",
                "sql_query": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player",
                "sql_query_result": {
                    "header": [
                        "Final_Table_Made",
                        "Best_Finish"
                    ],
                    "cell": [
                        [
                            42.0,
                            1.0
                        ],
                        [
                            10.0,
                            2.0
                        ],
                        [
                            21.0,
                            1.0
                        ],
                        [
                            19.0,
                            2.0
                        ],
                        [
                            26.0,
                            3.0
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the average earnings of poker players?",
                "sql_query": "SELECT avg(Earnings) FROM poker_player",
                "sql_query_result": {
                    "header": [
                        "avg(Earnings)"
                    ],
                    "cell": [
                        [
                            301891.2
                        ]
                    ]
                }
            },
            {
                "nl_query": "Return the average earnings across all poker players.",
                "sql_query": "SELECT avg(Earnings) FROM poker_player",
                "sql_query_result": {
                    "header": [
                        "avg(Earnings)"
                    ],
                    "cell": [
                        [
                            301891.2
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the money rank of the poker player with the highest earnings?",
                "sql_query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Money_Rank"
                    ],
                    "cell": [
                        [
                            58.0
                        ]
                    ]
                }
            },
            {
                "nl_query": "Return the money rank of the player with the greatest earnings.",
                "sql_query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Money_Rank"
                    ],
                    "cell": [
                        [
                            58.0
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
                "sql_query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
                "sql_query_result": {
                    "header": [
                        "max(Final_Table_Made)"
                    ],
                    "cell": [
                        [
                            26.0
                        ]
                    ]
                }
            },
            {
                "nl_query": "Return the maximum final tables made across all poker players who have earnings below 200000.",
                "sql_query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000",
                "sql_query_result": {
                    "header": [
                        "max(Final_Table_Made)"
                    ],
                    "cell": [
                        [
                            26.0
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "6b6b0937ea6f99652cc2b990dddc3c0e2c8668f067fcd023ce321294cf415fb2",
            "ce9210aa98a7ca69c62d78990e60a4b8ca20adfb09497256d8f5e1ca565ac1b6"
        ],
        "data_list": [
            {
                "nl_query": "What are the names of poker players?",
                "sql_query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Aleksey Ostapenko"
                        ],
                        [
                            "Teodor Salparov"
                        ],
                        [
                            "Yevgeni Sivozhelez"
                        ],
                        [
                            "Maksim Botin"
                        ],
                        [
                            "Semen Poltavskiy"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Return the names of all the poker players.",
                "sql_query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Aleksey Ostapenko"
                        ],
                        [
                            "Teodor Salparov"
                        ],
                        [
                            "Yevgeni Sivozhelez"
                        ],
                        [
                            "Maksim Botin"
                        ],
                        [
                            "Semen Poltavskiy"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names of poker players whose earnings is higher than 300000?",
                "sql_query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Aleksey Ostapenko"
                        ],
                        [
                            "Maksim Botin"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Give the names of poker players who have earnings above 300000.",
                "sql_query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Aleksey Ostapenko"
                        ],
                        [
                            "Maksim Botin"
                        ]
                    ]
                }
            },
            {
                "nl_query": "List the names of poker players ordered by the final tables made in ascending order.",
                "sql_query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Teodor Salparov"
                        ],
                        [
                            "Maksim Botin"
                        ],
                        [
                            "Yevgeni Sivozhelez"
                        ],
                        [
                            "Semen Poltavskiy"
                        ],
                        [
                            "Aleksey Ostapenko"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
                "sql_query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Teodor Salparov"
                        ],
                        [
                            "Maksim Botin"
                        ],
                        [
                            "Yevgeni Sivozhelez"
                        ],
                        [
                            "Semen Poltavskiy"
                        ],
                        [
                            "Aleksey Ostapenko"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the birth date of the poker player with the lowest earnings?",
                "sql_query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Birth_Date"
                    ],
                    "cell": [
                        [
                            "August 8, 1986"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Return the birth date of the poker player with the lowest earnings.",
                "sql_query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Birth_Date"
                    ],
                    "cell": [
                        [
                            "August 8, 1986"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the money rank of the tallest poker player?",
                "sql_query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Money_Rank"
                    ],
                    "cell": [
                        [
                            68.0
                        ]
                    ]
                }
            },
            {
                "nl_query": "Return the money rank of the poker player with the greatest height.",
                "sql_query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Money_Rank"
                    ],
                    "cell": [
                        [
                            68.0
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the average earnings of poker players with height higher than 200?",
                "sql_query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
                "sql_query_result": {
                    "header": [
                        "avg(T2.Earnings)"
                    ],
                    "cell": [
                        [
                            309445.0
                        ]
                    ]
                }
            },
            {
                "nl_query": "Give average earnings of poker players who are taller than 200.",
                "sql_query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200",
                "sql_query_result": {
                    "header": [
                        "avg(T2.Earnings)"
                    ],
                    "cell": [
                        [
                            309445.0
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names of poker players in descending order of earnings?",
                "sql_query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Maksim Botin"
                        ],
                        [
                            "Aleksey Ostapenko"
                        ],
                        [
                            "Teodor Salparov"
                        ],
                        [
                            "Semen Poltavskiy"
                        ],
                        [
                            "Yevgeni Sivozhelez"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Return the names of poker players sorted by their earnings descending.",
                "sql_query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Maksim Botin"
                        ],
                        [
                            "Aleksey Ostapenko"
                        ],
                        [
                            "Teodor Salparov"
                        ],
                        [
                            "Semen Poltavskiy"
                        ],
                        [
                            "Yevgeni Sivozhelez"
                        ]
                    ]
                }
            },
            {
                "nl_query": "List the names of people that are not poker players.",
                "sql_query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Roman Bragin"
                        ],
                        [
                            "Sergey Grankin"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names of people who do not play poker?",
                "sql_query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Roman Bragin"
                        ],
                        [
                            "Sergey Grankin"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "6b6b0937ea6f99652cc2b990dddc3c0e2c8668f067fcd023ce321294cf415fb2"
        ],
        "data_list": [
            {
                "nl_query": "What are different nationalities of people and the corresponding number of people from each nation?",
                "sql_query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
                "sql_query_result": {
                    "header": [
                        "Nationality",
                        "COUNT(*)"
                    ],
                    "cell": [
                        [
                            "Bulgaria",
                            1
                        ],
                        [
                            "Russia",
                            6
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many people are there of each nationality?",
                "sql_query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",
                "sql_query_result": {
                    "header": [
                        "Nationality",
                        "COUNT(*)"
                    ],
                    "cell": [
                        [
                            "Bulgaria",
                            1
                        ],
                        [
                            "Russia",
                            6
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the most common nationality of people?",
                "sql_query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Nationality"
                    ],
                    "cell": [
                        [
                            "Russia"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Give the nationality that is most common across all people.",
                "sql_query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Nationality"
                    ],
                    "cell": [
                        [
                            "Russia"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the nationalities that are shared by at least two people?",
                "sql_query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
                "sql_query_result": {
                    "header": [
                        "Nationality"
                    ],
                    "cell": [
                        [
                            "Russia"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Return the nationalities for which there are two or more people.",
                "sql_query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2",
                "sql_query_result": {
                    "header": [
                        "Nationality"
                    ],
                    "cell": [
                        [
                            "Russia"
                        ]
                    ]
                }
            },
            {
                "nl_query": "List the names and birth dates of people in ascending alphabetical order of name.",
                "sql_query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
                "sql_query_result": {
                    "header": [
                        "Name",
                        "Birth_Date"
                    ],
                    "cell": [
                        [
                            "Aleksey Ostapenko",
                            "May 26, 1986"
                        ],
                        [
                            "Maksim Botin",
                            "July 14, 1983"
                        ],
                        [
                            "Roman Bragin",
                            "April 17, 1987"
                        ],
                        [
                            "Semen Poltavskiy",
                            "February 8, 1981"
                        ],
                        [
                            "Sergey Grankin",
                            "January 22, 1987"
                        ],
                        [
                            "Teodor Salparov",
                            "August 16, 1982"
                        ],
                        [
                            "Yevgeni Sivozhelez",
                            "August 8, 1986"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
                "sql_query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",
                "sql_query_result": {
                    "header": [
                        "Name",
                        "Birth_Date"
                    ],
                    "cell": [
                        [
                            "Aleksey Ostapenko",
                            "May 26, 1986"
                        ],
                        [
                            "Maksim Botin",
                            "July 14, 1983"
                        ],
                        [
                            "Roman Bragin",
                            "April 17, 1987"
                        ],
                        [
                            "Semen Poltavskiy",
                            "February 8, 1981"
                        ],
                        [
                            "Sergey Grankin",
                            "January 22, 1987"
                        ],
                        [
                            "Teodor Salparov",
                            "August 16, 1982"
                        ],
                        [
                            "Yevgeni Sivozhelez",
                            "August 8, 1986"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show names of people whose nationality is not \"Russia\".",
                "sql_query": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Teodor Salparov"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names of people who are not from Russia?",
                "sql_query": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Teodor Salparov"
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many distinct nationalities are there?",
                "sql_query": "SELECT count(DISTINCT Nationality) FROM people",
                "sql_query_result": {
                    "header": [
                        "count(DISTINCT Nationality)"
                    ],
                    "cell": [
                        [
                            2
                        ]
                    ]
                }
            },
            {
                "nl_query": "Count the number of different nationalities.",
                "sql_query": "SELECT count(DISTINCT Nationality) FROM people",
                "sql_query_result": {
                    "header": [
                        "count(DISTINCT Nationality)"
                    ],
                    "cell": [
                        [
                            2
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "bcee06f11467aa8bef1f51d03d4aa5b2664ae5c21b5d2dcaea86da14281ed3ef"
        ],
        "data_list": [
            {
                "nl_query": "How many states are there?",
                "sql_query": "SELECT count(*) FROM area_code_state",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            305
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the maximum and minimum values of area codes?",
                "sql_query": "SELECT max(area_code) ,  min(area_code) FROM area_code_state",
                "sql_query_result": {
                    "header": [
                        "max(area_code)",
                        "min(area_code)"
                    ],
                    "cell": [
                        [
                            989,
                            201
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "ae85037f32844e13c2f15caee8b2b21ab6d9a3f047c4e9be89571657c7519492"
        ],
        "data_list": [
            {
                "nl_query": "List the contestant numbers and names, ordered by contestant name descending.",
                "sql_query": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC",
                "sql_query_result": {
                    "header": [
                        "contestant_number",
                        "contestant_name"
                    ],
                    "cell": [
                        [
                            2,
                            "Tabatha Gehling"
                        ],
                        [
                            8,
                            "Nita Coster"
                        ],
                        [
                            11,
                            "Loraine NygrenTania Mattioli"
                        ],
                        [
                            9,
                            "Kurt Walser"
                        ],
                        [
                            3,
                            "Kelly Clauss"
                        ],
                        [
                            6,
                            "Jessie Eichman"
                        ],
                        [
                            4,
                            "Jessie Alloway"
                        ],
                        [
                            10,
                            "Ericka Dieter"
                        ],
                        [
                            1,
                            "Edwina Burnam"
                        ],
                        [
                            7,
                            "Allie Rogalski"
                        ],
                        [
                            5,
                            "Alana Bregman"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names of the contestants whose names are not 'Jessie Alloway'",
                "sql_query": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'",
                "sql_query_result": {
                    "header": [
                        "contestant_name"
                    ],
                    "cell": [
                        [
                            "Edwina Burnam"
                        ],
                        [
                            "Tabatha Gehling"
                        ],
                        [
                            "Kelly Clauss"
                        ],
                        [
                            "Alana Bregman"
                        ],
                        [
                            "Jessie Eichman"
                        ],
                        [
                            "Allie Rogalski"
                        ],
                        [
                            "Nita Coster"
                        ],
                        [
                            "Kurt Walser"
                        ],
                        [
                            "Ericka Dieter"
                        ],
                        [
                            "Loraine NygrenTania Mattioli"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "ee7428d7c25d67d47658ce717a1a1babb3a1774ce186c96ba9af29f7b1aac49a"
        ],
        "data_list": [
            {
                "nl_query": "List the vote ids, phone numbers and states of all votes.",
                "sql_query": "SELECT vote_id ,  phone_number ,  state FROM votes",
                "sql_query_result": {
                    "header": [
                        "vote_id",
                        "phone_number",
                        "state"
                    ],
                    "cell": [
                        [
                            1,
                            7182887233,
                            "NY"
                        ],
                        [
                            2,
                            7148407040,
                            "NY"
                        ],
                        [
                            3,
                            6209222712,
                            "CA"
                        ],
                        [
                            5,
                            5112677315,
                            "NJ\n"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is last date created of votes from the state 'CA'?",
                "sql_query": "SELECT max(created) FROM votes WHERE state  =  'CA'",
                "sql_query_result": {
                    "header": [
                        "max(created)"
                    ],
                    "cell": [
                        [
                            "2018-03-09 19:03:39"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the distinct states and create time of all votes?",
                "sql_query": "SELECT DISTINCT state ,  created FROM votes",
                "sql_query_result": {
                    "header": [
                        "state",
                        "created"
                    ],
                    "cell": [
                        [
                            "NY",
                            "2018-03-09 19:03:21"
                        ],
                        [
                            "NY",
                            "2018-03-09 19:03:36"
                        ],
                        [
                            "CA",
                            "2018-03-09 19:03:39"
                        ],
                        [
                            "NJ\n",
                            "2018-03-09 19:03:40"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the number of votes from state 'NY' or 'CA'?",
                "sql_query": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            3
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "ae85037f32844e13c2f15caee8b2b21ab6d9a3f047c4e9be89571657c7519492",
            "ee7428d7c25d67d47658ce717a1a1babb3a1774ce186c96ba9af29f7b1aac49a"
        ],
        "data_list": [
            {
                "nl_query": "What are the contestant numbers and names of the contestants who had at least two votes?",
                "sql_query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2",
                "sql_query_result": {
                    "header": [
                        "contestant_number",
                        "contestant_name"
                    ],
                    "cell": [
                        [
                            3,
                            "Kelly Clauss"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
                "sql_query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "contestant_number",
                        "contestant_name"
                    ],
                    "cell": [
                        [
                            2,
                            "Tabatha Gehling"
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many contestants did not get voted?",
                "sql_query": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            8
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
                "sql_query": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'",
                "sql_query_result": {
                    "header": [
                        "created",
                        "state",
                        "phone_number"
                    ],
                    "cell": [
                        [
                            "2018-03-09 19:03:21",
                            "NY",
                            7182887233
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "bcee06f11467aa8bef1f51d03d4aa5b2664ae5c21b5d2dcaea86da14281ed3ef",
            "ee7428d7c25d67d47658ce717a1a1babb3a1774ce186c96ba9af29f7b1aac49a"
        ],
        "data_list": [
            {
                "nl_query": "What is the area code in which the most voters voted?",
                "sql_query": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "area_code"
                    ],
                    "cell": [
                        [
                            212
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "ae85037f32844e13c2f15caee8b2b21ab6d9a3f047c4e9be89571657c7519492",
            "bcee06f11467aa8bef1f51d03d4aa5b2664ae5c21b5d2dcaea86da14281ed3ef",
            "ee7428d7c25d67d47658ce717a1a1babb3a1774ce186c96ba9af29f7b1aac49a"
        ],
        "data_list": [
            {
                "nl_query": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
                "sql_query": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'",
                "sql_query_result": {
                    "header": [
                        "area_code"
                    ],
                    "cell": [
                        [
                            212
                        ],
                        [
                            315
                        ],
                        [
                            347
                        ],
                        [
                            516
                        ],
                        [
                            518
                        ],
                        [
                            585
                        ],
                        [
                            607
                        ],
                        [
                            631
                        ],
                        [
                            646
                        ],
                        [
                            716
                        ],
                        [
                            718
                        ],
                        [
                            845
                        ],
                        [
                            914
                        ],
                        [
                            917
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "9891b8fcdfa8c0cecf0aaeb771d414f33086e461f3d943366e6713d15ba7d6b2"
        ],
        "data_list": [
            {
                "nl_query": "How many conductors are there?",
                "sql_query": "SELECT count(*) FROM conductor",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            12
                        ]
                    ]
                }
            },
            {
                "nl_query": "Count the number of conductors.",
                "sql_query": "SELECT count(*) FROM conductor",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            12
                        ]
                    ]
                }
            },
            {
                "nl_query": "List the names of conductors in ascending order of age.",
                "sql_query": "SELECT Name FROM conductor ORDER BY Age ASC",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Antal Dor\u00c3\u00a1ti"
                        ],
                        [
                            "Igor Stravinsky"
                        ],
                        [
                            "Colin Davis"
                        ],
                        [
                            "Michael Tilson Thomas"
                        ],
                        [
                            "Paul Jorgensen"
                        ],
                        [
                            "Antal Brown"
                        ],
                        [
                            "Charles Dutoit"
                        ],
                        [
                            "Seiji Ozawa"
                        ],
                        [
                            "Valeri Gergiev"
                        ],
                        [
                            "Pierre Boulez"
                        ],
                        [
                            "Gerard Schwarz"
                        ],
                        [
                            "Robert Craft"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names of conductors, ordered by age?",
                "sql_query": "SELECT Name FROM conductor ORDER BY Age ASC",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Antal Dor\u00c3\u00a1ti"
                        ],
                        [
                            "Igor Stravinsky"
                        ],
                        [
                            "Colin Davis"
                        ],
                        [
                            "Michael Tilson Thomas"
                        ],
                        [
                            "Paul Jorgensen"
                        ],
                        [
                            "Antal Brown"
                        ],
                        [
                            "Charles Dutoit"
                        ],
                        [
                            "Seiji Ozawa"
                        ],
                        [
                            "Valeri Gergiev"
                        ],
                        [
                            "Pierre Boulez"
                        ],
                        [
                            "Gerard Schwarz"
                        ],
                        [
                            "Robert Craft"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names of conductors whose nationalities are not \"USA\"?",
                "sql_query": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Igor Stravinsky"
                        ],
                        [
                            "Paul Jorgensen"
                        ],
                        [
                            "Charles Dutoit"
                        ],
                        [
                            "Pierre Boulez"
                        ],
                        [
                            "Robert Craft"
                        ],
                        [
                            "Michael Tilson Thomas"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Return the names of conductors that do not have the nationality \"USA\".",
                "sql_query": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Igor Stravinsky"
                        ],
                        [
                            "Paul Jorgensen"
                        ],
                        [
                            "Charles Dutoit"
                        ],
                        [
                            "Pierre Boulez"
                        ],
                        [
                            "Robert Craft"
                        ],
                        [
                            "Michael Tilson Thomas"
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many different nationalities do conductors have?",
                "sql_query": "SELECT count(DISTINCT Nationality) FROM conductor",
                "sql_query_result": {
                    "header": [
                        "count(DISTINCT Nationality)"
                    ],
                    "cell": [
                        [
                            3
                        ]
                    ]
                }
            },
            {
                "nl_query": "Count the number of different nationalities of conductors.",
                "sql_query": "SELECT count(DISTINCT Nationality) FROM conductor",
                "sql_query_result": {
                    "header": [
                        "count(DISTINCT Nationality)"
                    ],
                    "cell": [
                        [
                            3
                        ]
                    ]
                }
            },
            {
                "nl_query": "List names of conductors in descending order of years of work.",
                "sql_query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Robert Craft"
                        ],
                        [
                            "Antal Brown"
                        ],
                        [
                            "Gerard Schwarz"
                        ],
                        [
                            "Valeri Gergiev"
                        ],
                        [
                            "Charles Dutoit"
                        ],
                        [
                            "Michael Tilson Thomas"
                        ],
                        [
                            "Igor Stravinsky"
                        ],
                        [
                            "Paul Jorgensen"
                        ],
                        [
                            "Pierre Boulez"
                        ],
                        [
                            "Antal Dor\u00c3\u00a1ti"
                        ],
                        [
                            "Seiji Ozawa"
                        ],
                        [
                            "Colin Davis"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names of conductors, sorted descending by the number of years they have worked?",
                "sql_query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Robert Craft"
                        ],
                        [
                            "Antal Brown"
                        ],
                        [
                            "Gerard Schwarz"
                        ],
                        [
                            "Valeri Gergiev"
                        ],
                        [
                            "Charles Dutoit"
                        ],
                        [
                            "Michael Tilson Thomas"
                        ],
                        [
                            "Igor Stravinsky"
                        ],
                        [
                            "Paul Jorgensen"
                        ],
                        [
                            "Pierre Boulez"
                        ],
                        [
                            "Antal Dor\u00c3\u00a1ti"
                        ],
                        [
                            "Seiji Ozawa"
                        ],
                        [
                            "Colin Davis"
                        ]
                    ]
                }
            },
            {
                "nl_query": "List the name of the conductor with the most years of work.",
                "sql_query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Robert Craft"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the name of the conductor who has worked the greatest number of years?",
                "sql_query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Robert Craft"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "49936f63f1bac2c53dbb7250825a9ce0e8bc1b266a660b472e26325d70128952"
        ],
        "data_list": [
            {
                "nl_query": "What are the record companies of orchestras in descending order of years in which they were founded?",
                "sql_query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
                "sql_query_result": {
                    "header": [
                        "Record_Company"
                    ],
                    "cell": [
                        [
                            "Columbia Masterworks"
                        ],
                        [
                            "Philips"
                        ],
                        [
                            "Philips Classics Records"
                        ],
                        [
                            "RCA"
                        ],
                        [
                            "EMI"
                        ],
                        [
                            "Koch Records / Naxos Records"
                        ],
                        [
                            "Decca Records"
                        ],
                        [
                            "Mercury Records"
                        ],
                        [
                            "Deutsche Grammophon"
                        ],
                        [
                            "Kultur"
                        ],
                        [
                            "Delos Records"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
                "sql_query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
                "sql_query_result": {
                    "header": [
                        "Record_Company"
                    ],
                    "cell": [
                        [
                            "Columbia Masterworks"
                        ],
                        [
                            "Philips"
                        ],
                        [
                            "Philips Classics Records"
                        ],
                        [
                            "RCA"
                        ],
                        [
                            "EMI"
                        ],
                        [
                            "Koch Records / Naxos Records"
                        ],
                        [
                            "Decca Records"
                        ],
                        [
                            "Mercury Records"
                        ],
                        [
                            "Deutsche Grammophon"
                        ],
                        [
                            "Kultur"
                        ],
                        [
                            "Delos Records"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Please show the different record companies and the corresponding number of orchestras.",
                "sql_query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
                "sql_query_result": {
                    "header": [
                        "Record_Company",
                        "COUNT(*)"
                    ],
                    "cell": [
                        [
                            "Columbia Masterworks",
                            1
                        ],
                        [
                            "Decca Records",
                            2
                        ],
                        [
                            "Delos Records",
                            1
                        ],
                        [
                            "Deutsche Grammophon",
                            1
                        ],
                        [
                            "EMI",
                            1
                        ],
                        [
                            "Koch Records / Naxos Records",
                            1
                        ],
                        [
                            "Kultur",
                            1
                        ],
                        [
                            "Mercury Records",
                            1
                        ],
                        [
                            "Philips",
                            1
                        ],
                        [
                            "Philips Classics Records",
                            1
                        ],
                        [
                            "RCA",
                            1
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many orchestras does each record company manage?",
                "sql_query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",
                "sql_query_result": {
                    "header": [
                        "Record_Company",
                        "COUNT(*)"
                    ],
                    "cell": [
                        [
                            "Columbia Masterworks",
                            1
                        ],
                        [
                            "Decca Records",
                            2
                        ],
                        [
                            "Delos Records",
                            1
                        ],
                        [
                            "Deutsche Grammophon",
                            1
                        ],
                        [
                            "EMI",
                            1
                        ],
                        [
                            "Koch Records / Naxos Records",
                            1
                        ],
                        [
                            "Kultur",
                            1
                        ],
                        [
                            "Mercury Records",
                            1
                        ],
                        [
                            "Philips",
                            1
                        ],
                        [
                            "Philips Classics Records",
                            1
                        ],
                        [
                            "RCA",
                            1
                        ]
                    ]
                }
            },
            {
                "nl_query": "Please show the record formats of orchestras in ascending order of count.",
                "sql_query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
                "sql_query_result": {
                    "header": [
                        "Major_Record_Format"
                    ],
                    "cell": [
                        [
                            "CD / LP"
                        ],
                        [
                            "DVD"
                        ],
                        [
                            "CD"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the major record formats of orchestras, sorted by their frequency?",
                "sql_query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
                "sql_query_result": {
                    "header": [
                        "Major_Record_Format"
                    ],
                    "cell": [
                        [
                            "CD / LP"
                        ],
                        [
                            "DVD"
                        ],
                        [
                            "CD"
                        ]
                    ]
                }
            },
            {
                "nl_query": "List the record company shared by the most number of orchestras.",
                "sql_query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Record_Company"
                    ],
                    "cell": [
                        [
                            "Decca Records"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the record company used by the greatest number of orchestras?",
                "sql_query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Record_Company"
                    ],
                    "cell": [
                        [
                            "Decca Records"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
                "sql_query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
                "sql_query_result": {
                    "header": [
                        "Record_Company"
                    ],
                    "cell": [
                        [
                            "Decca Records"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
                "sql_query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003",
                "sql_query_result": {
                    "header": [
                        "Record_Company"
                    ],
                    "cell": [
                        [
                            "Decca Records"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
                "sql_query": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
                "sql_query_result": {
                    "header": [
                        "COUNT(*)"
                    ],
                    "cell": [
                        [
                            11
                        ]
                    ]
                }
            },
            {
                "nl_query": "Count the number of orchestras that have CD or DVD as their record format.",
                "sql_query": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"",
                "sql_query_result": {
                    "header": [
                        "COUNT(*)"
                    ],
                    "cell": [
                        [
                            11
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "28cfe5ceac8a2c97366735660bef4bf7ea7e78156bf0bc287d1e42ff1a3d0026"
        ],
        "data_list": [
            {
                "nl_query": "What is the average attendance of shows?",
                "sql_query": "SELECT avg(Attendance) FROM SHOW",
                "sql_query_result": {
                    "header": [
                        "avg(Attendance)"
                    ],
                    "cell": [
                        [
                            1326.4
                        ]
                    ]
                }
            },
            {
                "nl_query": "Return the average attendance across all shows.",
                "sql_query": "SELECT avg(Attendance) FROM SHOW",
                "sql_query_result": {
                    "header": [
                        "avg(Attendance)"
                    ],
                    "cell": [
                        [
                            1326.4
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "f5ece2210937cb5f8852e8b391c9b15c59f976bc77a9688016d09b29412cd220"
        ],
        "data_list": [
            {
                "nl_query": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
                "sql_query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
                "sql_query_result": {
                    "header": [
                        "max(SHARE)",
                        "min(SHARE)"
                    ],
                    "cell": [
                        [
                            "44.7%",
                            "22.7%"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
                "sql_query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"",
                "sql_query_result": {
                    "header": [
                        "max(SHARE)",
                        "min(SHARE)"
                    ],
                    "cell": [
                        [
                            "44.7%",
                            "22.7%"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "49936f63f1bac2c53dbb7250825a9ce0e8bc1b266a660b472e26325d70128952",
            "9891b8fcdfa8c0cecf0aaeb771d414f33086e461f3d943366e6713d15ba7d6b2"
        ],
        "data_list": [
            {
                "nl_query": "Show the names of conductors and the orchestras they have conducted.",
                "sql_query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
                "sql_query_result": {
                    "header": [
                        "Name",
                        "Orchestra"
                    ],
                    "cell": [
                        [
                            "Antal Dor\u00c3\u00a1ti",
                            "London Symphony Orchestra"
                        ],
                        [
                            "Igor Stravinsky",
                            "Columbia Symphony Orchestra"
                        ],
                        [
                            "Colin Davis",
                            "Royal Concertgebouw Orchestra"
                        ],
                        [
                            "Paul Jorgensen",
                            "Royal Danish Orchestra"
                        ],
                        [
                            "Antal Brown",
                            "Detroit Symphony Orchestra"
                        ],
                        [
                            "Charles Dutoit",
                            "Montreal Symphony Orchestra"
                        ],
                        [
                            "Gerard Schwarz",
                            "Seattle Symphony Orchestra"
                        ],
                        [
                            "Pierre Boulez",
                            "Chicago Symphony Orchestra"
                        ],
                        [
                            "Valeri Gergiev",
                            "Kirov Orchestra"
                        ],
                        [
                            "Robert Craft",
                            "Philharmonia Orchestra"
                        ],
                        [
                            "Seiji Ozawa",
                            "Orchestre de Paris"
                        ],
                        [
                            "Michael Tilson Thomas",
                            "San Francisco Symphony Orchestra"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
                "sql_query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",
                "sql_query_result": {
                    "header": [
                        "Name",
                        "Orchestra"
                    ],
                    "cell": [
                        [
                            "Antal Dor\u00c3\u00a1ti",
                            "London Symphony Orchestra"
                        ],
                        [
                            "Igor Stravinsky",
                            "Columbia Symphony Orchestra"
                        ],
                        [
                            "Colin Davis",
                            "Royal Concertgebouw Orchestra"
                        ],
                        [
                            "Paul Jorgensen",
                            "Royal Danish Orchestra"
                        ],
                        [
                            "Antal Brown",
                            "Detroit Symphony Orchestra"
                        ],
                        [
                            "Charles Dutoit",
                            "Montreal Symphony Orchestra"
                        ],
                        [
                            "Gerard Schwarz",
                            "Seattle Symphony Orchestra"
                        ],
                        [
                            "Pierre Boulez",
                            "Chicago Symphony Orchestra"
                        ],
                        [
                            "Valeri Gergiev",
                            "Kirov Orchestra"
                        ],
                        [
                            "Robert Craft",
                            "Philharmonia Orchestra"
                        ],
                        [
                            "Seiji Ozawa",
                            "Orchestre de Paris"
                        ],
                        [
                            "Michael Tilson Thomas",
                            "San Francisco Symphony Orchestra"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show the name of the conductor that has conducted the most number of orchestras.",
                "sql_query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Antal Dor\u00c3\u00a1ti"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the name of the conductor who has conducted the most orchestras?",
                "sql_query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Antal Dor\u00c3\u00a1ti"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
                "sql_query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Igor Stravinsky"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
                "sql_query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Igor Stravinsky"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "49936f63f1bac2c53dbb7250825a9ce0e8bc1b266a660b472e26325d70128952",
            "f5ece2210937cb5f8852e8b391c9b15c59f976bc77a9688016d09b29412cd220"
        ],
        "data_list": [
            {
                "nl_query": "List the names of orchestras that have no performance.",
                "sql_query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
                "sql_query_result": {
                    "header": [
                        "Orchestra"
                    ],
                    "cell": [
                        [
                            "San Francisco Symphony Orchestra"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the orchestras that do not have any performances?",
                "sql_query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
                "sql_query_result": {
                    "header": [
                        "Orchestra"
                    ],
                    "cell": [
                        [
                            "San Francisco Symphony Orchestra"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "bbcfa3fc19f2c193122ade52353fe6b2029c6919217fc1c21e5d87341ae02004"
        ],
        "data_list": [
            {
                "nl_query": "How many high schoolers are there?",
                "sql_query": "SELECT count(*) FROM Highschooler",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            16
                        ]
                    ]
                }
            },
            {
                "nl_query": "Count the number of high schoolers.",
                "sql_query": "SELECT count(*) FROM Highschooler",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            16
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show the names and grades of each high schooler.",
                "sql_query": "SELECT name ,  grade FROM Highschooler",
                "sql_query_result": {
                    "header": [
                        "name",
                        "grade"
                    ],
                    "cell": [
                        [
                            "Jordan",
                            9
                        ],
                        [
                            "Gabriel",
                            9
                        ],
                        [
                            "Tiffany",
                            9
                        ],
                        [
                            "Cassandra",
                            9
                        ],
                        [
                            "Haley",
                            10
                        ],
                        [
                            "Andrew",
                            10
                        ],
                        [
                            "Kris",
                            10
                        ],
                        [
                            "Brittany",
                            10
                        ],
                        [
                            "Alexis",
                            11
                        ],
                        [
                            "Austin",
                            11
                        ],
                        [
                            "Gabriel",
                            11
                        ],
                        [
                            "Jessica",
                            11
                        ],
                        [
                            "Jordan",
                            12
                        ],
                        [
                            "John",
                            12
                        ],
                        [
                            "Kyle",
                            12
                        ],
                        [
                            "Logan",
                            12
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names and grades for each high schooler?",
                "sql_query": "SELECT name ,  grade FROM Highschooler",
                "sql_query_result": {
                    "header": [
                        "name",
                        "grade"
                    ],
                    "cell": [
                        [
                            "Jordan",
                            9
                        ],
                        [
                            "Gabriel",
                            9
                        ],
                        [
                            "Tiffany",
                            9
                        ],
                        [
                            "Cassandra",
                            9
                        ],
                        [
                            "Haley",
                            10
                        ],
                        [
                            "Andrew",
                            10
                        ],
                        [
                            "Kris",
                            10
                        ],
                        [
                            "Brittany",
                            10
                        ],
                        [
                            "Alexis",
                            11
                        ],
                        [
                            "Austin",
                            11
                        ],
                        [
                            "Gabriel",
                            11
                        ],
                        [
                            "Jessica",
                            11
                        ],
                        [
                            "Jordan",
                            12
                        ],
                        [
                            "John",
                            12
                        ],
                        [
                            "Kyle",
                            12
                        ],
                        [
                            "Logan",
                            12
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show all the grades of the high schoolers.",
                "sql_query": "SELECT grade FROM Highschooler",
                "sql_query_result": {
                    "header": [
                        "grade"
                    ],
                    "cell": [
                        [
                            9
                        ],
                        [
                            10
                        ],
                        [
                            11
                        ],
                        [
                            12
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the grade of each high schooler?",
                "sql_query": "SELECT grade FROM Highschooler",
                "sql_query_result": {
                    "header": [
                        "grade"
                    ],
                    "cell": [
                        [
                            9
                        ],
                        [
                            10
                        ],
                        [
                            11
                        ],
                        [
                            12
                        ]
                    ]
                }
            },
            {
                "nl_query": "What grade is Kyle in?",
                "sql_query": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
                "sql_query_result": {
                    "header": [
                        "grade"
                    ],
                    "cell": [
                        [
                            12
                        ]
                    ]
                }
            },
            {
                "nl_query": "Return the grade for the high schooler named Kyle.",
                "sql_query": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"",
                "sql_query_result": {
                    "header": [
                        "grade"
                    ],
                    "cell": [
                        [
                            12
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show the names of all high schoolers in grade 10.",
                "sql_query": "SELECT name FROM Highschooler WHERE grade  =  10",
                "sql_query_result": {
                    "header": [
                        "name"
                    ],
                    "cell": [
                        [
                            "Haley"
                        ],
                        [
                            "Andrew"
                        ],
                        [
                            "Kris"
                        ],
                        [
                            "Brittany"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names of all high schoolers in grade 10?",
                "sql_query": "SELECT name FROM Highschooler WHERE grade  =  10",
                "sql_query_result": {
                    "header": [
                        "name"
                    ],
                    "cell": [
                        [
                            "Haley"
                        ],
                        [
                            "Andrew"
                        ],
                        [
                            "Kris"
                        ],
                        [
                            "Brittany"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show the ID of the high schooler named Kyle.",
                "sql_query": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
                "sql_query_result": {
                    "header": [
                        "ID"
                    ],
                    "cell": [
                        [
                            1934
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is Kyle's id?",
                "sql_query": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"",
                "sql_query_result": {
                    "header": [
                        "ID"
                    ],
                    "cell": [
                        [
                            1934
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many high schoolers are there in grade 9 or 10?",
                "sql_query": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            8
                        ]
                    ]
                }
            },
            {
                "nl_query": "Count the number of high schoolers in grades 9 or 10.",
                "sql_query": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            8
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show the number of high schoolers for each grade.",
                "sql_query": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
                "sql_query_result": {
                    "header": [
                        "grade",
                        "count(*)"
                    ],
                    "cell": [
                        [
                            9,
                            4
                        ],
                        [
                            10,
                            4
                        ],
                        [
                            11,
                            4
                        ],
                        [
                            12,
                            4
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many high schoolers are in each grade?",
                "sql_query": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
                "sql_query_result": {
                    "header": [
                        "grade",
                        "count(*)"
                    ],
                    "cell": [
                        [
                            9,
                            4
                        ],
                        [
                            10,
                            4
                        ],
                        [
                            11,
                            4
                        ],
                        [
                            12,
                            4
                        ]
                    ]
                }
            },
            {
                "nl_query": "Which grade has the most high schoolers?",
                "sql_query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "grade"
                    ],
                    "cell": [
                        [
                            9
                        ]
                    ]
                }
            },
            {
                "nl_query": "Return the grade that has the greatest number of high schoolers.",
                "sql_query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "grade"
                    ],
                    "cell": [
                        [
                            9
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show me all grades that have at least 4 students.",
                "sql_query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
                "sql_query_result": {
                    "header": [
                        "grade"
                    ],
                    "cell": [
                        [
                            9
                        ],
                        [
                            10
                        ],
                        [
                            11
                        ],
                        [
                            12
                        ]
                    ]
                }
            },
            {
                "nl_query": "Which grades have 4 or more high schoolers?",
                "sql_query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4",
                "sql_query_result": {
                    "header": [
                        "grade"
                    ],
                    "cell": [
                        [
                            9
                        ],
                        [
                            10
                        ],
                        [
                            11
                        ],
                        [
                            12
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "e0e74fcee0644673d65e682924c1c1441aaf01bb5911eb5a2750bcdaaed766ff"
        ],
        "data_list": [
            {
                "nl_query": "Show the student IDs and numbers of friends corresponding to each.",
                "sql_query": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
                "sql_query_result": {
                    "header": [
                        "student_id",
                        "count(*)"
                    ],
                    "cell": [
                        [
                            1101,
                            1
                        ],
                        [
                            1247,
                            2
                        ],
                        [
                            1304,
                            1
                        ],
                        [
                            1316,
                            1
                        ],
                        [
                            1381,
                            1
                        ],
                        [
                            1468,
                            2
                        ],
                        [
                            1501,
                            1
                        ],
                        [
                            1510,
                            2
                        ],
                        [
                            1661,
                            1
                        ],
                        [
                            1689,
                            2
                        ],
                        [
                            1709,
                            1
                        ],
                        [
                            1782,
                            3
                        ],
                        [
                            1911,
                            1
                        ],
                        [
                            1934,
                            1
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many friends does each student have?",
                "sql_query": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",
                "sql_query_result": {
                    "header": [
                        "student_id",
                        "count(*)"
                    ],
                    "cell": [
                        [
                            1101,
                            1
                        ],
                        [
                            1247,
                            2
                        ],
                        [
                            1304,
                            1
                        ],
                        [
                            1316,
                            1
                        ],
                        [
                            1381,
                            1
                        ],
                        [
                            1468,
                            2
                        ],
                        [
                            1501,
                            1
                        ],
                        [
                            1510,
                            2
                        ],
                        [
                            1661,
                            1
                        ],
                        [
                            1689,
                            2
                        ],
                        [
                            1709,
                            1
                        ],
                        [
                            1782,
                            3
                        ],
                        [
                            1911,
                            1
                        ],
                        [
                            1934,
                            1
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "bbcfa3fc19f2c193122ade52353fe6b2029c6919217fc1c21e5d87341ae02004",
            "e0e74fcee0644673d65e682924c1c1441aaf01bb5911eb5a2750bcdaaed766ff"
        ],
        "data_list": [
            {
                "nl_query": "Show the names of high school students and their corresponding number of friends.",
                "sql_query": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
                "sql_query_result": {
                    "header": [
                        "name",
                        "count(*)"
                    ],
                    "cell": [
                        [
                            "Haley",
                            1
                        ],
                        [
                            "Alexis",
                            2
                        ],
                        [
                            "Jordan",
                            1
                        ],
                        [
                            "Austin",
                            1
                        ],
                        [
                            "Tiffany",
                            1
                        ],
                        [
                            "Kris",
                            2
                        ],
                        [
                            "Jessica",
                            1
                        ],
                        [
                            "Jordan",
                            2
                        ],
                        [
                            "Logan",
                            1
                        ],
                        [
                            "Gabriel",
                            2
                        ],
                        [
                            "Cassandra",
                            1
                        ],
                        [
                            "Andrew",
                            3
                        ],
                        [
                            "Gabriel",
                            1
                        ],
                        [
                            "Kyle",
                            1
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names of the high schoolers and how many friends does each have?",
                "sql_query": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
                "sql_query_result": {
                    "header": [
                        "name",
                        "count(*)"
                    ],
                    "cell": [
                        [
                            "Haley",
                            1
                        ],
                        [
                            "Alexis",
                            2
                        ],
                        [
                            "Jordan",
                            1
                        ],
                        [
                            "Austin",
                            1
                        ],
                        [
                            "Tiffany",
                            1
                        ],
                        [
                            "Kris",
                            2
                        ],
                        [
                            "Jessica",
                            1
                        ],
                        [
                            "Jordan",
                            2
                        ],
                        [
                            "Logan",
                            1
                        ],
                        [
                            "Gabriel",
                            2
                        ],
                        [
                            "Cassandra",
                            1
                        ],
                        [
                            "Andrew",
                            3
                        ],
                        [
                            "Gabriel",
                            1
                        ],
                        [
                            "Kyle",
                            1
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the name of the high schooler who has the greatest number of friends?",
                "sql_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "name"
                    ],
                    "cell": [
                        [
                            "Andrew"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Return the name of the high school student with the most friends.",
                "sql_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "name"
                    ],
                    "cell": [
                        [
                            "Andrew"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show the names of high schoolers who have at least 3 friends.",
                "sql_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
                "sql_query_result": {
                    "header": [
                        "name"
                    ],
                    "cell": [
                        [
                            "Andrew"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names of high schoolers who have 3 or more friends?",
                "sql_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3",
                "sql_query_result": {
                    "header": [
                        "name"
                    ],
                    "cell": [
                        [
                            "Andrew"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show the names of all of the high schooler Kyle's friends.",
                "sql_query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
                "sql_query_result": {
                    "header": [
                        "name"
                    ],
                    "cell": [
                        [
                            "Jordan"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Return the names of friends of the high school student Kyle.",
                "sql_query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"",
                "sql_query_result": {
                    "header": [
                        "name"
                    ],
                    "cell": [
                        [
                            "Jordan"
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many friends does the high school student Kyle have?",
                "sql_query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            1
                        ]
                    ]
                }
            },
            {
                "nl_query": "Count the number of friends Kyle has.",
                "sql_query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            1
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show ids of all students who do not have any friends.",
                "sql_query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
                "sql_query_result": {
                    "header": [
                        "ID"
                    ],
                    "cell": [
                        [
                            1025
                        ],
                        [
                            1641
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the ids of high school students who do not have friends?",
                "sql_query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend",
                "sql_query_result": {
                    "header": [
                        "ID"
                    ],
                    "cell": [
                        [
                            1025
                        ],
                        [
                            1641
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show names of all high school students who do not have any friends.",
                "sql_query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
                "sql_query_result": {
                    "header": [
                        "name"
                    ],
                    "cell": [
                        [
                            "Brittany"
                        ],
                        [
                            "John"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names of students who have no friends?",
                "sql_query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id",
                "sql_query_result": {
                    "header": [
                        "name"
                    ],
                    "cell": [
                        [
                            "Brittany"
                        ],
                        [
                            "John"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
                "sql_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
                "sql_query_result": {
                    "header": [
                        "name"
                    ],
                    "cell": [
                        [
                            "Alexis"
                        ],
                        [
                            "Kris"
                        ],
                        [
                            "Jordan"
                        ],
                        [
                            "Gabriel"
                        ],
                        [
                            "Andrew"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
                "sql_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2",
                "sql_query_result": {
                    "header": [
                        "name"
                    ],
                    "cell": [
                        [
                            "Alexis"
                        ],
                        [
                            "Kris"
                        ],
                        [
                            "Jordan"
                        ],
                        [
                            "Gabriel"
                        ],
                        [
                            "Andrew"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the average grade of all students who have some friends.",
                "sql_query": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
                "sql_query_result": {
                    "header": [
                        "avg(grade)"
                    ],
                    "cell": [
                        [
                            10.4285714286
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the average grade of students who have friends?",
                "sql_query": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
                "sql_query_result": {
                    "header": [
                        "avg(grade)"
                    ],
                    "cell": [
                        [
                            10.4285714286
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the minimum grade of students who have no friends.",
                "sql_query": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
                "sql_query_result": {
                    "header": [
                        "min(grade)"
                    ],
                    "cell": [
                        [
                            10
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the lowest grade of students who do not have any friends?",
                "sql_query": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)",
                "sql_query_result": {
                    "header": [
                        "min(grade)"
                    ],
                    "cell": [
                        [
                            10
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "0b2518a86d7d340aae5689407d125893a6c9c1e276705691f88d0b79e759ced8",
            "e0e74fcee0644673d65e682924c1c1441aaf01bb5911eb5a2750bcdaaed766ff"
        ],
        "data_list": [
            {
                "nl_query": "Show the ids of high schoolers who have friends and are also liked by someone else.",
                "sql_query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
                "sql_query_result": {
                    "header": [
                        "student_id"
                    ],
                    "cell": [
                        [
                            1101
                        ],
                        [
                            1247
                        ],
                        [
                            1304
                        ],
                        [
                            1468
                        ],
                        [
                            1501
                        ],
                        [
                            1689
                        ],
                        [
                            1709
                        ],
                        [
                            1934
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the ids of students who both have friends and are liked?",
                "sql_query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes",
                "sql_query_result": {
                    "header": [
                        "student_id"
                    ],
                    "cell": [
                        [
                            1101
                        ],
                        [
                            1247
                        ],
                        [
                            1304
                        ],
                        [
                            1468
                        ],
                        [
                            1501
                        ],
                        [
                            1689
                        ],
                        [
                            1709
                        ],
                        [
                            1934
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "0b2518a86d7d340aae5689407d125893a6c9c1e276705691f88d0b79e759ced8",
            "bbcfa3fc19f2c193122ade52353fe6b2029c6919217fc1c21e5d87341ae02004",
            "e0e74fcee0644673d65e682924c1c1441aaf01bb5911eb5a2750bcdaaed766ff"
        ],
        "data_list": [
            {
                "nl_query": "Show name of all students who have some friends and also are liked by someone else.",
                "sql_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
                "sql_query_result": {
                    "header": [
                        "name"
                    ],
                    "cell": [
                        [
                            "Alexis"
                        ],
                        [
                            "Cassandra"
                        ],
                        [
                            "Gabriel"
                        ],
                        [
                            "Haley"
                        ],
                        [
                            "Jessica"
                        ],
                        [
                            "Jordan"
                        ],
                        [
                            "Kris"
                        ],
                        [
                            "Kyle"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names of high schoolers who both have friends and are liked?",
                "sql_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id",
                "sql_query_result": {
                    "header": [
                        "name"
                    ],
                    "cell": [
                        [
                            "Alexis"
                        ],
                        [
                            "Cassandra"
                        ],
                        [
                            "Gabriel"
                        ],
                        [
                            "Haley"
                        ],
                        [
                            "Jessica"
                        ],
                        [
                            "Jordan"
                        ],
                        [
                            "Kris"
                        ],
                        [
                            "Kyle"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "0b2518a86d7d340aae5689407d125893a6c9c1e276705691f88d0b79e759ced8"
        ],
        "data_list": [
            {
                "nl_query": "Count the number of likes for each student id.",
                "sql_query": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
                "sql_query_result": {
                    "header": [
                        "student_id",
                        "count(*)"
                    ],
                    "cell": [
                        [
                            1025,
                            1
                        ],
                        [
                            1247,
                            1
                        ],
                        [
                            1316,
                            1
                        ],
                        [
                            1501,
                            1
                        ],
                        [
                            1641,
                            1
                        ],
                        [
                            1689,
                            1
                        ],
                        [
                            1709,
                            1
                        ],
                        [
                            1782,
                            1
                        ],
                        [
                            1911,
                            1
                        ],
                        [
                            1934,
                            1
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many likes correspond to each student id?",
                "sql_query": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",
                "sql_query_result": {
                    "header": [
                        "student_id",
                        "count(*)"
                    ],
                    "cell": [
                        [
                            1025,
                            1
                        ],
                        [
                            1247,
                            1
                        ],
                        [
                            1316,
                            1
                        ],
                        [
                            1501,
                            1
                        ],
                        [
                            1641,
                            1
                        ],
                        [
                            1689,
                            1
                        ],
                        [
                            1709,
                            1
                        ],
                        [
                            1782,
                            1
                        ],
                        [
                            1911,
                            1
                        ],
                        [
                            1934,
                            1
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "0b2518a86d7d340aae5689407d125893a6c9c1e276705691f88d0b79e759ced8",
            "bbcfa3fc19f2c193122ade52353fe6b2029c6919217fc1c21e5d87341ae02004"
        ],
        "data_list": [
            {
                "nl_query": "Show the names of high schoolers who have likes, and numbers of likes for each.",
                "sql_query": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
                "sql_query_result": {
                    "header": [
                        "name",
                        "count(*)"
                    ],
                    "cell": [
                        [
                            "John",
                            1
                        ],
                        [
                            "Alexis",
                            1
                        ],
                        [
                            "Austin",
                            1
                        ],
                        [
                            "Jessica",
                            1
                        ],
                        [
                            "Brittany",
                            1
                        ],
                        [
                            "Gabriel",
                            1
                        ],
                        [
                            "Cassandra",
                            1
                        ],
                        [
                            "Andrew",
                            1
                        ],
                        [
                            "Kyle",
                            1
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names of high schoolers who have likes, and how many likes does each have?",
                "sql_query": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",
                "sql_query_result": {
                    "header": [
                        "name",
                        "count(*)"
                    ],
                    "cell": [
                        [
                            "John",
                            1
                        ],
                        [
                            "Alexis",
                            1
                        ],
                        [
                            "Austin",
                            1
                        ],
                        [
                            "Jessica",
                            1
                        ],
                        [
                            "Brittany",
                            1
                        ],
                        [
                            "Gabriel",
                            1
                        ],
                        [
                            "Cassandra",
                            1
                        ],
                        [
                            "Andrew",
                            1
                        ],
                        [
                            "Kyle",
                            1
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the name of the high schooler who has the greatest number of likes?",
                "sql_query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "name"
                    ],
                    "cell": [
                        [
                            "John"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Give the name of the student with the most likes.",
                "sql_query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "name"
                    ],
                    "cell": [
                        [
                            "John"
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many likes does Kyle have?",
                "sql_query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            1
                        ]
                    ]
                }
            },
            {
                "nl_query": "Return the number of likes that the high schooler named Kyle has.",
                "sql_query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            1
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "04e22f56f25090198f6463d516e334a692c1a6db1f2283977c1fcbb31fc6071f",
            "74746fb3901242ce558108a873e1483af0002e1d1fd67234d33a812d3bf0f47c"
        ],
        "data_list": [
            {
                "nl_query": "Which states have both owners and professionals living there?",
                "sql_query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
                "sql_query_result": {
                    "header": [
                        "state"
                    ],
                    "cell": [
                        [
                            "Indiana"
                        ],
                        [
                            "Mississippi"
                        ],
                        [
                            "Wisconsin"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the states where both owners and professionals live.",
                "sql_query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
                "sql_query_result": {
                    "header": [
                        "state"
                    ],
                    "cell": [
                        [
                            "Indiana"
                        ],
                        [
                            "Mississippi"
                        ],
                        [
                            "Wisconsin"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "98dc85b59cdb57e3322352e1aa4aa3878c3896ea090245baeacc507db7429359",
            "ee8df0e42237d7ffbcbd2e33b98b60b6615e7b7caced5dde5ed1adcf0cf59332"
        ],
        "data_list": [
            {
                "nl_query": "What is the average age of the dogs who have gone through any treatments?",
                "sql_query": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
                "sql_query_result": {
                    "header": [
                        "avg(age)"
                    ],
                    "cell": [
                        [
                            5.1111111111
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the average age of the dogs who went through treatments.",
                "sql_query": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )",
                "sql_query_result": {
                    "header": [
                        "avg(age)"
                    ],
                    "cell": [
                        [
                            5.1111111111
                        ]
                    ]
                }
            },
            {
                "nl_query": "List the names of the dogs of the rarest breed and the treatment dates of them.",
                "sql_query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
                "sql_query_result": {
                    "header": [
                        "name",
                        "date_of_treatment"
                    ],
                    "cell": [
                        [
                            "Lyric",
                            "2018-03-19 04:39:54"
                        ],
                        [
                            "Houston",
                            "2018-03-15 20:25:34"
                        ],
                        [
                            "Lyric",
                            "2018-03-08 05:26:23"
                        ],
                        [
                            "Lyric",
                            "2018-03-14 19:10:40"
                        ],
                        [
                            "Kacey",
                            "2018-03-15 19:10:02"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Which dogs are of the rarest breed? Show their names and treatment dates.",
                "sql_query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
                "sql_query_result": {
                    "header": [
                        "name",
                        "date_of_treatment"
                    ],
                    "cell": [
                        [
                            "Lyric",
                            "2018-03-19 04:39:54"
                        ],
                        [
                            "Houston",
                            "2018-03-15 20:25:34"
                        ],
                        [
                            "Lyric",
                            "2018-03-08 05:26:23"
                        ],
                        [
                            "Lyric",
                            "2018-03-14 19:10:40"
                        ],
                        [
                            "Kacey",
                            "2018-03-15 19:10:02"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
                "sql_query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
                "sql_query_result": {
                    "header": [
                        "date_arrived",
                        "date_departed"
                    ],
                    "cell": [
                        [
                            "2017-06-18 19:45:38",
                            "2018-03-24 23:48:59"
                        ],
                        [
                            "2017-04-20 00:58:55",
                            "2018-03-24 19:12:22"
                        ],
                        [
                            "2017-12-22 05:02:02",
                            "2018-03-25 02:11:32"
                        ],
                        [
                            "2017-10-24 04:45:13",
                            "2018-03-25 14:15:41"
                        ],
                        [
                            "2017-12-29 06:08:26",
                            "2018-03-25 04:42:14"
                        ],
                        [
                            "2017-12-29 23:24:13",
                            "2018-03-24 19:36:59"
                        ],
                        [
                            "2018-01-02 03:15:29",
                            "2018-03-25 05:07:47"
                        ],
                        [
                            "2017-05-06 08:03:52",
                            "2018-03-25 06:29:10"
                        ],
                        [
                            "2017-09-08 20:10:13",
                            "2018-03-25 06:58:44"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the arriving date and the departing date of the dogs that received a treatment.",
                "sql_query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",
                "sql_query_result": {
                    "header": [
                        "date_arrived",
                        "date_departed"
                    ],
                    "cell": [
                        [
                            "2017-06-18 19:45:38",
                            "2018-03-24 23:48:59"
                        ],
                        [
                            "2017-04-20 00:58:55",
                            "2018-03-24 19:12:22"
                        ],
                        [
                            "2017-12-22 05:02:02",
                            "2018-03-25 02:11:32"
                        ],
                        [
                            "2017-10-24 04:45:13",
                            "2018-03-25 14:15:41"
                        ],
                        [
                            "2017-12-29 06:08:26",
                            "2018-03-25 04:42:14"
                        ],
                        [
                            "2017-12-29 23:24:13",
                            "2018-03-24 19:36:59"
                        ],
                        [
                            "2018-01-02 03:15:29",
                            "2018-03-25 05:07:47"
                        ],
                        [
                            "2017-05-06 08:03:52",
                            "2018-03-25 06:29:10"
                        ],
                        [
                            "2017-09-08 20:10:13",
                            "2018-03-25 06:58:44"
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many dogs have not gone through any treatment?",
                "sql_query": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            6
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "04e22f56f25090198f6463d516e334a692c1a6db1f2283977c1fcbb31fc6071f",
            "98dc85b59cdb57e3322352e1aa4aa3878c3896ea090245baeacc507db7429359"
        ],
        "data_list": [
            {
                "nl_query": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
                "sql_query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
                "sql_query_result": {
                    "header": [
                        "professional_id",
                        "last_name",
                        "cell_number"
                    ],
                    "cell": [
                        [
                            1,
                            "Braun",
                            "(275)939-2435x80863"
                        ],
                        [
                            8,
                            "Hyatt",
                            "328.842.3792"
                        ],
                        [
                            9,
                            "Kshlerin",
                            "962-983-8109x3509"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
                "sql_query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2",
                "sql_query_result": {
                    "header": [
                        "professional_id",
                        "last_name",
                        "cell_number"
                    ],
                    "cell": [
                        [
                            1,
                            "Braun",
                            "(275)939-2435x80863"
                        ],
                        [
                            8,
                            "Hyatt",
                            "328.842.3792"
                        ],
                        [
                            9,
                            "Kshlerin",
                            "962-983-8109x3509"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
                "sql_query": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
                "sql_query_result": {
                    "header": [
                        "professional_id",
                        "role_code",
                        "email_address"
                    ],
                    "cell": [
                        [
                            1,
                            "Employee",
                            "deanna.schuster@example.com"
                        ],
                        [
                            2,
                            "Employee",
                            "lucile.shanahan@example.org"
                        ],
                        [
                            3,
                            "Employee",
                            "uboehm@example.org"
                        ],
                        [
                            11,
                            "Employee",
                            "west.eula@example.net"
                        ],
                        [
                            12,
                            "Veterenarian",
                            "marquardt.furman@example.org"
                        ],
                        [
                            13,
                            "Veterenarian",
                            "delphine29@example.com"
                        ],
                        [
                            15,
                            "Employee",
                            "jeichmann@example.com"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
                "sql_query": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id",
                "sql_query_result": {
                    "header": [
                        "professional_id",
                        "role_code",
                        "email_address"
                    ],
                    "cell": [
                        [
                            1,
                            "Employee",
                            "deanna.schuster@example.com"
                        ],
                        [
                            2,
                            "Employee",
                            "lucile.shanahan@example.org"
                        ],
                        [
                            3,
                            "Employee",
                            "uboehm@example.org"
                        ],
                        [
                            11,
                            "Employee",
                            "west.eula@example.net"
                        ],
                        [
                            12,
                            "Veterenarian",
                            "marquardt.furman@example.org"
                        ],
                        [
                            13,
                            "Veterenarian",
                            "delphine29@example.com"
                        ],
                        [
                            15,
                            "Employee",
                            "jeichmann@example.com"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
                "sql_query": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
                "sql_query_result": {
                    "header": [
                        "professional_id",
                        "role_code",
                        "first_name"
                    ],
                    "cell": [
                        [
                            4,
                            "Veterenarian",
                            "Vernice"
                        ],
                        [
                            6,
                            "Veterenarian",
                            "Ruben"
                        ],
                        [
                            8,
                            "Employee",
                            "Karley"
                        ],
                        [
                            9,
                            "Veterenarian",
                            "Monte"
                        ],
                        [
                            10,
                            "Employee",
                            "Domenica"
                        ],
                        [
                            14,
                            "Employee",
                            "Sigurd"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
                "sql_query": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
                "sql_query_result": {
                    "header": [
                        "professional_id",
                        "role_code",
                        "first_name"
                    ],
                    "cell": [
                        [
                            4,
                            "Veterenarian",
                            "Vernice"
                        ],
                        [
                            6,
                            "Veterenarian",
                            "Ruben"
                        ],
                        [
                            8,
                            "Employee",
                            "Karley"
                        ],
                        [
                            9,
                            "Veterenarian",
                            "Monte"
                        ],
                        [
                            10,
                            "Employee",
                            "Domenica"
                        ],
                        [
                            14,
                            "Employee",
                            "Sigurd"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
                "sql_query": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
                "sql_query_result": {
                    "header": [
                        "professional_id",
                        "cell_number"
                    ],
                    "cell": [
                        [
                            4,
                            "00230569697"
                        ],
                        [
                            6,
                            "139-321-7313"
                        ],
                        [
                            8,
                            "328.842.3792"
                        ],
                        [
                            9,
                            "962-983-8109x3509"
                        ],
                        [
                            10,
                            "461-801-2600"
                        ],
                        [
                            14,
                            "1-185-137-1945x409"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
                "sql_query": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",
                "sql_query_result": {
                    "header": [
                        "professional_id",
                        "cell_number"
                    ],
                    "cell": [
                        [
                            4,
                            "00230569697"
                        ],
                        [
                            6,
                            "139-321-7313"
                        ],
                        [
                            8,
                            "328.842.3792"
                        ],
                        [
                            9,
                            "962-983-8109x3509"
                        ],
                        [
                            10,
                            "461-801-2600"
                        ],
                        [
                            14,
                            "1-185-137-1945x409"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the first name and last name of the professionals who have done treatment with cost below average?",
                "sql_query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
                "sql_query_result": {
                    "header": [
                        "first_name",
                        "last_name"
                    ],
                    "cell": [
                        [
                            "Taryn",
                            "Braun"
                        ],
                        [
                            "Jayson",
                            "Ullrich"
                        ],
                        [
                            "Olaf",
                            "Watsica"
                        ],
                        [
                            "Vernice",
                            "Tillman"
                        ],
                        [
                            "Danny",
                            "Considine"
                        ],
                        [
                            "Ruben",
                            "O'Reilly"
                        ],
                        [
                            "Velva",
                            "Hayes"
                        ],
                        [
                            "Karley",
                            "Hyatt"
                        ],
                        [
                            "Monte",
                            "Kshlerin"
                        ],
                        [
                            "Domenica",
                            "Jacobs"
                        ],
                        [
                            "Brady",
                            "Pouros"
                        ],
                        [
                            "Winfield",
                            "Christiansen"
                        ],
                        [
                            "Ericka",
                            "Murazik"
                        ],
                        [
                            "Sigurd",
                            "Frami"
                        ],
                        [
                            "Lesly",
                            "Walter"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
                "sql_query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",
                "sql_query_result": {
                    "header": [
                        "first_name",
                        "last_name"
                    ],
                    "cell": [
                        [
                            "Taryn",
                            "Braun"
                        ],
                        [
                            "Jayson",
                            "Ullrich"
                        ],
                        [
                            "Olaf",
                            "Watsica"
                        ],
                        [
                            "Vernice",
                            "Tillman"
                        ],
                        [
                            "Danny",
                            "Considine"
                        ],
                        [
                            "Ruben",
                            "O'Reilly"
                        ],
                        [
                            "Velva",
                            "Hayes"
                        ],
                        [
                            "Karley",
                            "Hyatt"
                        ],
                        [
                            "Monte",
                            "Kshlerin"
                        ],
                        [
                            "Domenica",
                            "Jacobs"
                        ],
                        [
                            "Brady",
                            "Pouros"
                        ],
                        [
                            "Winfield",
                            "Christiansen"
                        ],
                        [
                            "Ericka",
                            "Murazik"
                        ],
                        [
                            "Sigurd",
                            "Frami"
                        ],
                        [
                            "Lesly",
                            "Walter"
                        ]
                    ]
                }
            },
            {
                "nl_query": "List the date of each treatment, together with the first name of the professional who operated it.",
                "sql_query": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
                "sql_query_result": {
                    "header": [
                        "date_of_treatment",
                        "first_name"
                    ],
                    "cell": [
                        [
                            "2018-03-19 04:39:54",
                            "Monte"
                        ],
                        [
                            "2018-03-15 20:25:34",
                            "Domenica"
                        ],
                        [
                            "2018-03-08 05:26:23",
                            "Vernice"
                        ],
                        [
                            "2018-03-01 04:14:46",
                            "Karley"
                        ],
                        [
                            "2018-03-23 13:52:10",
                            "Sigurd"
                        ],
                        [
                            "2018-03-11 04:23:15",
                            "Vernice"
                        ],
                        [
                            "2018-03-10 11:45:58",
                            "Sigurd"
                        ],
                        [
                            "2018-03-24 22:25:58",
                            "Ruben"
                        ],
                        [
                            "2018-03-14 19:10:40",
                            "Domenica"
                        ],
                        [
                            "2018-02-28 17:09:43",
                            "Velva"
                        ],
                        [
                            "2018-03-13 12:22:58",
                            "Danny"
                        ],
                        [
                            "2018-03-16 10:27:36",
                            "Monte"
                        ],
                        [
                            "2018-02-26 09:08:53",
                            "Karley"
                        ],
                        [
                            "2018-03-04 20:33:43",
                            "Monte"
                        ],
                        [
                            "2018-03-15 19:10:02",
                            "Ruben"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the date and the operating professional's first name of each treatment?",
                "sql_query": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",
                "sql_query_result": {
                    "header": [
                        "date_of_treatment",
                        "first_name"
                    ],
                    "cell": [
                        [
                            "2018-03-19 04:39:54",
                            "Monte"
                        ],
                        [
                            "2018-03-15 20:25:34",
                            "Domenica"
                        ],
                        [
                            "2018-03-08 05:26:23",
                            "Vernice"
                        ],
                        [
                            "2018-03-01 04:14:46",
                            "Karley"
                        ],
                        [
                            "2018-03-23 13:52:10",
                            "Sigurd"
                        ],
                        [
                            "2018-03-11 04:23:15",
                            "Vernice"
                        ],
                        [
                            "2018-03-10 11:45:58",
                            "Sigurd"
                        ],
                        [
                            "2018-03-24 22:25:58",
                            "Ruben"
                        ],
                        [
                            "2018-03-14 19:10:40",
                            "Domenica"
                        ],
                        [
                            "2018-02-28 17:09:43",
                            "Velva"
                        ],
                        [
                            "2018-03-13 12:22:58",
                            "Danny"
                        ],
                        [
                            "2018-03-16 10:27:36",
                            "Monte"
                        ],
                        [
                            "2018-02-26 09:08:53",
                            "Karley"
                        ],
                        [
                            "2018-03-04 20:33:43",
                            "Monte"
                        ],
                        [
                            "2018-03-15 19:10:02",
                            "Ruben"
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many professionals did not operate any treatment on dogs?",
                "sql_query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            7
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the number of professionals who have not treated any dogs.",
                "sql_query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            7
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "04e22f56f25090198f6463d516e334a692c1a6db1f2283977c1fcbb31fc6071f",
            "74746fb3901242ce558108a873e1483af0002e1d1fd67234d33a812d3bf0f47c",
            "ee8df0e42237d7ffbcbd2e33b98b60b6615e7b7caced5dde5ed1adcf0cf59332"
        ],
        "data_list": [
            {
                "nl_query": "Which first names are used for professionals or owners but are not used as dog names?",
                "sql_query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
                "sql_query_result": {
                    "header": [
                        "first_name"
                    ],
                    "cell": [
                        [
                            "Adelle"
                        ],
                        [
                            "Brady"
                        ],
                        [
                            "Cindy"
                        ],
                        [
                            "Danny"
                        ],
                        [
                            "Domenica"
                        ],
                        [
                            "Emelie"
                        ],
                        [
                            "Ericka"
                        ],
                        [
                            "Gay"
                        ],
                        [
                            "Heather"
                        ],
                        [
                            "Jaclyn"
                        ],
                        [
                            "Jayson"
                        ],
                        [
                            "Johann"
                        ],
                        [
                            "Kade"
                        ],
                        [
                            "Karley"
                        ],
                        [
                            "Lesly"
                        ],
                        [
                            "Lorenz"
                        ],
                        [
                            "Melisa"
                        ],
                        [
                            "Monte"
                        ],
                        [
                            "Nora"
                        ],
                        [
                            "Olaf"
                        ],
                        [
                            "Orlando"
                        ],
                        [
                            "Rachelle"
                        ],
                        [
                            "Rolando"
                        ],
                        [
                            "Ruben"
                        ],
                        [
                            "Sigurd"
                        ],
                        [
                            "Taryn"
                        ],
                        [
                            "Tre"
                        ],
                        [
                            "Velva"
                        ],
                        [
                            "Vernice"
                        ],
                        [
                            "Winfield"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the first names that are used for professionals or owners but are not used as dog names.",
                "sql_query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
                "sql_query_result": {
                    "header": [
                        "first_name"
                    ],
                    "cell": [
                        [
                            "Adelle"
                        ],
                        [
                            "Brady"
                        ],
                        [
                            "Cindy"
                        ],
                        [
                            "Danny"
                        ],
                        [
                            "Domenica"
                        ],
                        [
                            "Emelie"
                        ],
                        [
                            "Ericka"
                        ],
                        [
                            "Gay"
                        ],
                        [
                            "Heather"
                        ],
                        [
                            "Jaclyn"
                        ],
                        [
                            "Jayson"
                        ],
                        [
                            "Johann"
                        ],
                        [
                            "Kade"
                        ],
                        [
                            "Karley"
                        ],
                        [
                            "Lesly"
                        ],
                        [
                            "Lorenz"
                        ],
                        [
                            "Melisa"
                        ],
                        [
                            "Monte"
                        ],
                        [
                            "Nora"
                        ],
                        [
                            "Olaf"
                        ],
                        [
                            "Orlando"
                        ],
                        [
                            "Rachelle"
                        ],
                        [
                            "Rolando"
                        ],
                        [
                            "Ruben"
                        ],
                        [
                            "Sigurd"
                        ],
                        [
                            "Taryn"
                        ],
                        [
                            "Tre"
                        ],
                        [
                            "Velva"
                        ],
                        [
                            "Vernice"
                        ],
                        [
                            "Winfield"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "74746fb3901242ce558108a873e1483af0002e1d1fd67234d33a812d3bf0f47c",
            "ee8df0e42237d7ffbcbd2e33b98b60b6615e7b7caced5dde5ed1adcf0cf59332"
        ],
        "data_list": [
            {
                "nl_query": "Which owner owns the most dogs? List the owner id, first name and last name.",
                "sql_query": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "owner_id",
                        "first_name",
                        "last_name"
                    ],
                    "cell": [
                        [
                            14,
                            "Rachelle",
                            "Funk"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Return the owner id, first name and last name of the owner who has the most dogs.",
                "sql_query": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "owner_id",
                        "first_name",
                        "last_name"
                    ],
                    "cell": [
                        [
                            14,
                            "Rachelle",
                            "Funk"
                        ]
                    ]
                }
            },
            {
                "nl_query": "List each owner's first name, last name, and the size of his for her dog.",
                "sql_query": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
                "sql_query_result": {
                    "header": [
                        "first_name",
                        "last_name",
                        "size_code"
                    ],
                    "cell": [
                        [
                            "Jaclyn",
                            "Stoltenberg",
                            "LGE"
                        ],
                        [
                            "Gay",
                            "Feil",
                            "LGE"
                        ],
                        [
                            "Nora",
                            "Haley",
                            "MED"
                        ],
                        [
                            "Rachelle",
                            "Funk",
                            "LGE"
                        ],
                        [
                            "Emelie",
                            "Mertz",
                            "MED"
                        ],
                        [
                            "Johann",
                            "Fisher",
                            "MED"
                        ],
                        [
                            "Jaclyn",
                            "Stoltenberg",
                            "MED"
                        ],
                        [
                            "Rachelle",
                            "Funk",
                            "SML"
                        ],
                        [
                            "Melisa",
                            "DuBuque",
                            "MED"
                        ],
                        [
                            "Kade",
                            "Rippin",
                            "MED"
                        ],
                        [
                            "Cindy",
                            "Schmitt",
                            "LGE"
                        ],
                        [
                            "Orlando",
                            "Price",
                            "MED"
                        ],
                        [
                            "Rolando",
                            "Prohaska",
                            "SML"
                        ],
                        [
                            "Rachelle",
                            "Funk",
                            "MED"
                        ],
                        [
                            "Lorenz",
                            "Nicolas",
                            "MED"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are each owner's first name, last name, and the size of their dog?",
                "sql_query": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
                "sql_query_result": {
                    "header": [
                        "first_name",
                        "last_name",
                        "size_code"
                    ],
                    "cell": [
                        [
                            "Jaclyn",
                            "Stoltenberg",
                            "LGE"
                        ],
                        [
                            "Gay",
                            "Feil",
                            "LGE"
                        ],
                        [
                            "Nora",
                            "Haley",
                            "MED"
                        ],
                        [
                            "Rachelle",
                            "Funk",
                            "LGE"
                        ],
                        [
                            "Emelie",
                            "Mertz",
                            "MED"
                        ],
                        [
                            "Johann",
                            "Fisher",
                            "MED"
                        ],
                        [
                            "Jaclyn",
                            "Stoltenberg",
                            "MED"
                        ],
                        [
                            "Rachelle",
                            "Funk",
                            "SML"
                        ],
                        [
                            "Melisa",
                            "DuBuque",
                            "MED"
                        ],
                        [
                            "Kade",
                            "Rippin",
                            "MED"
                        ],
                        [
                            "Cindy",
                            "Schmitt",
                            "LGE"
                        ],
                        [
                            "Orlando",
                            "Price",
                            "MED"
                        ],
                        [
                            "Rolando",
                            "Prohaska",
                            "SML"
                        ],
                        [
                            "Rachelle",
                            "Funk",
                            "MED"
                        ],
                        [
                            "Lorenz",
                            "Nicolas",
                            "MED"
                        ]
                    ]
                }
            },
            {
                "nl_query": "List pairs of the owner's first name and the dogs's name.",
                "sql_query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
                "sql_query_result": {
                    "header": [
                        "first_name",
                        "name"
                    ],
                    "cell": [
                        [
                            "Jaclyn",
                            "Kacey"
                        ],
                        [
                            "Gay",
                            "Hipolito"
                        ],
                        [
                            "Nora",
                            "Mavis"
                        ],
                        [
                            "Rachelle",
                            "Houston"
                        ],
                        [
                            "Emelie",
                            "Jeffrey"
                        ],
                        [
                            "Johann",
                            "Merritt"
                        ],
                        [
                            "Jaclyn",
                            "Narciso"
                        ],
                        [
                            "Rachelle",
                            "George"
                        ],
                        [
                            "Melisa",
                            "Bessie"
                        ],
                        [
                            "Kade",
                            "Troy"
                        ],
                        [
                            "Cindy",
                            "Betty"
                        ],
                        [
                            "Orlando",
                            "Holden"
                        ],
                        [
                            "Rolando",
                            "Jesus"
                        ],
                        [
                            "Rachelle",
                            "Lyric"
                        ],
                        [
                            "Lorenz",
                            "Evangeline"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are each owner's first name and their dogs's name?",
                "sql_query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",
                "sql_query_result": {
                    "header": [
                        "first_name",
                        "name"
                    ],
                    "cell": [
                        [
                            "Jaclyn",
                            "Kacey"
                        ],
                        [
                            "Gay",
                            "Hipolito"
                        ],
                        [
                            "Nora",
                            "Mavis"
                        ],
                        [
                            "Rachelle",
                            "Houston"
                        ],
                        [
                            "Emelie",
                            "Jeffrey"
                        ],
                        [
                            "Johann",
                            "Merritt"
                        ],
                        [
                            "Jaclyn",
                            "Narciso"
                        ],
                        [
                            "Rachelle",
                            "George"
                        ],
                        [
                            "Melisa",
                            "Bessie"
                        ],
                        [
                            "Kade",
                            "Troy"
                        ],
                        [
                            "Cindy",
                            "Betty"
                        ],
                        [
                            "Orlando",
                            "Holden"
                        ],
                        [
                            "Rolando",
                            "Jesus"
                        ],
                        [
                            "Rachelle",
                            "Lyric"
                        ],
                        [
                            "Lorenz",
                            "Evangeline"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
                "sql_query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
                "sql_query_result": {
                    "header": [
                        "first_name",
                        "name"
                    ],
                    "cell": [
                        [
                            "Melisa",
                            "Bessie"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the first names of owners living in Virginia and the names of dogs they own.",
                "sql_query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",
                "sql_query_result": {
                    "header": [
                        "first_name",
                        "name"
                    ],
                    "cell": [
                        [
                            "Melisa",
                            "Bessie"
                        ]
                    ]
                }
            },
            {
                "nl_query": "List the last name of the owner owning the youngest dog.",
                "sql_query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
                "sql_query_result": {
                    "header": [
                        "last_name"
                    ],
                    "cell": [
                        [
                            "Feil"
                        ],
                        [
                            "Fisher"
                        ],
                        [
                            "Rippin"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Who owns the youngest dog? Give me his or her last name.",
                "sql_query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )",
                "sql_query_result": {
                    "header": [
                        "last_name"
                    ],
                    "cell": [
                        [
                            "Feil"
                        ],
                        [
                            "Fisher"
                        ],
                        [
                            "Rippin"
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many owners temporarily do not have any dogs?",
                "sql_query": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            3
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the number of owners who do not own any dogs at this moment.",
                "sql_query": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            3
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "c50ec7aaa98e95cb9a45aacfca889f4973e7e4afaa12b97e74aba4b9c63067c4",
            "ee8df0e42237d7ffbcbd2e33b98b60b6615e7b7caced5dde5ed1adcf0cf59332"
        ],
        "data_list": [
            {
                "nl_query": "What is the name of the breed with the most dogs?",
                "sql_query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "breed_name"
                    ],
                    "cell": [
                        [
                            "Bulldog"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Which breed do the most dogs have? Give me the breed name.",
                "sql_query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "breed_name"
                    ],
                    "cell": [
                        [
                            "Bulldog"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "74746fb3901242ce558108a873e1483af0002e1d1fd67234d33a812d3bf0f47c",
            "98dc85b59cdb57e3322352e1aa4aa3878c3896ea090245baeacc507db7429359",
            "ee8df0e42237d7ffbcbd2e33b98b60b6615e7b7caced5dde5ed1adcf0cf59332"
        ],
        "data_list": [
            {
                "nl_query": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
                "sql_query": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "owner_id",
                        "last_name"
                    ],
                    "cell": [
                        [
                            14,
                            "Funk"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
                "sql_query": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "owner_id",
                        "last_name"
                    ],
                    "cell": [
                        [
                            14,
                            "Funk"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
                "sql_query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "owner_id",
                        "zip_code"
                    ],
                    "cell": [
                        [
                            3,
                            "02647"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
                "sql_query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "owner_id",
                        "zip_code"
                    ],
                    "cell": [
                        [
                            3,
                            "02647"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "53359685d0c41d5a548510a3c64b70d593e2b601132274334646c5a507a641ef",
            "98dc85b59cdb57e3322352e1aa4aa3878c3896ea090245baeacc507db7429359"
        ],
        "data_list": [
            {
                "nl_query": "What is the description of the treatment type that costs the least money in total?",
                "sql_query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "treatment_type_description"
                    ],
                    "cell": [
                        [
                            "Take for a Walk"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Give me the description of the treatment type whose total cost is the lowest.",
                "sql_query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "treatment_type_description"
                    ],
                    "cell": [
                        [
                            "Take for a Walk"
                        ]
                    ]
                }
            },
            {
                "nl_query": "List the cost of each treatment and the corresponding treatment type description.",
                "sql_query": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
                "sql_query_result": {
                    "header": [
                        "cost_of_treatment",
                        "treatment_type_description"
                    ],
                    "cell": [
                        [
                            567,
                            "Take for a Walk"
                        ],
                        [
                            147,
                            "Vaccination"
                        ],
                        [
                            429,
                            "Physical examination"
                        ],
                        [
                            266,
                            "Vaccination"
                        ],
                        [
                            668,
                            "Vaccination"
                        ],
                        [
                            313,
                            "Physical examination"
                        ],
                        [
                            852,
                            "Physical examination"
                        ],
                        [
                            407,
                            "Physical examination"
                        ],
                        [
                            139,
                            "Take for a Walk"
                        ],
                        [
                            681,
                            "Take for a Walk"
                        ],
                        [
                            514,
                            "Vaccination"
                        ],
                        [
                            428,
                            "Physical examination"
                        ],
                        [
                            945,
                            "Vaccination"
                        ],
                        [
                            349,
                            "Take for a Walk"
                        ],
                        [
                            656,
                            "Take for a Walk"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the cost and treatment type description of each treatment?",
                "sql_query": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
                "sql_query_result": {
                    "header": [
                        "cost_of_treatment",
                        "treatment_type_description"
                    ],
                    "cell": [
                        [
                            567,
                            "Take for a Walk"
                        ],
                        [
                            147,
                            "Vaccination"
                        ],
                        [
                            429,
                            "Physical examination"
                        ],
                        [
                            266,
                            "Vaccination"
                        ],
                        [
                            668,
                            "Vaccination"
                        ],
                        [
                            313,
                            "Physical examination"
                        ],
                        [
                            852,
                            "Physical examination"
                        ],
                        [
                            407,
                            "Physical examination"
                        ],
                        [
                            139,
                            "Take for a Walk"
                        ],
                        [
                            681,
                            "Take for a Walk"
                        ],
                        [
                            514,
                            "Vaccination"
                        ],
                        [
                            428,
                            "Physical examination"
                        ],
                        [
                            945,
                            "Vaccination"
                        ],
                        [
                            349,
                            "Take for a Walk"
                        ],
                        [
                            656,
                            "Take for a Walk"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "04e22f56f25090198f6463d516e334a692c1a6db1f2283977c1fcbb31fc6071f"
        ],
        "data_list": [
            {
                "nl_query": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
                "sql_query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
                "sql_query_result": {
                    "header": [
                        "email_address"
                    ],
                    "cell": [
                        [
                            "uboehm@example.org"
                        ],
                        [
                            "mekhi.little@example.org"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
                "sql_query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'",
                "sql_query_result": {
                    "header": [
                        "email_address"
                    ],
                    "cell": [
                        [
                            "uboehm@example.org"
                        ],
                        [
                            "mekhi.little@example.org"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
                "sql_query": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
                "sql_query_result": {
                    "header": [
                        "role_code",
                        "street",
                        "city",
                        "state"
                    ],
                    "cell": [
                        [
                            "Employee",
                            "6915 Oberbrunner Point Suite 491\nGleasonville, LA ",
                            "West Heidi",
                            "Indiana"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
                "sql_query": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'",
                "sql_query_result": {
                    "header": [
                        "role_code",
                        "street",
                        "city",
                        "state"
                    ],
                    "cell": [
                        [
                            "Employee",
                            "6915 Oberbrunner Point Suite 491\nGleasonville, LA ",
                            "West Heidi",
                            "Indiana"
                        ]
                    ]
                }
            },
            {
                "nl_query": "List the email, cell phone and home phone of all the professionals.",
                "sql_query": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
                "sql_query_result": {
                    "header": [
                        "email_address",
                        "cell_number",
                        "home_phone"
                    ],
                    "cell": [
                        [
                            "deanna.schuster@example.com",
                            "(275)939-2435x80863",
                            "+71(6)2898266914"
                        ],
                        [
                            "lucile.shanahan@example.org",
                            "889-940-2676",
                            "+02(1)0259033559"
                        ],
                        [
                            "uboehm@example.org",
                            "(369)908-7311x065",
                            "325-155-0801x7005"
                        ],
                        [
                            "lourdes.lowe@example.net",
                            "00230569697",
                            "312.216.3352"
                        ],
                        [
                            "mekhi.little@example.org",
                            "011.193.9081x3186",
                            "1-609-566-2752x25197"
                        ],
                        [
                            "jacynthe.mclaughlin@example.net",
                            "139-321-7313",
                            "+43(5)1132733868"
                        ],
                        [
                            "lambert62@example.org",
                            "499-434-0215x1628",
                            "022.529.0550x1319"
                        ],
                        [
                            "goyette.roosevelt@example.net",
                            "328.842.3792",
                            "891.475.2256"
                        ],
                        [
                            "schneider.kathryne@example.org",
                            "962-983-8109x3509",
                            "320-508-6023"
                        ],
                        [
                            "jerrod.bahringer@example.org",
                            "461-801-2600",
                            "(230)338-3342x585"
                        ],
                        [
                            "west.eula@example.net",
                            "609-405-2990",
                            "(920)304-4499x59146"
                        ],
                        [
                            "marquardt.furman@example.org",
                            "1-181-670-9466",
                            "246-951-0080x76716"
                        ],
                        [
                            "delphine29@example.com",
                            "880-659-7577x736",
                            "346.594.3739"
                        ],
                        [
                            "cole.margarita@example.org",
                            "1-185-137-1945x409",
                            "971.048.3763x9404"
                        ],
                        [
                            "jeichmann@example.com",
                            "1-258-285-4707x8020",
                            "1-138-287-3775"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the email, cell phone and home phone of each professional?",
                "sql_query": "SELECT email_address ,  cell_number ,  home_phone FROM professionals",
                "sql_query_result": {
                    "header": [
                        "email_address",
                        "cell_number",
                        "home_phone"
                    ],
                    "cell": [
                        [
                            "deanna.schuster@example.com",
                            "(275)939-2435x80863",
                            "+71(6)2898266914"
                        ],
                        [
                            "lucile.shanahan@example.org",
                            "889-940-2676",
                            "+02(1)0259033559"
                        ],
                        [
                            "uboehm@example.org",
                            "(369)908-7311x065",
                            "325-155-0801x7005"
                        ],
                        [
                            "lourdes.lowe@example.net",
                            "00230569697",
                            "312.216.3352"
                        ],
                        [
                            "mekhi.little@example.org",
                            "011.193.9081x3186",
                            "1-609-566-2752x25197"
                        ],
                        [
                            "jacynthe.mclaughlin@example.net",
                            "139-321-7313",
                            "+43(5)1132733868"
                        ],
                        [
                            "lambert62@example.org",
                            "499-434-0215x1628",
                            "022.529.0550x1319"
                        ],
                        [
                            "goyette.roosevelt@example.net",
                            "328.842.3792",
                            "891.475.2256"
                        ],
                        [
                            "schneider.kathryne@example.org",
                            "962-983-8109x3509",
                            "320-508-6023"
                        ],
                        [
                            "jerrod.bahringer@example.org",
                            "461-801-2600",
                            "(230)338-3342x585"
                        ],
                        [
                            "west.eula@example.net",
                            "609-405-2990",
                            "(920)304-4499x59146"
                        ],
                        [
                            "marquardt.furman@example.org",
                            "1-181-670-9466",
                            "246-951-0080x76716"
                        ],
                        [
                            "delphine29@example.com",
                            "880-659-7577x736",
                            "346.594.3739"
                        ],
                        [
                            "cole.margarita@example.org",
                            "1-185-137-1945x409",
                            "971.048.3763x9404"
                        ],
                        [
                            "jeichmann@example.com",
                            "1-258-285-4707x8020",
                            "1-138-287-3775"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "ee8df0e42237d7ffbcbd2e33b98b60b6615e7b7caced5dde5ed1adcf0cf59332"
        ],
        "data_list": [
            {
                "nl_query": "What are the arriving date and the departing date of all the dogs?",
                "sql_query": "SELECT date_arrived ,  date_departed FROM Dogs",
                "sql_query_result": {
                    "header": [
                        "date_arrived",
                        "date_departed"
                    ],
                    "cell": [
                        [
                            "2017-09-08 20:10:13",
                            "2018-03-25 06:58:44"
                        ],
                        [
                            "2017-12-22 05:02:02",
                            "2018-03-25 02:11:32"
                        ],
                        [
                            "2017-06-25 10:14:05",
                            "2018-03-25 10:25:46"
                        ],
                        [
                            "2017-04-20 00:58:55",
                            "2018-03-24 19:12:22"
                        ],
                        [
                            "2017-10-25 00:55:34",
                            "2018-03-25 04:50:22"
                        ],
                        [
                            "2017-04-15 09:25:31",
                            "2018-03-25 13:07:04"
                        ],
                        [
                            "2017-05-06 08:03:52",
                            "2018-03-25 06:29:10"
                        ],
                        [
                            "2017-10-16 20:06:21",
                            "2018-03-25 02:47:40"
                        ],
                        [
                            "2018-01-17 11:44:16",
                            "2018-03-25 06:46:07"
                        ],
                        [
                            "2017-12-29 06:08:26",
                            "2018-03-25 04:42:14"
                        ],
                        [
                            "2017-07-25 15:19:07",
                            "2018-03-25 15:05:16"
                        ],
                        [
                            "2017-10-24 04:45:13",
                            "2018-03-25 14:15:41"
                        ],
                        [
                            "2018-01-02 03:15:29",
                            "2018-03-25 05:07:47"
                        ],
                        [
                            "2017-06-18 19:45:38",
                            "2018-03-24 23:48:59"
                        ],
                        [
                            "2017-12-29 23:24:13",
                            "2018-03-24 19:36:59"
                        ]
                    ]
                }
            },
            {
                "nl_query": "List the arrival date and the departure date for all the dogs.",
                "sql_query": "SELECT date_arrived ,  date_departed FROM Dogs",
                "sql_query_result": {
                    "header": [
                        "date_arrived",
                        "date_departed"
                    ],
                    "cell": [
                        [
                            "2017-09-08 20:10:13",
                            "2018-03-25 06:58:44"
                        ],
                        [
                            "2017-12-22 05:02:02",
                            "2018-03-25 02:11:32"
                        ],
                        [
                            "2017-06-25 10:14:05",
                            "2018-03-25 10:25:46"
                        ],
                        [
                            "2017-04-20 00:58:55",
                            "2018-03-24 19:12:22"
                        ],
                        [
                            "2017-10-25 00:55:34",
                            "2018-03-25 04:50:22"
                        ],
                        [
                            "2017-04-15 09:25:31",
                            "2018-03-25 13:07:04"
                        ],
                        [
                            "2017-05-06 08:03:52",
                            "2018-03-25 06:29:10"
                        ],
                        [
                            "2017-10-16 20:06:21",
                            "2018-03-25 02:47:40"
                        ],
                        [
                            "2018-01-17 11:44:16",
                            "2018-03-25 06:46:07"
                        ],
                        [
                            "2017-12-29 06:08:26",
                            "2018-03-25 04:42:14"
                        ],
                        [
                            "2017-07-25 15:19:07",
                            "2018-03-25 15:05:16"
                        ],
                        [
                            "2017-10-24 04:45:13",
                            "2018-03-25 14:15:41"
                        ],
                        [
                            "2018-01-02 03:15:29",
                            "2018-03-25 05:07:47"
                        ],
                        [
                            "2017-06-18 19:45:38",
                            "2018-03-24 23:48:59"
                        ],
                        [
                            "2017-12-29 23:24:13",
                            "2018-03-24 19:36:59"
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many dogs have an age below the average?",
                "sql_query": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            9
                        ]
                    ]
                }
            },
            {
                "nl_query": "Count the number of dogs of an age below the average.",
                "sql_query": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            9
                        ]
                    ]
                }
            },
            {
                "nl_query": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
                "sql_query": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
                "sql_query_result": {
                    "header": [
                        "name",
                        "age",
                        "weight"
                    ],
                    "cell": [
                        [
                            "Kacey",
                            "6",
                            "7.57"
                        ],
                        [
                            "Lyric",
                            "4",
                            "4.36"
                        ],
                        [
                            "Evangeline",
                            "1",
                            "4.01"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
                "sql_query": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1",
                "sql_query_result": {
                    "header": [
                        "name",
                        "age",
                        "weight"
                    ],
                    "cell": [
                        [
                            "Kacey",
                            "6",
                            "7.57"
                        ],
                        [
                            "Lyric",
                            "4",
                            "4.36"
                        ],
                        [
                            "Evangeline",
                            "1",
                            "4.01"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the average age of all the dogs?",
                "sql_query": "SELECT avg(age) FROM Dogs",
                "sql_query_result": {
                    "header": [
                        "avg(age)"
                    ],
                    "cell": [
                        [
                            5.0666666667
                        ]
                    ]
                }
            },
            {
                "nl_query": "Compute the average age of all the dogs.",
                "sql_query": "SELECT avg(age) FROM Dogs",
                "sql_query_result": {
                    "header": [
                        "avg(age)"
                    ],
                    "cell": [
                        [
                            5.0666666667
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the age of the oldest dog?",
                "sql_query": "SELECT max(age) FROM Dogs",
                "sql_query_result": {
                    "header": [
                        "max(age)"
                    ],
                    "cell": [
                        [
                            "9"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Tell me the age of the oldest dog.",
                "sql_query": "SELECT max(age) FROM Dogs",
                "sql_query_result": {
                    "header": [
                        "max(age)"
                    ],
                    "cell": [
                        [
                            "9"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are all the possible breed type and size type combinations?",
                "sql_query": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
                "sql_query_result": {
                    "header": [
                        "breed_code",
                        "size_code"
                    ],
                    "cell": [
                        [
                            "ESK",
                            "LGE"
                        ],
                        [
                            "BUL",
                            "LGE"
                        ],
                        [
                            "BUL",
                            "MED"
                        ],
                        [
                            "HUS",
                            "MED"
                        ],
                        [
                            "ESK",
                            "SML"
                        ],
                        [
                            "HUS",
                            "SML"
                        ],
                        [
                            "ESK",
                            "MED"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the distinct breed type and size type combinations for dogs.",
                "sql_query": "SELECT DISTINCT breed_code ,  size_code FROM dogs",
                "sql_query_result": {
                    "header": [
                        "breed_code",
                        "size_code"
                    ],
                    "cell": [
                        [
                            "ESK",
                            "LGE"
                        ],
                        [
                            "BUL",
                            "LGE"
                        ],
                        [
                            "BUL",
                            "MED"
                        ],
                        [
                            "HUS",
                            "MED"
                        ],
                        [
                            "ESK",
                            "SML"
                        ],
                        [
                            "HUS",
                            "SML"
                        ],
                        [
                            "ESK",
                            "MED"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "98dc85b59cdb57e3322352e1aa4aa3878c3896ea090245baeacc507db7429359"
        ],
        "data_list": [
            {
                "nl_query": "How many dogs went through any treatments?",
                "sql_query": "SELECT count(DISTINCT dog_id) FROM Treatments",
                "sql_query_result": {
                    "header": [
                        "count(DISTINCT dog_id)"
                    ],
                    "cell": [
                        [
                            9
                        ]
                    ]
                }
            },
            {
                "nl_query": "Count the number of dogs that went through a treatment.",
                "sql_query": "SELECT count(DISTINCT dog_id) FROM Treatments",
                "sql_query_result": {
                    "header": [
                        "count(DISTINCT dog_id)"
                    ],
                    "cell": [
                        [
                            9
                        ]
                    ]
                }
            },
            {
                "nl_query": "How many professionals have performed any treatment to dogs?",
                "sql_query": "SELECT count(DISTINCT professional_id) FROM Treatments",
                "sql_query_result": {
                    "header": [
                        "count(DISTINCT professional_id)"
                    ],
                    "cell": [
                        [
                            8
                        ]
                    ]
                }
            },
            {
                "nl_query": "Find the number of professionals who have ever treated dogs.",
                "sql_query": "SELECT count(DISTINCT professional_id) FROM Treatments",
                "sql_query_result": {
                    "header": [
                        "count(DISTINCT professional_id)"
                    ],
                    "cell": [
                        [
                            8
                        ]
                    ]
                }
            },
            {
                "nl_query": "How much does the most recent treatment cost?",
                "sql_query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "cost_of_treatment"
                    ],
                    "cell": [
                        [
                            407
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show me the cost of the most recently performed treatment.",
                "sql_query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "cost_of_treatment"
                    ],
                    "cell": [
                        [
                            407
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "74746fb3901242ce558108a873e1483af0002e1d1fd67234d33a812d3bf0f47c"
        ],
        "data_list": [
            {
                "nl_query": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
                "sql_query": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
                "sql_query_result": {
                    "header": [
                        "first_name",
                        "last_name",
                        "email_address"
                    ],
                    "cell": [
                        [
                            "Johann",
                            "Fisher",
                            "zboncak.madonna@example.net"
                        ],
                        [
                            "Cindy",
                            "Schmitt",
                            "wpfeffer@example.net"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
                "sql_query": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
                "sql_query_result": {
                    "header": [
                        "first_name",
                        "last_name",
                        "email_address"
                    ],
                    "cell": [
                        [
                            "Johann",
                            "Fisher",
                            "zboncak.madonna@example.net"
                        ],
                        [
                            "Cindy",
                            "Schmitt",
                            "wpfeffer@example.net"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "9456de7b3f50f59ed3335280acebb7713d2d6c5484b10d3674812574293b4e4b"
        ],
        "data_list": [
            {
                "nl_query": "How much does each charge type costs? List both charge type and amount.",
                "sql_query": "SELECT charge_type ,  charge_amount FROM Charges",
                "sql_query_result": {
                    "header": [
                        "charge_type",
                        "charge_amount"
                    ],
                    "cell": [
                        [
                            "Daily Accommodation",
                            98
                        ],
                        [
                            "Drugs",
                            322
                        ],
                        [
                            "Health Check",
                            640
                        ]
                    ]
                }
            },
            {
                "nl_query": "List each charge type and its amount.",
                "sql_query": "SELECT charge_type ,  charge_amount FROM Charges",
                "sql_query_result": {
                    "header": [
                        "charge_type",
                        "charge_amount"
                    ],
                    "cell": [
                        [
                            "Daily Accommodation",
                            98
                        ],
                        [
                            "Drugs",
                            322
                        ],
                        [
                            "Health Check",
                            640
                        ]
                    ]
                }
            },
            {
                "nl_query": "How much does the most expensive charge type costs?",
                "sql_query": "SELECT max(charge_amount) FROM Charges",
                "sql_query_result": {
                    "header": [
                        "max(charge_amount)"
                    ],
                    "cell": [
                        [
                            640
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the charge amount of the most expensive charge type?",
                "sql_query": "SELECT max(charge_amount) FROM Charges",
                "sql_query_result": {
                    "header": [
                        "max(charge_amount)"
                    ],
                    "cell": [
                        [
                            640
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "04e22f56f25090198f6463d516e334a692c1a6db1f2283977c1fcbb31fc6071f",
            "53359685d0c41d5a548510a3c64b70d593e2b601132274334646c5a507a641ef",
            "98dc85b59cdb57e3322352e1aa4aa3878c3896ea090245baeacc507db7429359"
        ],
        "data_list": [
            {
                "nl_query": "List the first name of all the professionals along with the description of the treatment they have done.",
                "sql_query": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
                "sql_query_result": {
                    "header": [
                        "first_name",
                        "treatment_type_description"
                    ],
                    "cell": [
                        [
                            "Monte",
                            "Take for a Walk"
                        ],
                        [
                            "Domenica",
                            "Vaccination"
                        ],
                        [
                            "Vernice",
                            "Physical examination"
                        ],
                        [
                            "Karley",
                            "Vaccination"
                        ],
                        [
                            "Sigurd",
                            "Vaccination"
                        ],
                        [
                            "Sigurd",
                            "Physical examination"
                        ],
                        [
                            "Ruben",
                            "Physical examination"
                        ],
                        [
                            "Domenica",
                            "Take for a Walk"
                        ],
                        [
                            "Velva",
                            "Take for a Walk"
                        ],
                        [
                            "Danny",
                            "Vaccination"
                        ],
                        [
                            "Monte",
                            "Physical examination"
                        ],
                        [
                            "Ruben",
                            "Take for a Walk"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are each professional's first name and description of the treatment they have performed?",
                "sql_query": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",
                "sql_query_result": {
                    "header": [
                        "first_name",
                        "treatment_type_description"
                    ],
                    "cell": [
                        [
                            "Monte",
                            "Take for a Walk"
                        ],
                        [
                            "Domenica",
                            "Vaccination"
                        ],
                        [
                            "Vernice",
                            "Physical examination"
                        ],
                        [
                            "Karley",
                            "Vaccination"
                        ],
                        [
                            "Sigurd",
                            "Vaccination"
                        ],
                        [
                            "Sigurd",
                            "Physical examination"
                        ],
                        [
                            "Ruben",
                            "Physical examination"
                        ],
                        [
                            "Domenica",
                            "Take for a Walk"
                        ],
                        [
                            "Velva",
                            "Take for a Walk"
                        ],
                        [
                            "Danny",
                            "Vaccination"
                        ],
                        [
                            "Monte",
                            "Physical examination"
                        ],
                        [
                            "Ruben",
                            "Take for a Walk"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "18e966109d5c44e68c92037f0ce220968769abaef76889088fccbefca497d5b5"
        ],
        "data_list": [
            {
                "nl_query": "How many singers are there?",
                "sql_query": "SELECT count(*) FROM singer",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            8
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the count of singers?",
                "sql_query": "SELECT count(*) FROM singer",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            8
                        ]
                    ]
                }
            },
            {
                "nl_query": "List the name of singers in ascending order of net worth.",
                "sql_query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Abigail Johnson"
                        ],
                        [
                            "Susanne Klatten"
                        ],
                        [
                            "Gina Rinehart"
                        ],
                        [
                            "Iris Fontbona"
                        ],
                        [
                            "Jacqueline Mars"
                        ],
                        [
                            "Alice Walton"
                        ],
                        [
                            "Christy Walton"
                        ],
                        [
                            "Liliane Bettencourt"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names of singers ordered by ascending net worth?",
                "sql_query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Abigail Johnson"
                        ],
                        [
                            "Susanne Klatten"
                        ],
                        [
                            "Gina Rinehart"
                        ],
                        [
                            "Iris Fontbona"
                        ],
                        [
                            "Jacqueline Mars"
                        ],
                        [
                            "Alice Walton"
                        ],
                        [
                            "Christy Walton"
                        ],
                        [
                            "Liliane Bettencourt"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the birth year and citizenship of singers?",
                "sql_query": "SELECT Birth_Year ,  Citizenship FROM singer",
                "sql_query_result": {
                    "header": [
                        "Birth_Year",
                        "Citizenship"
                    ],
                    "cell": [
                        [
                            1944.0,
                            "France"
                        ],
                        [
                            1948.0,
                            "United States"
                        ],
                        [
                            1949.0,
                            "United States"
                        ],
                        [
                            1942.0,
                            "Chile"
                        ],
                        [
                            1940.0,
                            "United States"
                        ],
                        [
                            1953.0,
                            "Australia"
                        ],
                        [
                            1962.0,
                            "Germany"
                        ],
                        [
                            1961.0,
                            "United States"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the birth years and citizenships of the singers?",
                "sql_query": "SELECT Birth_Year ,  Citizenship FROM singer",
                "sql_query_result": {
                    "header": [
                        "Birth_Year",
                        "Citizenship"
                    ],
                    "cell": [
                        [
                            1944.0,
                            "France"
                        ],
                        [
                            1948.0,
                            "United States"
                        ],
                        [
                            1949.0,
                            "United States"
                        ],
                        [
                            1942.0,
                            "Chile"
                        ],
                        [
                            1940.0,
                            "United States"
                        ],
                        [
                            1953.0,
                            "Australia"
                        ],
                        [
                            1962.0,
                            "Germany"
                        ],
                        [
                            1961.0,
                            "United States"
                        ]
                    ]
                }
            },
            {
                "nl_query": "List the name of singers whose citizenship is not \"France\".",
                "sql_query": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Christy Walton"
                        ],
                        [
                            "Alice Walton"
                        ],
                        [
                            "Iris Fontbona"
                        ],
                        [
                            "Jacqueline Mars"
                        ],
                        [
                            "Gina Rinehart"
                        ],
                        [
                            "Susanne Klatten"
                        ],
                        [
                            "Abigail Johnson"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names of the singers who are not French citizens?",
                "sql_query": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Christy Walton"
                        ],
                        [
                            "Alice Walton"
                        ],
                        [
                            "Iris Fontbona"
                        ],
                        [
                            "Jacqueline Mars"
                        ],
                        [
                            "Gina Rinehart"
                        ],
                        [
                            "Susanne Klatten"
                        ],
                        [
                            "Abigail Johnson"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show the name of singers whose birth year is either 1948 or 1949?",
                "sql_query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Christy Walton"
                        ],
                        [
                            "Alice Walton"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names of the singers whose birth years are either 1948 or 1949?",
                "sql_query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Christy Walton"
                        ],
                        [
                            "Alice Walton"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the name of the singer with the largest net worth?",
                "sql_query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Liliane Bettencourt"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the name of the singer who is worth the most?",
                "sql_query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Liliane Bettencourt"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show different citizenship of singers and the number of singers of each citizenship.",
                "sql_query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
                "sql_query_result": {
                    "header": [
                        "Citizenship",
                        "COUNT(*)"
                    ],
                    "cell": [
                        [
                            "Australia",
                            1
                        ],
                        [
                            "Chile",
                            1
                        ],
                        [
                            "France",
                            1
                        ],
                        [
                            "Germany",
                            1
                        ],
                        [
                            "United States",
                            4
                        ]
                    ]
                }
            },
            {
                "nl_query": "For each citizenship, how many singers are from that country?",
                "sql_query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",
                "sql_query_result": {
                    "header": [
                        "Citizenship",
                        "COUNT(*)"
                    ],
                    "cell": [
                        [
                            "Australia",
                            1
                        ],
                        [
                            "Chile",
                            1
                        ],
                        [
                            "France",
                            1
                        ],
                        [
                            "Germany",
                            1
                        ],
                        [
                            "United States",
                            4
                        ]
                    ]
                }
            },
            {
                "nl_query": "Please show the most common citizenship of singers.",
                "sql_query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
                "sql_query_result": {
                    "header": [
                        "Citizenship"
                    ],
                    "cell": [
                        [
                            "United States"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show different citizenships and the maximum net worth of singers of each citizenship.",
                "sql_query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
                "sql_query_result": {
                    "header": [
                        "Citizenship",
                        "max(Net_Worth_Millions)"
                    ],
                    "cell": [
                        [
                            "Australia",
                            17.0
                        ],
                        [
                            "Chile",
                            17.4
                        ],
                        [
                            "France",
                            30.0
                        ],
                        [
                            "Germany",
                            14.3
                        ],
                        [
                            "United States",
                            28.8
                        ]
                    ]
                }
            },
            {
                "nl_query": "For each citizenship, what is the maximum net worth?",
                "sql_query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
                "sql_query_result": {
                    "header": [
                        "Citizenship",
                        "max(Net_Worth_Millions)"
                    ],
                    "cell": [
                        [
                            "Australia",
                            17.0
                        ],
                        [
                            "Chile",
                            17.4
                        ],
                        [
                            "France",
                            30.0
                        ],
                        [
                            "Germany",
                            14.3
                        ],
                        [
                            "United States",
                            28.8
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
                "sql_query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
                "sql_query_result": {
                    "header": [
                        "Citizenship"
                    ],
                    "cell": [
                        [
                            "United States"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
                "sql_query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955",
                "sql_query_result": {
                    "header": [
                        "Citizenship"
                    ],
                    "cell": [
                        [
                            "United States"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "18e966109d5c44e68c92037f0ce220968769abaef76889088fccbefca497d5b5",
            "f07bbf83ee908ce18a6baca01b884506bb587e0910c46276e399ce00407f2417"
        ],
        "data_list": [
            {
                "nl_query": "Show titles of songs and names of singers.",
                "sql_query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
                "sql_query_result": {
                    "header": [
                        "Title",
                        "Name"
                    ],
                    "cell": [
                        [
                            "Do They Know It's Christmas",
                            "Liliane Bettencourt"
                        ],
                        [
                            "F**k It (I Don't Want You Back)",
                            "Liliane Bettencourt"
                        ],
                        [
                            "Cha Cha Slide",
                            "Christy Walton"
                        ],
                        [
                            "Call on Me",
                            "Iris Fontbona"
                        ],
                        [
                            "Yeah",
                            "Christy Walton"
                        ],
                        [
                            "All This Time",
                            "Gina Rinehart"
                        ],
                        [
                            "Left Outside Alone",
                            "Jacqueline Mars"
                        ],
                        [
                            "Mysterious Girl",
                            "Susanne Klatten"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the song titles and singer names?",
                "sql_query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",
                "sql_query_result": {
                    "header": [
                        "Title",
                        "Name"
                    ],
                    "cell": [
                        [
                            "Do They Know It's Christmas",
                            "Liliane Bettencourt"
                        ],
                        [
                            "F**k It (I Don't Want You Back)",
                            "Liliane Bettencourt"
                        ],
                        [
                            "Cha Cha Slide",
                            "Christy Walton"
                        ],
                        [
                            "Call on Me",
                            "Iris Fontbona"
                        ],
                        [
                            "Yeah",
                            "Christy Walton"
                        ],
                        [
                            "All This Time",
                            "Gina Rinehart"
                        ],
                        [
                            "Left Outside Alone",
                            "Jacqueline Mars"
                        ],
                        [
                            "Mysterious Girl",
                            "Susanne Klatten"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show distinct names of singers that have songs with sales more than 300000.",
                "sql_query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Liliane Bettencourt"
                        ],
                        [
                            "Christy Walton"
                        ],
                        [
                            "Iris Fontbona"
                        ]
                    ]
                }
            },
            {
                "nl_query": "what are the different names of the singers that have sales more than 300000?",
                "sql_query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Liliane Bettencourt"
                        ],
                        [
                            "Christy Walton"
                        ],
                        [
                            "Iris Fontbona"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show the names of singers that have more than one song.",
                "sql_query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Christy Walton"
                        ],
                        [
                            "Liliane Bettencourt"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What are the names of the singers that have more than one songs?",
                "sql_query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Christy Walton"
                        ],
                        [
                            "Liliane Bettencourt"
                        ]
                    ]
                }
            },
            {
                "nl_query": "Show the names of singers and the total sales of their songs.",
                "sql_query": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
                "sql_query_result": {
                    "header": [
                        "Name",
                        "sum(T2.Sales)"
                    ],
                    "cell": [
                        [
                            "Christy Walton",
                            651421.0
                        ],
                        [
                            "Gina Rinehart",
                            292000.0
                        ],
                        [
                            "Iris Fontbona",
                            335000.0
                        ],
                        [
                            "Jacqueline Mars",
                            275000.0
                        ],
                        [
                            "Liliane Bettencourt",
                            1646407.0
                        ],
                        [
                            "Susanne Klatten",
                            261000.0
                        ]
                    ]
                }
            },
            {
                "nl_query": "For each singer name, what is the total sales for their songs?",
                "sql_query": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",
                "sql_query_result": {
                    "header": [
                        "Name",
                        "sum(T2.Sales)"
                    ],
                    "cell": [
                        [
                            "Christy Walton",
                            651421.0
                        ],
                        [
                            "Gina Rinehart",
                            292000.0
                        ],
                        [
                            "Iris Fontbona",
                            335000.0
                        ],
                        [
                            "Jacqueline Mars",
                            275000.0
                        ],
                        [
                            "Liliane Bettencourt",
                            1646407.0
                        ],
                        [
                            "Susanne Klatten",
                            261000.0
                        ]
                    ]
                }
            },
            {
                "nl_query": "List the name of singers that do not have any song.",
                "sql_query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Alice Walton"
                        ],
                        [
                            "Abigail Johnson"
                        ]
                    ]
                }
            },
            {
                "nl_query": "What is the sname of every sing that does not have any song?",
                "sql_query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
                "sql_query_result": {
                    "header": [
                        "Name"
                    ],
                    "cell": [
                        [
                            "Alice Walton"
                        ],
                        [
                            "Abigail Johnson"
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "4e8a977bb9d17eed4eb9b1a40a99b5b90b5e7d2dc3422c06acafd9a7db78d88a"
        ],
        "data_list": [
            {
                "nl_query": "How many available features are there in total?",
                "sql_query": "SELECT count(*) FROM Other_Available_Features",
                "sql_query_result": {
                    "header": [
                        "count(*)"
                    ],
                    "cell": [
                        [
                            3
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "4e8a977bb9d17eed4eb9b1a40a99b5b90b5e7d2dc3422c06acafd9a7db78d88a",
            "d09907266ce429a356c1fec030c4f22777d1a48c8a212143bbdeea3a694e0376"
        ],
        "data_list": [
            {
                "nl_query": "What is the feature type name of feature AirCon?",
                "sql_query": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"",
                "sql_query_result": {
                    "header": [
                        "feature_type_name"
                    ],
                    "cell": [
                        [
                            "Amenity, eg Pool."
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "cc6ef0895dfdc2ed3722e98d8a45fe4d8d5d36dd0d817de6a3b1a8582c4aa8cc",
            "f1fab262e60c305186a017d613ea3b2146a126733893d9fe41d7f43e22988266"
        ],
        "data_list": [
            {
                "nl_query": "Show the property type descriptions of properties belonging to that code.",
                "sql_query": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code",
                "sql_query_result": {
                    "header": [
                        "property_type_description"
                    ],
                    "cell": [
                        [
                            "Apartment, Flat, Condo, etc."
                        ],
                        [
                            "Field, Meadow."
                        ],
                        [
                            "House, Bungalow, etc."
                        ],
                        [
                            "Other, to be determined."
                        ],
                        [
                            "Shop, Retail Outlet."
                        ]
                    ]
                }
            }
        ]
    },
    {
        "gold_table_id_set": [
            "cc6ef0895dfdc2ed3722e98d8a45fe4d8d5d36dd0d817de6a3b1a8582c4aa8cc"
        ],
        "data_list": [
            {
                "nl_query": "What are the names of properties that are either houses or apartments with more than 1 room?",
                "sql_query": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1",
                "sql_query_result": {
                    "header": [
                        "property_name"
                    ],
                    "cell": [
                        [
                            "longacre"
                        ],
                        [
                            "parc coliseum"
                        ],
                        [
                            "parc east"
                        ],
                        [
                            "park"
                        ],
                        [
                            "renoir"
                        ],
                        [
                            "ten tower"
                        ],
                        [
                            "the cole"
                        ],
                        [
                            "vogue"
                        ]
                    ]
                }
            }
        ]
    }
]